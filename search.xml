<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[ Divide Two Integers || Find Minimum in Rotated Sorted Array II]]></title>
      <url>/2017/07/08/--Divide-Two-Integers-%7C%7C-Find-Minimum-in-Rotated-Sorted-Array-II/</url>
      <content type="html"><![CDATA[<h3 id="Divide-Two-Integers"><a href="#Divide-Two-Integers" class="headerlink" title="Divide Two Integers"></a>Divide Two Integers</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Divide two integers without using multiplication, division and mod operator.</p>
<p>If it is overflow, return MAX_INT.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>事先确定结果的正负号，操作过程中保证除数与被除数都为正</li>
<li>由于无法使用乘法，所以最初想法为被除数不断地减去被除数，直到值=0，减去被除数的次数即结果</li>
<li>对被除数进行位操作，左移k位相当于divisor的2^k倍，首先减去最大的k值下的divisor</li>
<li>shift++操作后的结果需-1是实际的结果</li>
<li>dividend - divisor移位后的结果，res + 1移位后的结果</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> isNeg=(dividend&gt;<span class="number">0</span>&amp;&amp;divisor&lt;<span class="number">0</span>)||(dividend&lt;<span class="number">0</span>&amp;&amp;divisor&gt;<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(dividend==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(divisor==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (dividend == Integer.MIN_VALUE &amp;&amp; divisor == -<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">long</span> up=Math.abs((<span class="keyword">long</span>)dividend);</div><div class="line">        <span class="keyword">long</span> down=Math.abs((<span class="keyword">long</span>)divisor);</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(up&gt;=down)&#123;</div><div class="line">            <span class="keyword">int</span> shift=<span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(up&gt;=(down&lt;&lt;shift))&#123;</div><div class="line">                shift++;</div><div class="line">            &#125;</div><div class="line">            res+=<span class="number">1</span>&lt;&lt;(shift-<span class="number">1</span>);</div><div class="line">            up-=down&lt;&lt;(shift-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(isNeg)   <span class="keyword">return</span> -res;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Find-Minimum-in-Rotated-Sorted-Array-II"><a href="#Find-Minimum-in-Rotated-Sorted-Array-II" class="headerlink" title="Find Minimum in Rotated Sorted Array II"></a>Find Minimum in Rotated Sorted Array II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).</p>
<p>Find the minimum element.</p>
<p>You may assume no duplicate exists in the array.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="http://www.jiuzhang.com/solutions/find-minimum-in-rotated-sorted-array-ii/" target="_blank" rel="external">九章算法</a></p>
</blockquote>
<p>同样当A[mid] = A[end]时，无法判断min究竟在左边还是右边。</p>
<p><strong>3</strong> 1 2 <strong>3</strong> 3 3 <strong>3</strong><br><strong>3</strong> 3 3 <strong>3</strong> 1 2 <strong>3</strong></p>
<p>但可以肯定的是可以排除A[end]：因为即使min = A[end]，由于A[end] = A[mid]，排除A[end]并没有让min丢失。所以增加的条件是：</p>
<p>A[mid] = A[end]：搜索A[start : end-1]</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(begin&lt;end)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[begin]&lt;nums[end])</div><div class="line">                <span class="keyword">return</span> nums[begin];</div><div class="line">            <span class="keyword">int</span> mid=begin/<span class="number">2</span>+end/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[mid]&gt;=nums[begin])</div><div class="line">                begin=mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                end=mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums[begin];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Math </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Number of Digit One || Integer Replacement]]></title>
      <url>/2017/07/08/--Number-of-Digit-One-%7C%7C-Integer-Replacement/</url>
      <content type="html"><![CDATA[<h3 id="Number-of-Digit-One"><a href="#Number-of-Digit-One" class="headerlink" title="Number of Digit One"></a>Number of Digit One</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.</p>
<p>For example:</p>
<p>Given n = 13,</p>
<p>Return 6, because digit 1 occurred in the following numbers: 1, 10, 11, 12, 13.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>每10个数, 有一个个位是1, 每100个数, 有10个十位是1, 每1000个数, 有100个百位是1.  做一个循环, 每次计算单个位上1得总个数(个位,十位, 百位).  </p>
<p>例子:</p>
<p>以算百位上1为例子:   假设百位上是0, 1, 和 &gt;=2 三种情况: </p>
<pre><code>case 1: n=3141092, a= 31410, b=92. 计算百位上1的个数应该为 3141 *100 次.

case 2: n=3141192, a= 31411, b=92. 计算百位上1的个数应该为 3141 *100 + (92+1) 次. 

case 3: n=3141592, a= 31415, b=92. 计算百位上1的个数应该为 (3141+1) *100 次. 
</code></pre><p>以上三种情况可以用 一个公式概括:</p>
<p>(a + 8) / 10 <em> m + (a % 10 == 1) </em> (b + 1);</p>
<p><strong>考虑到m可能会导致overflow，<u>a,b,m</u>均用long型</strong></p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countDigitOne</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ones=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> m=<span class="number">1</span>;m&lt;=n;m*=<span class="number">10</span>)&#123;</div><div class="line">            <span class="keyword">long</span> a=n/m,b=n%m;</div><div class="line">            ones+=(a+<span class="number">8</span>)/<span class="number">10</span>*m;</div><div class="line">            <span class="keyword">if</span>(a%<span class="number">10</span>==<span class="number">1</span>) ones+=b+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ones;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Integer-Replacement"><a href="#Integer-Replacement" class="headerlink" title="Integer Replacement"></a>Integer Replacement</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a positive integer <em>n</em> and you can do operations as follow:</p>
<ol>
<li>If <em>n</em> is even, replace <em>n</em> with <em>n</em>/2.</li>
<li>If <em>n</em> is odd, you can replace <em>n</em> with either <em>n</em> + 1 or <em>n</em> - 1.</li>
</ol>
<p>What is the minimum number of replacements needed for <em>n</em> to become 1?</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">8</div><div class="line"></div><div class="line">Output:</div><div class="line">3</div><div class="line"></div><div class="line">Explanation:</div><div class="line">8 -&gt; 4 -&gt; 2 -&gt; 1</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">7</div><div class="line"></div><div class="line">Output:</div><div class="line">4</div><div class="line"></div><div class="line">Explanation:</div><div class="line">7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1</div><div class="line">or</div><div class="line">7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/58334/a-couple-of-java-solutions-with-explanations" target="_blank" rel="external">LeetCode Discussion</a></p>
</blockquote>
<p>判断多少次操作后可以变1，显然应该通过位操作，分为两种情况，偶数/奇数</p>
<ol>
<li><p>偶数</p>
<p>偶数只需数字n无符号右移1位即可，注意判断的时候可以通过&amp;1判断是否为偶数 </p>
</li>
<li><p>奇数</p>
<p>通过以下示例可知，应该尽量将二进制n中的1的个数变少，有两种方法</p>
<ul>
<li>利用Integer.bitCount() 统计n+1与n-1后二进制数内1的个数，取少的那种做法</li>
<li>只需判断后两位数字即可，由于此时数为奇数，故末尾数一定为1<ul>
<li>假如倒数第二位数字为1，即<code>11</code>，此时+1操作所得数含1个数不多于-1操作，100/010</li>
<li>假如倒数第二位数字为0，即<code>01</code>，此时显然-1操作优于+1操作 </li>
</ul>
</li>
</ul>
<p>操作一：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">111011 -&gt; 111010 -&gt; 11101 -&gt; 11100 -&gt; 1110 -&gt; 111 -&gt; 1000 -&gt; 100 -&gt; 10 -&gt; 1</div></pre></td></tr></table></figure>
<p>操作二：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">111011 -&gt; 111100 -&gt; 11110 -&gt; 1111 -&gt; 10000 -&gt; 1000 -&gt; 100 -&gt; 10 -&gt; 1</div></pre></td></tr></table></figure>
<p>操作二的次数显然少于操作一</p>
</li>
</ol>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerReplacement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(n!=<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span>((n&amp;<span class="number">1</span>)==<span class="number">0</span>)</div><div class="line">                n&gt;&gt;&gt;=<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(n==<span class="number">3</span>||((n&gt;&gt;&gt;<span class="number">1</span>)&amp;<span class="number">1</span>)==<span class="number">0</span>)</div><div class="line">                    n--;</div><div class="line">                <span class="keyword">else</span> </div><div class="line">                    n++;</div><div class="line">            &#125;</div><div class="line">            cnt++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Java 多线程整理 ]]></title>
      <url>/2017/03/14/2017-03-14--Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%B4%E7%90%86%20/</url>
      <content type="html"><![CDATA[<h3 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h3><ol>
<li>一个程序可能包含多个并发运行的任务，线程是指一个任务从头到尾的执行流。</li>
<li>多个线程共享CPU时间成为<strong>时间共享</strong>，而操作系统负责调度及分配资源给它们。</li>
<li>多线程可以使程序反应更快，交互性更强，执行效率更高。</li>
</ol>
<h3 id="创建任务和线程"><a href="#创建任务和线程" class="headerlink" title="创建任务和线程"></a>创建任务和线程</h3><ol>
<li>首选需要创建任务，为任务定义一个类。<strong>任务类必须实现Runnable接口</strong>，<strong>它只包含了一个run方法</strong>，这个方法用来告诉系统线程如何运行。</li>
<li>任务必须在线程中进行，故需要利用Thread创建任务的线程。</li>
<li>调用start() 方法告诉Java虚拟机该线程准备运行。</li>
<li>Java虚拟机通过调用任务的run()方法执行任务，Java虚拟机会自动调用该方法，无需特意调用。<strong>直接调用run()只是在同一个线程中执行该方法，而没有新线程被启动。</strong></li>
</ol>
<p><strong>例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> thread;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThread</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//Create Tasks</span></div><div class="line">		Runnable printA=<span class="keyword">new</span> printchar(<span class="string">'A'</span>,<span class="number">100</span>);</div><div class="line">		Runnable printB=<span class="keyword">new</span> printchar(<span class="string">'B'</span>,<span class="number">100</span>);</div><div class="line">		Runnable print100=<span class="keyword">new</span> printnum(<span class="number">100</span>);</div><div class="line">		<span class="comment">//Create Thread</span></div><div class="line">		Thread thread1=<span class="keyword">new</span> Thread(printA);</div><div class="line">		Thread thread2=<span class="keyword">new</span> Thread(printB);</div><div class="line">		Thread thread3=<span class="keyword">new</span> Thread(print100);</div><div class="line">		<span class="comment">//Run Thread</span></div><div class="line">		thread1.start();</div><div class="line">		thread2.start();</div><div class="line">		thread3.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">printchar</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">char</span> chartoprint;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> times;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">printchar</span><span class="params">(<span class="keyword">char</span> chartoprint, <span class="keyword">int</span> times)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.chartoprint = chartoprint;</div><div class="line">		<span class="keyword">this</span>.times = times;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</div><div class="line">			System.out.print(<span class="string">" "</span> + chartoprint);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">printnum</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> num;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">printnum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.num = num;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">			System.out.print(<span class="string">" "</span> + i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><p>Thread类包含的方法：</p>
<ul>
<li>Thread() 创建一个空的线程</li>
<li>Thread(Task: Runnable) 为指定任务创建一个线程</li>
<li>start() <strong>启动线程使得方法run() 被JVM调用</strong></li>
<li>isAlive() 测试线程当前是否正在运行</li>
<li>setPriority(p:int) 设置线程的优先级p(范围从1到10)</li>
<li>join() <strong>等待当前线程的结束，用于插入其他线程执行的过程中</strong></li>
<li>sleep(millis: long) <strong>使当前线程睡眠指定的数</strong></li>
<li>yield() <strong>使当前线程暂停并允许执行其他线程</strong></li>
<li>interrupt() 中断线程</li>
</ul>
<ol>
<li><p>Tread类还包含方法stop(), suspend(), resume() 但是由于这些方法具有内在的不安全因素，故被停用。<strong>可以通过给Thread赋值null表明停止以代替stop()。</strong></p>
</li>
<li><p>sleep方法可能跑出一个InterruptedException，这是一个<strong>必检异常</strong>。当一个休眠线程的interrupt()方法被调用时，就会发生这样的异常。<strong>必须将他放在try-catch块中。如果在一个循环中调用了sleep方法，应该将其放入块内，如果循环在块外，即使线程中断，也可能继续执行。</strong></p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Right</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">      	<span class="keyword">while</span>(...)&#123;</div><div class="line">          	...</div><div class="line">          	Thread.sleep(<span class="number">1000</span>);</div><div class="line">      	&#125;</div><div class="line">	&#125;</div><div class="line">  	<span class="keyword">catch</span>(InterruptedException ex)&#123;</div><div class="line">      	ex.printStackTrace();</div><div class="line">  	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Wrong</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">  	<span class="keyword">while</span>(...)&#123;</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">          	...</div><div class="line">          	Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125;</div><div class="line">  		<span class="keyword">catch</span>(InterruptedException ex)&#123;</div><div class="line">      		ex.printStackTrace();</div><div class="line">  		&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果总有一个优先级较高的线程在运行，或者有一个相同优先级的线程不退出，那么这个线程可能永远没有运行的机会。<strong>这种情况成为资源竞争或缺乏状态。</strong>为避免竞争现象，<strong>高优先级的线程必须定时地调用sleep方法或者yield方法，来给其他线程运行的机会。</strong></p>
</li>
</ol>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>由于为每个任务创建一个线程，对大量任务而言是不够高效的。为每个任务开始一个新线程<strong>可能会限制流量并且造成性能降低。</strong>线程池是管理并发执行任务个数的理想方法。</p>
<p><strong>Executor执行线程，而ExecutorService管理线程</strong></p>
<ol>
<li>Executors包含方法：<ul>
<li>newFixedThreadPool(numberOfThreads: int) 创建一个线程池，<strong>该线程池可并发执行的线程数量固定不变</strong>。当前任务结束后，它可以被重用以执行另一个任务。</li>
<li>newCachedThreadPool() 创建一个线程池，可以按需创建新线程，<strong>但当前面创建的线程可用时，重用它们。</strong></li>
</ul>
</li>
<li>ExecutorService包含方法：<ul>
<li>shutdown() 关闭执行器，但<strong>允许完成执行器中的任务</strong>。一旦关闭，不再接受新的任务。</li>
<li>shutdownNow() 即使当前线程池中还有未完成的线程，也立即关闭。<strong>返回未完成任务的清单。</strong></li>
<li>isShutdown() 已经关闭则返回true。</li>
<li>isTerminated() <strong>如果线程中所有任务都被终止，则返回true。</strong></li>
</ul>
</li>
<li>Executor包含方法：<ul>
<li>execute(Runnable object) 运行任务</li>
</ul>
</li>
</ol>
<p><strong>例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> thread;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThread</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ExecutorService executor=Executors.newFixedThreadPool(<span class="number">1</span>);</div><div class="line">		</div><div class="line">		executor.execute(<span class="keyword">new</span> printchar(<span class="string">'A'</span>,<span class="number">100</span>));</div><div class="line">		executor.execute(<span class="keyword">new</span> printchar(<span class="string">'B'</span>,<span class="number">100</span>));</div><div class="line">		executor.execute(<span class="keyword">new</span> printnum(<span class="number">100</span>));</div><div class="line">		</div><div class="line">		executor.shutdown();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上例中三个任务将交替执行</li>
<li>假如newFixedThreadPool(1) 则三个任务顺次执行</li>
<li>假如newCachedThreadPool() 则三个任务并行(交替执行)</li>
</ul>
<h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>任务之间以冲突的方式访问一个公共资源，这是多线程程序的普遍问题，称为<strong>竞争状态</strong>。 如果一个类的对象在多线程程序中没有导致竞争状态，则称这样的类为<strong>线程安全</strong>的。</p>
<ol>
<li><p>synchronized关键字</p>
<p>public synchronized void method(…)</p>
<p>一个执同步方法在执行之前需要加锁。<strong>对于实例方法，需给调用该方法的对象加锁；对于静态方法，要给这个类加锁。</strong>如果一个线程调用一个对象上的同步实例（静态）方法，首先给该对象(类)加锁，然后执行该方法，最后解锁。</p>
</li>
<li><p>同步语句</p>
<p>以下两种方法效果相同：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">xMethod</span><span class="params">()</span></span>&#123;</div><div class="line">  	<span class="comment">//Method Body</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xMethod</span><span class="params">()</span></span>&#123;</div><div class="line">  	<span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</div><div class="line">      	<span class="comment">//Method Body</span></div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同步语句允许设置同步方法中的部分代码，而不必是整个方法。这大大增强了程序的并发能力。</p>
</li>
</ol>
<h3 id="利用加锁同步"><a href="#利用加锁同步" class="headerlink" title="利用加锁同步"></a>利用加锁同步</h3><p>除了同步方法隐式加锁之外，还可以显示地加锁。</p>
<ol>
<li>java.util.concurrent.locks.Lock<ul>
<li>lock() 加锁</li>
<li>unlock() 释放锁</li>
<li><strong>newCondition() 返回绑定到Lock实例的新的Condition实例</strong></li>
</ul>
</li>
<li>java.util.concurrent.locks.ReentrantLock<ul>
<li>ReentrantLock() 等价于ReentrantLock(false)，假公平策略，将锁给任意一个正在等待的线程。</li>
<li>ReentrantLock(fair:boolean) 设定fair:true后为真的公平策略，将锁会分给等待时间最长的线程。</li>
</ul>
</li>
</ol>
<p><strong>使用：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Lock lock=<span class="keyword">new</span> ReentrantLock(); 		<span class="comment">//Create a lock</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span><span class="params">(...)</span></span>&#123;</div><div class="line">  lock.lock();		<span class="comment">//Acquire the lock</span></div><div class="line">  ....</div><div class="line">  <span class="keyword">try</span>()&#123;</div><div class="line">    ...</div><div class="line">  &#125;<span class="keyword">catch</span>()&#123;</div><div class="line">    ...</div><div class="line">  &#125;<span class="keyword">finally</span>&#123;</div><div class="line">    lock.unlock();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="线程间的协作"><a href="#线程间的协作" class="headerlink" title="线程间的协作"></a>线程间的协作</h3><p>使用条件(Condition)可以实现线程间的通信。条件是通过Lock对象的newCondition()方法创建的对象。创建条件之后，可以使用await(),signal(),signalAll()方法来实现线程间的相互通信。</p>
<p>一旦线程调用条件上的await()，线程就进入等待状态，等待恢复的信号。如果忘记对状态调用signal()或者signalAll()那么线程会永远等待下去。</p>
<p>条件由Lock对象创建，为了调用任意的方法，必须先拥有锁<code>lock.lock()</code>，如果没有获取锁就调用这些方法，会抛出异常。</p>
<p><strong>Condition包含的方法</strong>：</p>
<ul>
<li>await() 当前线程等待直到发生某个条件</li>
<li>signal() 唤醒一个等待线程</li>
<li>signalAll(): Condition 唤醒所有等待线程</li>
</ul>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.*;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCooperation</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Account account = <span class="keyword">new</span> Account();</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="comment">// Create a thread pool with two threads</span></div><div class="line">    ExecutorService executor = Executors.newFixedThreadPool(<span class="number">2</span>);</div><div class="line">    executor.execute(<span class="keyword">new</span> DepositTask());</div><div class="line">    executor.execute(<span class="keyword">new</span> WithdrawTask());</div><div class="line">    executor.shutdown();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Thread 1\t\tThread 2\t\tBalance"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// A task for adding an amount to the account</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DepositTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123; <span class="comment">// Purposely delay it to let the withdraw method proceed</span></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">          account.deposit((<span class="keyword">int</span>)(Math.random() * <span class="number">10</span>) + <span class="number">1</span>);</div><div class="line">          Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">        ex.printStackTrace();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// A task for subtracting an amount from the account</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WithdrawTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        account.withdraw((<span class="keyword">int</span>)(Math.random() * <span class="number">10</span>) + <span class="number">1</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// An inner class for account</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</div><div class="line">    <span class="comment">// Create a new lock</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">    <span class="comment">// Create a condition</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Condition newDeposit = lock.newCondition();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> balance = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> balance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</div><div class="line">      lock.lock(); <span class="comment">// Acquire the lock</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">while</span> (balance &lt; amount) &#123;</div><div class="line">          System.out.println(<span class="string">"\t\t\tWait for a deposit"</span>);</div><div class="line">          newDeposit.await();</div><div class="line">        &#125;</div><div class="line">        balance -= amount;</div><div class="line">        System.out.println(<span class="string">"\t\t\tWithdraw "</span> + amount +</div><div class="line">          <span class="string">"\t\t"</span> + getBalance());</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">        ex.printStackTrace();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">finally</span> &#123;</div><div class="line">        lock.unlock(); <span class="comment">// Release the lock</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</div><div class="line">      lock.lock(); <span class="comment">// Acquire the lock</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        balance += amount;</div><div class="line">        System.out.println(<span class="string">"Deposit "</span> + amount +</div><div class="line">          <span class="string">"\t\t\t\t\t"</span> + getBalance());</div><div class="line"></div><div class="line">        <span class="comment">// Signal thread waiting on the condition</span></div><div class="line">        newDeposit.signalAll();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">finally</span> &#123;</div><div class="line">        lock.unlock(); <span class="comment">// Release the lock</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="阻塞队列-Blocking-Queue"><a href="#阻塞队列-Blocking-Queue" class="headerlink" title="阻塞队列(Blocking Queue)"></a>阻塞队列(Blocking Queue)</h3><p>该接口继承于Queue接口，分为ArrayBlockingQueue, LinkedBlockingQueue, PriorityBlockingQueue。假如创建不受限的Linked,Priority，put方法永远不会阻塞。而Array通过数组实现阻塞队列，必须制定一个容量或者可选的公平性，在试图向满队列中插入或者空队列删除时会导致阻塞。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerProducerUsingBlockingQueue</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ArrayBlockingQueue&lt;Integer&gt; buffer =</div><div class="line">    <span class="keyword">new</span> ArrayBlockingQueue&lt;Integer&gt;(<span class="number">2</span>);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="comment">// Create a thread pool with two threads</span></div><div class="line">    ExecutorService executor = Executors.newFixedThreadPool(<span class="number">2</span>);</div><div class="line">    executor.execute(<span class="keyword">new</span> ProducerTask());</div><div class="line">    executor.execute(<span class="keyword">new</span> ConsumerTask());</div><div class="line">    executor.shutdown();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// A task for adding an int to the buffer</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">          System.out.println(<span class="string">"Producer writes "</span> + i);</div><div class="line">          buffer.put(i++); <span class="comment">// Add any value to the buffer, say, 1</span></div><div class="line">          <span class="comment">// Put the thread into sleep</span></div><div class="line">          Thread.sleep((<span class="keyword">int</span>)(Math.random() * <span class="number">10000</span>));</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">        ex.printStackTrace();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// A task for reading and deleting an int from the buffer</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">          System.out.println(<span class="string">"\t\t\tConsumer reads "</span> + buffer.take());</div><div class="line">          <span class="comment">// Put the thread into sleep</span></div><div class="line">          Thread.sleep((<span class="keyword">int</span>)(Math.random() * <span class="number">10000</span>));</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">        ex.printStackTrace();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>总是将release()方法放到finally子句中可以确保即使发生异常也能最终释放许可。</p>
<p>只有一个许可的信号量可以模拟一个相互排斥的锁。</p>
<p><strong>java.util.concurrent.Semaphore</strong></p>
<ul>
<li>Semaphore(numberOfPermits:int) 创建一个带指定书目许可的信号量，公平策略为false</li>
<li>Semaphore(numberOfPermits:int, fair: boolean) 同上述的区别为可设置fair</li>
<li>acquire() void 获取信号量的许可，如果无许可可用，线程将被锁住直到有许可可用</li>
<li>release() void 释放一个许可给该信号量</li>
</ul>
<p>例(新的Account内部类)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</div><div class="line">	<span class="comment">// Create a semaphore</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> balance = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> balance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			semaphore.acquire(); <span class="comment">// Acquire a permit</span></div><div class="line">			<span class="keyword">int</span> newBalance = balance + amount;</div><div class="line"></div><div class="line">			<span class="comment">// This delay is deliberately added to magnify the data-corruption</span></div><div class="line">			<span class="comment">// problem and make it easy to see</span></div><div class="line">			Thread.sleep(<span class="number">5</span>);</div><div class="line">			balance = newBalance;</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			semaphore.release(); <span class="comment">// Release a permit</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h3><p>当两个或多个线程需要在几个共享对象上获取锁时，可能会导致死锁。每个线程都在等待另外一个线程释放它所需要的锁。</p>
<p>此时，可以通过<strong>资源排序技术</strong>避免死锁的发生。给每个需要锁的对象都指定一个顺序，确保每个线程都按这个顺序来获取锁。</p>
<h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>任务在线程执行的过程中，可以是如下五个状态之一：<strong>新建、就绪、运行、阻塞或结束</strong>。</p>
<ol>
<li>新建一个线程，进入<strong>新建状态(New)</strong>。</li>
<li>调用线程的start()方法启动线程后，进入<strong>就绪状态(Ready)</strong>。是可运行的，但是可能还没有开始运行，操作系统必须分配CPU时间。</li>
<li>当开始运行时，进去<strong>运行状态(Running)</strong>，当发生以下两件事会进入<strong>就绪状态</strong>：<ul>
<li>给定的CPU时间用完</li>
<li>调用了线程的yield()方法</li>
</ul>
</li>
<li>有一下几个方法来使得线程进入<strong>阻塞状态</strong>(Blocked)：<ul>
<li>join() 等待目标程序的结束进入就绪状态</li>
<li>sleep() 等到睡眠时间到进入就绪装填</li>
<li>wait() 等待时间到进入就绪状态</li>
</ul>
</li>
<li>如果一个线程执行完了它的run()方法， 这个线程就结束了。</li>
<li>isAlive() 判断线程的状态，如果是就绪、阻塞或运行状态，返回true。若是新建没启动或者结束，返回false。</li>
</ol>
<p>​</p>
<p>​</p>
<p>​</p>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Java基础知识(四)]]></title>
      <url>/2017/02/28/2017-02-28--Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E5%9B%9B)/</url>
      <content type="html"><![CDATA[<h3 id="简单的泛型类"><a href="#简单的泛型类" class="headerlink" title="简单的泛型类"></a>简单的泛型类</h3><ol>
<li><p>泛型程序设计意味着编写的代码可以被很多不同类型的对象所重用。</p>
</li>
<li><p>一个泛型类(generic class) 就是具有一个或者多个类型变量的类，且泛型类中可以有多个类型变量，类定义中的类型变量指定方法的返回类型以及域和局部变量的类型。</p>
<p>如：public class Pair\<t,u>{…}</t,u></p>
<p>​    private T first;</p>
</li>
<li><p>在Java库中，使用变量<strong>E</strong>表示结合的元素类型，<strong>K和V</strong>分别表示表的关键字与值得类型，<strong>T(U,S)</strong> 表示任意类型。</p>
</li>
</ol>
<h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><ol>
<li><p>定义泛型方法时，类型变量放在修饰符(如public，static等)的后面，返回类型的前面。</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayAlg</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getMiddle</span><span class="params">(T... a)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a[a.length/<span class="number">2</span>];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>泛型方法可以定义在普通类中，也可以定义在泛型类中，当调用一个泛型方法时，在方法名前的尖括号放入具体的类型也可以省略。</p>
<p>如： String middle= ArrayAlg.\<string>getMiddle();</string></p>
<p>该调用中的<code>&lt;String&gt;</code>即可省略。</p>
</li>
</ol>
<h3 id="类型变量的限定"><a href="#类型变量的限定" class="headerlink" title="类型变量的限定"></a>类型变量的限定</h3><p>\<t extends="" boundingtype=""></t></p>
<ul>
<li>表示T应该是绑定类型(BoundingType)的子类型，T和绑定类型可以是类，也可以是接口。</li>
<li>限定类型用”&amp;”分隔，类型变量用”,”分隔</li>
<li>在Java的继承中，可以根据需要拥有多个接口超类型，但限定至多只有一个类；<strong>如果用一个类作为限定</strong>，他必须是限定列表中的第一个。</li>
</ul>
<h3 id="泛型代码和虚拟机"><a href="#泛型代码和虚拟机" class="headerlink" title="泛型代码和虚拟机"></a>泛型代码和虚拟机</h3><ol>
<li>虚拟机没有泛型类型对象，所有对象都属于普通类。</li>
<li>无论何时定义一个泛型类型，都自动提供了一个相应的原始类型。<strong>原始类型的名字就是删除类型参数后的泛型类型名。</strong> 擦除类型变量，并替换为限定类型（<strong>无限定用Object</strong>）。</li>
<li>类型擦除可能与多态发生冲突，可以利用<strong>桥方法</strong>来保持多态。</li>
<li>所有的类型参数都用他们的限定类型替换。</li>
</ol>
<h3 id="约束与局限性"><a href="#约束与局限性" class="headerlink" title="约束与局限性"></a>约束与局限性</h3><ol>
<li><p>类型参数不能使用基本类型，原因是<strong>类型擦除</strong>后，泛型类含有Object类型的域，而其不能存储基本类型(如double)的值。</p>
</li>
<li><p>所有的类型查询只产生原始类型</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Pair&lt;String&gt; stringPair=...;</div><div class="line">Pair&lt;Employee&gt; employeePair=...;</div><div class="line"><span class="keyword">if</span>(StringPair.getClass()==employeePair.getClass())	</div><div class="line"><span class="comment">//they are equal,与类型变量无关</span></div></pre></td></tr></table></figure>
</li>
<li><p>不能创建参数化类型的数组，但是生命类型为Pair\<string>[]的变量仍为合法的，不过不能用new Pair\<sting>[10]初始化。</sting></string></p>
<p>如果需要手机参数化类型对象，唯一安全有效的方法时使用ArrayList: <code>ArrayList&lt;Pair&lt;String&gt;&gt;</code></p>
</li>
<li><p>不能构造一个泛型数组，如果数组仅仅作为一个类的私有实力域，就可以将这个数组声明为Object[]，并且在获取元素时进行类型转换。P541</p>
</li>
<li><p>不能在静态域或者方法中引用类型变量</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> T singleInstance;		<span class="comment">//ERROR</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">getSingleInstance</span><span class="params">()</span>	<span class="comment">//ERROR</span></span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span>(ssingleInstance==<span class="keyword">null</span>)	construct <span class="keyword">new</span> instance of T</div><div class="line">    <span class="keyword">return</span> singleInstance;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>类型擦除</strong>之后，T失效，只剩下Singleton类。</p>
</li>
</ol>
<h3 id="泛型类型的继承规则"><a href="#泛型类型的继承规则" class="headerlink" title="泛型类型的继承规则"></a>泛型类型的继承规则</h3><ol>
<li>无论S与T有什么联系，通常，Pair\<s>与Pair\<t>没什么联系。</t></s></li>
<li>泛型类可以扩展或实现其他的泛型类。例如：ArrayList\<t>类实现了List\<t>接口。</t></t></li>
</ol>
<h3 id="通配符类型"><a href="#通配符类型" class="headerlink" title="通配符类型"></a>通配符类型</h3><blockquote>
<p><a href="http://www.v5cn.cn/?p=229" target="_blank" rel="external">通配符?与类型变量T的区别及使用</a></p>
<p><a href="http://www.jianshu.com/p/95f349258afb" target="_blank" rel="external">JAVA泛型通配符T，E，K，V区别，T以及Class\<t>，Class&lt;?&gt;的区别</t></a></p>
</blockquote>
<ol>
<li><p>通配符的超类型限定(例)</p>
<p>? super Manager</p>
<p>这个通配符限制为Manager的所有超类型，带有超类型限定的通配符<strong>可以为方法提供参数，但不能使用返回值</strong>。</p>
</li>
<li><p>通配符的子类型限定(例)</p>
<p>? extends Employee    </p>
<p>这个通配符限制为Employee的所有子类型，<strong>可以接受方法的返回值，但不能提供参数。</strong>即可以使用get()方法，但是无法使用set()方法。</p>
</li>
<li><p><strong>带有超类型限定的通配符可以向泛型对象写入，带有子类型限定的通配符可以从泛型对象读取。</strong></p>
</li>
<li><p>无限定通配符</p>
<p>Pair&lt;?&gt;</p>
<p>Pair&lt;?&gt;与Pair的本质不同在于：可以用任意Object对象调用原始的Pair类的setObject方法。</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Java Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Java基础知识(三) ]]></title>
      <url>/2017/02/26/2017-02-26--Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%B8%89)%20/</url>
      <content type="html"><![CDATA[<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ol>
<li>接口用来描述类具有什么功能，而并不给出每个功能的具体实现。</li>
<li>接口中的所有<strong>方法</strong>自动地属于<strong>public</strong>，所以在接口中声明方法的时候，<strong>不必提供</strong>关键字public。而在实现接口的时候，必须将方法声明为public。</li>
<li>接口绝对不能含有实例域，也不能在接口中实现方法。</li>
<li>任何实现Comparable接口的类都需要包含compareTo方法，并且这个方法的参数必须是一个Object对象，返回一个整型数值。</li>
<li>不能构造接口的对象（x = new Comparable(…) //ERROR），但是可以声明接口的变量（Comparable x； //OK）；接口变量必须引用实现了接口的类对象。</li>
<li>接口中虽然<strong>不能包含实例域与或者静态方法</strong>，但却可以包含常量，与接口中的方法都自动地被设置为public一样，接口中的<strong>域将被自动设为public static final</strong>。</li>
<li>尽管每个类只能拥有一个超类，但是却可以实现多个接口，使用逗号将实现的各个接口分隔开。</li>
<li>之所以同时存在接口与抽象类，是因为7所述。同时，Java不支持多继承，接口可以提供多重继承的大多数好处。</li>
</ol>
<h3 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h3><ol>
<li><p>到拷贝一个变量时，原始变量与拷贝变量引用同一个对象。</p>
</li>
<li><p>假如想创建一个对象的copy，且最初状态与original一样，而以后也可以<strong>各自改变状态</strong>的话，就需要使用<strong>clone方法</strong>。</p>
</li>
<li><p>clone方法是Object类的一个protected方法。</p>
</li>
<li><p>若原始对象与浅克隆对象共享的子对象是不可变的，<strong>浅拷贝</strong>不会产生任何问题。（如：子对象属于String类这种不允许改变的类）同时，假如子对象在生命周期内不发生变化也没问题。</p>
</li>
<li><p>即使clone的默认实现(浅拷贝)能够满足需求，也应该实现Cloneable接口，将clone<strong>重定义为public</strong>，并调用super.clone();</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span></div><div class="line">&#123;</div><div class="line"> 	<span class="function"><span class="keyword">public</span> Employee <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> (Employee)<span class="keyword">super</span>.clone();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Java Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Java基础知识(二)]]></title>
      <url>/2017/02/25/2017-02-25--Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<h3 id="类、超类、子类"><a href="#类、超类、子类" class="headerlink" title="类、超类、子类"></a>类、超类、子类</h3><ol>
<li>Java中所有的继承都是公有继承</li>
<li>若希望调用超类（父类）中的方法，而不是当前类中的某个方法，可以使用特定的关键字<strong>super</strong>调用。但super与<strong>this</strong>不同，super不是一个对象的引用，它只是一个指示编译器调用超类方法的特殊关键字。</li>
<li>由于子类不能对父类的私有域初始化，所以可以通过super实现对超类构造器（含有参数的）的调用，使用super调用构造器的语句必须是子类构造器的第一句。若没有调用，则会默认调用无参数的构造器。</li>
<li>一个对象变量可以指示多种实际类型的现象被称为<strong>多态</strong>。 在运行时能够自动地选择调用哪个方法的现象叫<strong>动态绑定</strong>。</li>
<li>对象方法的调用过程中：<ul>
<li>假如调用的方法是private、final、static方法，则编译器准确知道调用哪个方法，这种即<strong>静态绑定</strong>。</li>
<li>虚拟机预先会为每个类创建一个<strong>方法表</strong>，其中列出所有方法的签名和实际调用方法， 则在调用过程中查表即可。</li>
</ul>
</li>
<li>在覆盖一个方法的时候，子类方法不能低于超类方法的可见性。即假如超类中的方法是public，子类中覆盖该方法的时候也要定义为public。</li>
<li>定义为<strong>final</strong>的类或方法无法被继承或者覆盖。一个类被定义为final，只有其中的方法自动成为final，不包括域。</li>
<li>强制类型转换：<ul>
<li>只能在继承层次内进行类型转换</li>
<li>在将超类转换成子类之前，应该使用instanceof进行检查（当x=null时，x istanceof C 返回值是false，而非报错）</li>
</ul>
</li>
<li>包含一个或多个抽象方法的类本身必须被声明为抽象类；抽象方法充当着占位的角色，它们的具体实现在子类中；抽象类不能被实例化。</li>
<li><strong>Java中用于控制可见性的4个访问修饰符</strong>：</li>
</ol>
<ul>
<li>仅对本类可见：private</li>
<li>对所有类可见：public<ul>
<li>对本包和所有子类可见：protected</li>
<li>对本包可见：默认，无需修饰符</li>
</ul>
</li>
</ul>
<h3 id="Object：所有类的超类"><a href="#Object：所有类的超类" class="headerlink" title="Object：所有类的超类"></a>Object：所有类的超类</h3><ol>
<li><p>hashCode方法：</p>
<ul>
<li>字符串的散列码是由内容导出的，所以只要字符串内容一致，他们的hashcode也相同</li>
<li>若类中未定义hashCode方法，则由Object类默认的hashCode方法导出对象的存储地址</li>
</ul>
</li>
<li><p>equals方法：</p>
<p>在Object类中，这个方法将判断两个对象是否具有相同的引用。</p>
</li>
</ol>
<h3 id="泛型数组列表"><a href="#泛型数组列表" class="headerlink" title="泛型数组列表"></a>泛型数组列表</h3><ol>
<li>ArrayList是一个采用<strong>类型参数</strong>的<strong>泛型类</strong>，使用起来有点像数组，具有自动调节数组容量的功能。</li>
<li>ensureCapacity(n) 该方法将分配一个包含n个对象的内部数组，然后调用n次add，而不用重新分配空间。</li>
<li>trimToSize() 一旦能够确认数组列表的大小不再发生变化时，调用该方法会将存储区域的大小调整为当前元素数量所需的存储空间数目。垃圾回收站将回收多余的存储空间。<strong>应该在确认不会再添加任何元素时，调用trimToSize()</strong>。</li>
<li>数组列表自动扩展容量的便利增加了访问元素语法的复杂程度。<strong>set(i,x)方法</strong>只能替换数组中已经存在的元素内容，要添加新的元素需要使用<strong>add方法</strong>。</li>
<li>若要灵活地扩展数组，又要方便地访问数组元素，可采用以下方式：<ul>
<li>先利用ArrayList创建数组list，并添加所有的元素</li>
<li>执行完以上操作，new一个同样大小的数组a，利用<strong>list.toArray(a)</strong>转换为正常数组</li>
</ul>
</li>
<li>remove(n) 可以从数组中删除位于位置n的元素，而位于该位置后的所有元素将向前移动一个位置，并且数组的大小减1。</li>
</ol>
<h3 id="对象包装器与自动装箱"><a href="#对象包装器与自动装箱" class="headerlink" title="对象包装器与自动装箱"></a>对象包装器与自动装箱</h3><ol>
<li>所有的基本类型都有一个与之对应的类，如int对应的Integer等等，这些类被称作<strong>包装器(wrapper)</strong>。</li>
<li><strong>对象包装器类是不可变的</strong>，即一旦构造了包装器，就不允许更改包装在其中的值。</li>
<li>由于每个值分别包装在对象中，所以ArrayList\<integer>的效率远远低于int[ ]数组。</integer></li>
<li><strong>自动装箱</strong>即在应用过程中，对基本类型自动变换为包装器的处理，自动拆箱同理。</li>
<li>== 运算符也可应用于对象包装器对象，只不过检测的是对象是否只想同一个存储区域。</li>
</ol>
<h3 id="参数变量可变的方法"><a href="#参数变量可变的方法" class="headerlink" title="参数变量可变的方法"></a>参数变量可变的方法</h3><p>常用的printf即参数变量可变的方法，同时用户也可以自己定义可变参数的方法。</p>
<p><strong>例</strong>（计算若干个数值的最大值）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span>… values)</span></span>&#123;</div><div class="line">	<span class="keyword">double</span> largest=Double.MIN_VALUE;</div><div class="line">  	<span class="keyword">for</span>(<span class="keyword">double</span> v: values) <span class="keyword">if</span>(v&gt;largest)	largest=v;</div><div class="line">  	<span class="keyword">return</span> largest;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Java Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Java基础知识(一)]]></title>
      <url>/2017/02/24/2017-02-24--Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<h3 id="用户自定义类"><a href="#用户自定义类" class="headerlink" title="用户自定义类"></a>用户自定义类</h3><ol>
<li>不要编写返回引用可变对象的访问器方法        P113</li>
<li>将<strong>函数</strong>设置为<strong>private</strong>:<ul>
<li>希望将一个计算代码划分成若干个独立的辅助方法</li>
<li>需要一个特别的协议以及一个特别的调用次序</li>
</ul>
</li>
<li>将实例域定义为<strong>final</strong>，必须确保在每一个构造器执行之后，这个域的值被设置，并且在后面的操作中，不能够对它继续操作。<strong>final</strong>大多数时候应用于基本类型域和不可变类的域。</li>
</ol>
<h3 id="静态域与静态方法"><a href="#静态域与静态方法" class="headerlink" title="静态域与静态方法"></a>静态域与静态方法</h3><ol>
<li><strong>static</strong>静态域（变量），每个类中只有<strong>一个</strong>这样的域，若干个对象共享这样一个静态域，静态域是<strong>属于类的，不属于任何一个对象</strong>。</li>
<li><strong>static</strong>静态常量使用的较多，比如Math.PI, System.out等等。</li>
<li>静态方法是一种不能向对象实施操作的方法，如 Math.pow， 在运算的过程中，不使用任何Math对象，即没有隐式的函数。可将静态方法视为<strong>没有this参数</strong>的方法。<ul>
<li>一个方法不需要访问对象状态，其所需参数都是通过显式参数提供的</li>
<li>一个方法只需要访问类的静态域(如P117的getNextID方法)</li>
</ul>
</li>
<li>每一个类可以有一个main方法，这是一个常用于对类进行单元测试的技巧</li>
</ol>
<h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><ol>
<li>方法参数分为两种：基本数据类型（数字、布尔值），对象引用。</li>
<li>Java对对象采用的<strong>不是</strong>引用调用，而<strong>是值传递</strong> （引用调用的反例即无法进行swap，swap(a,b)中交换的是对两个对象引用的拷贝）</li>
<li>Java 方法参数的使用情况：<ul>
<li>一个方法不能修改一个基本数据类型的参数（即数值型和布尔型）</li>
<li>一个方法可以改变一个对象参数的状态</li>
<li>一个方法不能让对象参数引用一个新的对象</li>
</ul>
</li>
</ol>
<h3 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h3><ol>
<li><strong>重载</strong>：多个方法有相同的名字、不同的参数，便产生了重载。</li>
<li>如果没有初始化类中的域，将会被初始化为默认值 （0，false或null）。</li>
<li>如果类中提供了至少一个构造器，但是没有提供无参数的构造器，则在构造对象时如果没有提供参数就会被视为不合法。</li>
<li>构造器的明明规则：在每个参数前面加上一个前缀”a”，或者直接使用参数的名字，而利用this指示隐式参数。</li>
<li>如果构造器的第一个语句形如this(…)，这个构造器将调用同一个类的另一个构造器。</li>
<li>静态域可以使用静态的初始化块进行初始化。</li>
<li>由于Java有自动的垃圾回收器，不需要人工回收内存，所以Java不支持析构器。</li>
</ol>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ol>
<li><p>import语句不仅可以导入类，还可以导入静态方法和静态域。（如 import static java.lang.System.*后可以直接使用out）但是这种编写形式不利于代码的清晰度。</p>
</li>
<li><p>包作用域：</p>
<ul>
<li>public 可以被任意的类使用</li>
<li>private  只能被定义它们的类使用</li>
<li>没有只能public/private，可以被同一个包中的所有方法访问</li>
</ul>
<p>​</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Java Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Merge Intervals || Wiggle Sort II]]></title>
      <url>/2017/02/23/2017-02-23--Merge-Intervals-%7C%7C-Wiggle-Sort-II/</url>
      <content type="html"><![CDATA[<h3 id="Merge-Intervals"><a href="#Merge-Intervals" class="headerlink" title="Merge Intervals"></a>Merge Intervals</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a collection of intervals, merge all overlapping intervals.</p>
<p>For example,</p>
<p>Given <code>[1,3],[2,6],[8,10],[15,18]</code>,</p>
<p>return <code>[1,6],[8,10],[15,18]</code>.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>利用Collections.sort 重写Compare函数对Interval内区间进行排序，排序的原则是以start，end进行升序排序，排序后进行区间的合并。</p>
<ul>
<li>end记录可合并区间的最大上界，start记录下界</li>
<li>当前区间不可合并时，将区间[start,end]加入结果</li>
<li>在循环结束后，将最后一个区间加入结果</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() &#123; start = 0; end = 0; &#125;</div><div class="line"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Interval&gt; <span class="title">merge</span><span class="params">(List&lt;Interval&gt; intervals)</span> </span>&#123;</div><div class="line">        List&lt;Interval&gt; res=<span class="keyword">new</span> ArrayList&lt;Interval&gt;();</div><div class="line">        <span class="keyword">if</span>(intervals.size()&lt;=<span class="number">1</span>) <span class="keyword">return</span> intervals;</div><div class="line">        Collections.sort(intervals, <span class="keyword">new</span> Comparator&lt;Interval&gt;()&#123;</div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Interval i1, Interval i2)</span></span>&#123;</div><div class="line">              <span class="keyword">if</span>(i1.start!=i2.start)&#123;</div><div class="line">                  <span class="keyword">return</span> i1.start-i2.start;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">return</span> i1.end-i2.end;</div><div class="line">          &#125;  </div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> start=intervals.get(<span class="number">0</span>).start;</div><div class="line">        <span class="keyword">int</span> end=intervals.get(<span class="number">0</span>).end;</div><div class="line">        <span class="keyword">for</span>(Interval tmp:intervals)&#123;</div><div class="line">            <span class="keyword">if</span>(tmp.start&lt;=end)&#123;</div><div class="line">                end=Math.max(end,tmp.end);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                res.add(<span class="keyword">new</span> Interval(start,end));</div><div class="line">                start=tmp.start;</div><div class="line">                end=tmp.end;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        res.add(<span class="keyword">new</span> Interval(start,end));</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Wiggle-Sort-II"><a href="#Wiggle-Sort-II" class="headerlink" title="Wiggle Sort II"></a>Wiggle Sort II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given an unsorted array <code>nums</code>, reorder it such that <code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]</code>….</p>
<p><strong>Example:</strong></p>
<p>(1) Given nums = <code>[1, 5, 1, 1, 6, 4]</code>, one possible answer is <code>[1, 4, 1, 5, 1, 6]</code>. </p>
<p>(2) Given nums = <code>[1, 3, 2, 2, 3, 1]</code>, one possible answer is <code>[2, 3, 1, 3, 1, 2]</code>.</p>
<p><strong>Note:</strong></p>
<p>You may assume all input has valid answer.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p><strong>O(n)/O(nlogn)+O(n)</strong> 解法</p>
<p>将原本的无序数组排序，从中位数mid分为前后两半部分，依次交替从前半部分和后半部分倒序选元素加入结果数组，前半部分的元素位于脚标为偶数的位置，后半部分的元素位于脚标为奇数的位置</p>
<p><strong>O(n)+O(1)</strong>解法</p>
<blockquote>
<p><a href="https://discuss.leetcode.com/topic/33557/java-18-ms-true-o-1-space-cheated-o-n-time-using-binary-search" target="_blank" rel="external">LeetCode Discussion</a></p>
</blockquote>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wiggleSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>[] tmp=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        <span class="keyword">int</span> mid=(nums.length+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> right=nums.length;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            tmp[i]= (i&amp;<span class="number">1</span>)==<span class="number">0</span>?nums[--mid]:nums[--right];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            nums[i]=tmp[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Sort 合集 ]]></title>
      <url>/2017/02/23/2017-02-23--Sort-%E5%90%88%E9%9B%86%20/</url>
      <content type="html"><![CDATA[<h3 id="Intersection-of-Two-Arrays"><a href="#Intersection-of-Two-Arrays" class="headerlink" title="Intersection of Two Arrays"></a>Intersection of Two Arrays</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given two arrays, write a function to compute their intersection.</p>
<p><strong>Example:</strong><br>Given <em>nums1</em> = <code>[1, 2, 2, 1]</code>, <em>nums2</em> = <code>[2, 2]</code>, return <code>[2]</code>.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>两个HashSet分别用于找Intersection和存储不重复结果</p>
<p><strong>时间复杂度</strong> ：O(n)</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</div><div class="line">        Set&lt;Integer&gt; res=<span class="keyword">new</span> HashSet&lt;Integer&gt;();</div><div class="line">        Set&lt;Integer&gt; set=<span class="keyword">new</span> HashSet&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:nums1)&#123;</div><div class="line">            set.add(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j:nums2)&#123;</div><div class="line">            <span class="keyword">if</span>(set.contains(j))</div><div class="line">                res.add(j);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span>[] result=<span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</div><div class="line">        <span class="keyword">int</span> m=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> tmp:res)&#123;</div><div class="line">            result[m++]=tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Intersection-of-Two-Arrays-II"><a href="#Intersection-of-Two-Arrays-II" class="headerlink" title="Intersection of Two Arrays II"></a>Intersection of Two Arrays II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given two arrays, write a function to compute their intersection.</p>
<p><strong>Example:</strong><br>Given <em>nums1</em> = <code>[1, 2, 2, 1]</code>, <em>nums2</em> = <code>[2, 2]</code>, return <code>[2, 2]</code>.</p>
<p><strong>Note:</strong></p>
<ul>
<li>Each element in the result should appear as many times as it shows in both arrays.</li>
<li>The result can be in any order.</li>
</ul>
<p><strong>Follow up:</strong></p>
<ul>
<li>What if the given array is already sorted? How would you optimize your algorithm?</li>
<li>What if <em>nums1</em>‘s size is small compared to <em>nums2</em>‘s size? Which algorithm is better?</li>
<li>What if elements of <em>nums2</em> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>
</ul>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>将两个数组排序之后利用两个指针跟踪两个数组的元素进行比较，相等时加入结果，否则较小的数字方的指针向下移动。</li>
<li>或者不排序，利用HashMap来记录每个元素的出现次数，每遇到重复便将次数-1</li>
</ul>
<p><strong>Answer To Third Follow Up Question</strong></p>
<ol>
<li>假如只有nums2不能放入内存中，则将nums1放入HashMap中，每次从disk中读取恰巧可以放入内存中大小的数据，记录intersection</li>
<li>假如nums1 与 nums2 均不能放入内存中，则对其分别利用外排(external sort)进行排序,则每次读取比如2G的数据（内存中可以放的下的大小），利用Two Pointers找到intersection，循环执行这个步骤直至没有数据可比较。</li>
</ol>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</div><div class="line">        Arrays.sort(nums1);</div><div class="line">        Arrays.sort(nums2);</div><div class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;nums1.length&amp;&amp;j&lt;nums2.length)&#123;</div><div class="line">            <span class="keyword">if</span>(nums1[i]==nums2[j])&#123;</div><div class="line">                res.add(nums1[i]);</div><div class="line">                i++;</div><div class="line">                j++;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums1[i]&lt;nums2[j])&#123;</div><div class="line">                i++;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> m=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] result=<span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> tmp:res)&#123;</div><div class="line">            result[m++]=tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Shorter Version</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, l1 = nums1.length, l2 = nums2.length;</div><div class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[l1];</div><div class="line">    Arrays.sort(nums1);</div><div class="line">    Arrays.sort(nums2);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; l1 &amp;&amp; j &lt; l2;)</div><div class="line">        <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) i++;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums1[i] == nums2[j++]) result[k++] = nums1[i++];</div><div class="line">    <span class="keyword">return</span> Arrays.copyOf(result, k);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="H-Index"><a href="#H-Index" class="headerlink" title="H-Index"></a>H-Index</h3><blockquote>
<p><a href="https://yuchen9459.github.io/2016/10/12/H-Index-series/" target="_blank" rel="external">H Index I/ II</a></p>
</blockquote>
<p>桶排序思想</p>
<h3 id="Valid-Anagram"><a href="#Valid-Anagram" class="headerlink" title="Valid Anagram"></a>Valid Anagram</h3><h4 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h4><p>Given two strings <em>s</em> and <em>t</em>, write a function to determine if <em>t</em> is an anagram of <em>s</em>.</p>
<p>For example,<br><em>s</em> = “anagram”, <em>t</em> = “nagaram”, return true.<br><em>s</em> = “rat”, <em>t</em> = “car”, return false.</p>
<h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><p>利用int数组记录每个字母出现的次数，第一个串遍历的过程中++，第二个串遍历的过程中- - ，最后判断是否数组中所有的元素均为0.</p>
<h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] letter=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="string">'z'</span>+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">            letter[s.charAt(i)]++;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;t.length();j++)</div><div class="line">            letter[t.charAt(j)]--;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="string">'a'</span>;k&lt;=<span class="string">'z'</span>;k++)&#123;</div><div class="line">            <span class="keyword">if</span>(letter[k]!=<span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Largest-Number"><a href="#Largest-Number" class="headerlink" title="Largest Number"></a>Largest Number</h3><blockquote>
<p><a href="https://yuchen9459.github.io/2016/12/28/Largest-Number/" target="_blank" rel="external">Largest Number</a></p>
</blockquote>
<h3 id="Sort-List"><a href="#Sort-List" class="headerlink" title="Sort List"></a>Sort List</h3><h4 id="Question-3"><a href="#Question-3" class="headerlink" title="Question"></a>Question</h4><p>Sort a linked list in <em>O</em>(<em>n</em> log <em>n</em>) time using constant space complexity.</p>
<h4 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h4><p><strong>时间复杂度</strong> O(n)         <strong>空间复杂度</strong> O(logn) </p>
<p>调用了log(length)次Merge</p>
<h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</div><div class="line">      <span class="keyword">return</span> head;</div><div class="line">        </div><div class="line">    <span class="comment">// step 1. cut the list to two halves</span></div><div class="line">    ListNode prev = <span class="keyword">null</span>, slow = head, fast = head;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</div><div class="line">      prev = slow;</div><div class="line">      slow = slow.next;</div><div class="line">      fast = fast.next.next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    prev.next = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// step 2. sort each half</span></div><div class="line">    ListNode l1 = sortList(head);</div><div class="line">    ListNode l2 = sortList(slow);</div><div class="line">    </div><div class="line">    <span class="comment">// step 3. merge l1 and l2</span></div><div class="line">    <span class="keyword">return</span> merge(l1, l2);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function">ListNode <span class="title">merge</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">    ListNode l = <span class="keyword">new</span> ListNode(<span class="number">0</span>), p = l;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</div><div class="line">        p.next = l1;</div><div class="line">        l1 = l1.next;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        p.next = l2;</div><div class="line">        l2 = l2.next;</div><div class="line">      &#125;</div><div class="line">      p = p.next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (l1 != <span class="keyword">null</span>)</div><div class="line">      p.next = l1;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (l2 != <span class="keyword">null</span>)</div><div class="line">      p.next = l2;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> l.next;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Insertion-Sort-List-Sort-List"><a href="#Insertion-Sort-List-Sort-List" class="headerlink" title="Insertion Sort List || Sort List"></a>Insertion Sort List || Sort List</h3><blockquote>
<p><a href="https://yuchen9459.github.io/2016/12/26/List-Sort-Series/" target="_blank" rel="external">List Sort Series</a></p>
</blockquote>
<h3 id="Sort-Colors"><a href="#Sort-Colors" class="headerlink" title="Sort Colors"></a>Sort Colors</h3><h4 id="Question-4"><a href="#Question-4" class="headerlink" title="Question"></a>Question</h4><p>Given an array with <em>n</em> objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>
<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>
<h4 id="Analysis-4"><a href="#Analysis-4" class="headerlink" title="Analysis"></a>Analysis</h4><p>在五个月内做了三遍的题还是一直在错，基本思想是red，blue两个指针，将元素0，2分别交换到数组首和末尾。</p>
<ul>
<li>交换的循环条件是i小于等于blue的指针</li>
<li>由于停止的条件是i&lt;=blue，所以应该先交换blue，后交换red</li>
</ul>
<h4 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> zero=<span class="number">0</span>,two=nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=two;i++)&#123;</div><div class="line">            <span class="keyword">while</span>(nums[i]==<span class="number">2</span>&amp;&amp;i&lt;two)  swap(nums,i,two--);</div><div class="line">            <span class="keyword">while</span>(nums[i]==<span class="number">0</span>&amp;&amp;i&gt;zero)  swap(nums,i,zero++);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> tmp=nums[a];</div><div class="line">        nums[a]=nums[b];</div><div class="line">        nums[b]=tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Insert-Interval-Merge-Intervals"><a href="#Insert-Interval-Merge-Intervals" class="headerlink" title="Insert Interval||Merge Intervals"></a>Insert Interval||Merge Intervals</h3><blockquote>
<p><a href="https://yuchen9459.github.io/2016/11/30/Insert-Interval-Merge-Intervals/" target="_blank" rel="external">Answer</a></p>
</blockquote>
<p>注意所给区间均为闭区间，所以在控制边界调节时（合并等）在等号成立的时候也需要执行。</p>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Count Complete Tree Nodes ]]></title>
      <url>/2017/02/09/2017-02-09--Count-Complete-Tree-Nodes%20/</url>
      <content type="html"><![CDATA[<h3 id="Count-Complete-Tree-Nodes"><a href="#Count-Complete-Tree-Nodes" class="headerlink" title="Count Complete Tree Nodes"></a>Count Complete Tree Nodes</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a <strong>complete</strong> binary tree, count the number of nodes.</p>
<p><strong>Definition of a complete binary tree from </strong><a href="http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees" target="_blank" rel="external"><strong>Wikipedia</strong></a><strong>:</strong></p>
<p>In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.</p>
<h4 id="Anaylsis"><a href="#Anaylsis" class="headerlink" title="Anaylsis"></a>Anaylsis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/15533/concise-java-solutions-o-log-n-2" target="_blank" rel="external">LeetCode Discussion</a></p>
</blockquote>
<p>普通的依次遍历每个节点返回总个数会TLE</p>
<p>由于题目要求查的是完全二叉树的节点个数，而完全二叉树只有最底层的叶子节点可以为空，存在的叶子节点都在最下层的左侧，利用该性质可以尽快得出总节点个数。</p>
<p>设一完全二叉树节点root的高度为h，判断右子树高度=h-1是否成立</p>
<ul>
<li>成立。root的左子树为一棵高度为h-1的完全二叉树。节点个数count=2^(h-1)+右子树节点个数</li>
<li>不成立。root的右子树为一棵高度为h-2的完全二叉树。节点个数count=2^(h-2)+左子树节点个数</li>
</ul>
<p>为了方便计算，height函数返回的树高度为1~n-1</p>
<p>I have O(log(n)) steps. Finding a height costs O(log(n)). So overall O(log(n)^2).</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">    	<span class="keyword">return</span> helper(root);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">      	<span class="keyword">if</span>(root==<span class="keyword">null</span>)</div><div class="line">          <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      	<span class="keyword">return</span> <span class="number">1</span>+helper(root.left)+helper(root.right);</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> h=height(root);</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(root!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(height(root.right)==h-<span class="number">1</span>)&#123;        <span class="comment">//Left child is a complete tree with h-1 height</span></div><div class="line">                cnt+=<span class="number">1</span>&lt;&lt;h;</div><div class="line">                root=root.right;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                cnt+=<span class="number">1</span>&lt;&lt;h-<span class="number">1</span>;</div><div class="line">                root=root.left;</div><div class="line">            &#125;</div><div class="line">            h--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (root==<span class="keyword">null</span>)?-<span class="number">1</span>:height(root.left)+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Reorder List || Partition List ]]></title>
      <url>/2017/02/08/2017-02-08--Reorder-List-%7C%7C-Partition-List%20/</url>
      <content type="html"><![CDATA[<h3 id="Reorder-List"><a href="#Reorder-List" class="headerlink" title="Reorder List"></a>Reorder List</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a singly linked list <em>L</em>: <em>L</em>0→<em>L</em>1→…→<em>Ln</em>-1→<em>L</em>n,</p>
<p>reorder it to: <em>L</em>0→<em>Ln</em>→<em>L</em>1→<em>Ln</em>-1→<em>L</em>2→<em>Ln</em>-2→…</p>
<p>You must do this in-place without altering the nodes’ values.</p>
<p>For example,</p>
<p>Given {1,2,3,4}, reorder it to {1,4,2,3}.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>将一个链表以中点分为两段 l1,l2，并将 l2 reverse</li>
<li>遍历两个链表，将第二半链表中的点依次插入第一个链表中</li>
<li>注意在遍历插入节点之前先将第一半链表最后节点置空null</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        ListNode slow=head;</div><div class="line">        ListNode fast=head;</div><div class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;     <span class="comment">// Find the mid-point</span></div><div class="line">            slow=slow.next;</div><div class="line">            fast=fast.next.next;</div><div class="line">        &#125;</div><div class="line">        ListNode reverseHead=slow.next;</div><div class="line">        slow.next=<span class="keyword">null</span>;</div><div class="line">        reverseHead=reverse(reverseHead);</div><div class="line">        ListNode cur=head;</div><div class="line">        <span class="keyword">while</span>(reverseHead!=<span class="keyword">null</span>)&#123;</div><div class="line">            ListNode next=cur.next;</div><div class="line">            ListNode rnext=reverseHead.next;</div><div class="line">            cur.next=reverseHead;</div><div class="line">            reverseHead.next=next;</div><div class="line">            reverseHead=rnext;</div><div class="line">            cur=next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;</div><div class="line">        ListNode prev=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode cur=head;</div><div class="line">        prev.next=head;</div><div class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>&amp;&amp;cur.next!=<span class="keyword">null</span>)&#123;</div><div class="line">            ListNode tmp=cur.next;</div><div class="line">            cur.next=tmp.next;</div><div class="line">            tmp.next=prev.next;</div><div class="line">            prev.next=tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> prev.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Partition-List"><a href="#Partition-List" class="headerlink" title="Partition List"></a>Partition List</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a linked list and a value <em>x</em>, partition it such that all nodes less than <em>x</em> come before nodes greater than or equal to <em>x</em>.</p>
<p>You should preserve the original relative order of the nodes in each of the two partitions.</p>
<p>For example,</p>
<p>Given 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2 and <em>x</em> = 3,</p>
<p>return 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p> 两个链表分别代表依次插入符合条件的节点，最后连接在一起，注意将结果链表尾节点置空。</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">partition</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">       ListNode s=<span class="keyword">new</span> ListNode(<span class="number">0</span>),b=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">       ListNode scur=s,bcur=b;</div><div class="line">       <span class="keyword">while</span>(head!=<span class="keyword">null</span>)&#123;</div><div class="line">           <span class="keyword">if</span>(head.val&gt;=x)&#123;</div><div class="line">               bcur.next=head;</div><div class="line">               bcur=bcur.next;</div><div class="line">           &#125;<span class="keyword">else</span>&#123;</div><div class="line">               scur.next=head;</div><div class="line">               scur=scur.next;</div><div class="line">           &#125;</div><div class="line">           head=head.next;</div><div class="line">       &#125;</div><div class="line">       bcur.next=<span class="keyword">null</span>;</div><div class="line">       scur.next=b.next;</div><div class="line">       <span class="keyword">return</span> s.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Copy List with Random Pointer || Clone Graph]]></title>
      <url>/2017/02/05/2017-02-05--Copy-List-with-Random-Pointer-%7C%7C-Clone-Graph/</url>
      <content type="html"><![CDATA[<h3 id="Copy-List-with-Random-Pointer"><a href="#Copy-List-with-Random-Pointer" class="headerlink" title="Copy List with Random Pointer"></a>Copy List with Random Pointer</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>
<p>Return a deep copy of the list.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/7594/a-solution-with-constant-space-complexity-o-1-and-linear-time-complexity-o-n/2" target="_blank" rel="external">LeetCode DIscussion</a></p>
</blockquote>
<ul>
<li>将整个链表复制一遍，复制节点紧跟原节点</li>
<li>复制每个节点的random指针，复制节点的random指针同理指向复制节点</li>
<li>提取复制后的链表<ul>
<li>复制过程需要两个指针，copy与copyiter，copy指向当前需要加入复制链表的节点，copyiter用来连接整个链表（移动的指针）</li>
<li>加入空表头，方便返回结果 copyiter=pseudo_head</li>
</ul>
</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list with a random pointer.</div><div class="line"> * class RandomListNode &#123;</div><div class="line"> *     int label;</div><div class="line"> *     RandomListNode next, random;</div><div class="line"> *     RandomListNode(int x) &#123; this.label = x; &#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> RandomListNode <span class="title">copyRandomList</span><span class="params">(RandomListNode head)</span> </span>&#123;</div><div class="line">        <span class="comment">//Copy the whole list</span></div><div class="line">         RandomListNode iter=head,next;</div><div class="line">         </div><div class="line">         <span class="keyword">while</span>(iter!=<span class="keyword">null</span>)&#123;</div><div class="line">             next=iter.next;</div><div class="line">             RandomListNode copy=<span class="keyword">new</span> RandomListNode(iter.label);</div><div class="line">             iter.next=copy;</div><div class="line">             copy.next=next;</div><div class="line">             iter=next;</div><div class="line">         &#125;</div><div class="line">         </div><div class="line">         <span class="comment">//Copy the random node</span></div><div class="line">         iter=head;</div><div class="line">         </div><div class="line">         <span class="keyword">while</span>(iter!=<span class="keyword">null</span>)&#123;</div><div class="line">             <span class="keyword">if</span>(iter.random!=<span class="keyword">null</span>)&#123;</div><div class="line">                 iter.next.random=iter.random.next;</div><div class="line">             &#125;</div><div class="line">             iter=iter.next.next;</div><div class="line">         &#125;</div><div class="line">         </div><div class="line">         <span class="comment">//Get the result</span></div><div class="line">         RandomListNode res=<span class="keyword">new</span> RandomListNode(<span class="number">0</span>);</div><div class="line">         RandomListNode copy,copyiter=res;</div><div class="line">         iter=head;</div><div class="line">         <span class="keyword">while</span>(iter!=<span class="keyword">null</span>)&#123;</div><div class="line">             next=iter.next.next;</div><div class="line">             </div><div class="line">             copy=iter.next;</div><div class="line">             copyiter.next=copy;</div><div class="line">             copyiter=copy;</div><div class="line">             </div><div class="line">             iter.next=next;</div><div class="line">             iter=next;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> res.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Clone-Graph"><a href="#Clone-Graph" class="headerlink" title="Clone Graph"></a>Clone Graph</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>利用BFS递归对图进行复制，map保存节点val与相应节点的映射关系</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for undirected graph.</div><div class="line"> * class UndirectedGraphNode &#123;</div><div class="line"> *     int label;</div><div class="line"> *     List&lt;UndirectedGraphNode&gt; neighbors;</div><div class="line"> *     UndirectedGraphNode(int x) &#123; label = x; neighbors = new ArrayList&lt;UndirectedGraphNode&gt;(); &#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    HashMap&lt;Integer,UndirectedGraphNode&gt; map=<span class="keyword">new</span> HashMap&lt;Integer,UndirectedGraphNode&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> UndirectedGraphNode <span class="title">cloneGraph</span><span class="params">(UndirectedGraphNode node)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> clonehelper(node);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> UndirectedGraphNode <span class="title">clonehelper</span><span class="params">(UndirectedGraphNode node)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(map.containsKey(node.label))&#123;</div><div class="line">            <span class="keyword">return</span> map.get(node.label);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        UndirectedGraphNode copy=<span class="keyword">new</span> UndirectedGraphNode(node.label);</div><div class="line">        map.put(copy.label,copy);</div><div class="line">        List&lt;UndirectedGraphNode&gt; neighbor=node.neighbors;</div><div class="line">        <span class="keyword">for</span>(UndirectedGraphNode each:neighbor)&#123;</div><div class="line">                copy.neighbors.add(clonehelper(each));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> copy;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Jump Game || Gas Station ]]></title>
      <url>/2017/02/04/2017-02-04--Jump-Game-%7C%7C-Gas-Station%20/</url>
      <content type="html"><![CDATA[<h3 id="Jump-Game"><a href="#Jump-Game" class="headerlink" title="Jump Game"></a>Jump Game</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Determine if you are able to reach the last index.</p>
<p>For example:</p>
<p>A = [2,3,1,1,4], return true.</p>
<p>A = [3,2,1,0,4], return false.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>遍历整个数组，利用reach标记当前可达的最大脚标，假如i&gt;reach则停止遍历，判断此时i是否等于数组长度，假如可达的话，i应该恰好在des处停止</p>
<p>注意： <strong>i&lt;=reach</strong>，而非 i&lt;reach,初始条件下 i=reach=0</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><ol>
<li>Greedy</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> des=nums.length;</div><div class="line">        <span class="keyword">if</span>(des&lt;<span class="number">2</span>)   <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> reach=<span class="number">0</span>;i&lt;des&amp;&amp;i&lt;=reach;i++)&#123;</div><div class="line">            reach=Math.max(reach,i+nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (i==des)?<span class="keyword">true</span>:<span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Gas-Station"><a href="#Gas-Station" class="headerlink" title="Gas Station"></a>Gas Station</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>There are <em>N</em> gas stations along a circular route, where the amount of gas at station <em>i</em> is gas[i].</p>
<p>You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station <em>i</em> to its next station (<em>i</em>+1). You begin the journey with an empty tank at one of the gas stations.</p>
<p>Return the starting gas station’s index if you can travel around the circuit once, otherwise return -1.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>一开始只想着从每个节点开始遍历一圈，确认gas_total&gt;=cost_total，TLE</p>
<blockquote>
<p><a href="https://discuss.leetcode.com/topic/1344/share-some-of-my-ideas/2" target="_blank" rel="external">LeetCode Discuss</a></p>
</blockquote>
<ul>
<li>假如当前车站A(begin)无法到达B，则A-B的所有车站都无法到达B，begin从i+1开始</li>
<li>gas_total&gt;=cost_total,即有路可寻</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><ol>
<li>Greedy Version</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> total=<span class="number">0</span>,temp=<span class="number">0</span>,begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gas.length;i++)&#123;</div><div class="line">            temp=temp+gas[i]-cost[i];</div><div class="line">            <span class="keyword">if</span>(temp&lt;<span class="number">0</span>)&#123;</div><div class="line">                begin=i+<span class="number">1</span>;</div><div class="line">                total+=temp;</div><div class="line">                temp=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (total+temp&lt;<span class="number">0</span>)?-<span class="number">1</span>:begin;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>TLE version</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> total=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res=-<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gas.length;i++)&#123;</div><div class="line">            res=helper(i,gas,cost);</div><div class="line">            <span class="keyword">if</span>(res!=-<span class="number">1</span>) </div><div class="line">                <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> total=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> N=gas.length;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i-begin&lt;N;i++)&#123;</div><div class="line">            <span class="keyword">int</span> index=(i%N);</div><div class="line">            total+=gas[index]-cost[index];</div><div class="line">            <span class="keyword">if</span>(total&lt;<span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> begin;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Find All Duplicates in an Array || Find All Numbers Disappeared in an Array]]></title>
      <url>/2017/02/04/2017-02-04--Find-All-Duplicates-in-an-Array-%7C%7C-Find-All-Numbers-Disappeared-in-an-Array/</url>
      <content type="html"><![CDATA[<h3 id="Find-All-Duplicates-in-an-Array"><a href="#Find-All-Duplicates-in-an-Array" class="headerlink" title="Find All Duplicates in an Array"></a>Find All Duplicates in an Array</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given an array of integers, 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array), some elements appear <strong>twice</strong> and others appear <strong>once</strong>.</p>
<p>Find all the elements that appear <strong>twice</strong> in this array.</p>
<p>Could you do it without extra space and in O(<em>n</em>) runtime?</p>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[4,3,2,7,8,2,3,1]</div><div class="line"></div><div class="line">Output:</div><div class="line">[2,3]</div></pre></td></tr></table></figure>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>从头遍历数组，数字num对应index的数字变为负数，假如遍历到某数num为负，代表该index出现过一次，将index+1添加到res中</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList();</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            <span class="keyword">int</span> index=Math.abs(nums[i])-<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(nums[index]&lt;<span class="number">0</span>)</div><div class="line">                res.add(index+<span class="number">1</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                nums[index]=-nums[index];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Find-All-Numbers-Disappeared-in-an-Array"><a href="#Find-All-Numbers-Disappeared-in-an-Array" class="headerlink" title="Find All Numbers Disappeared in an Array"></a>Find All Numbers Disappeared in an Array</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given an array of integers where 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array), some elements appear twice and others appear once.</p>
<p>Find all the elements of [1, <em>n</em>] inclusive that do not appear in this array.</p>
<p>Could you do it without extra space and in O(<em>n</em>) runtime? You may assume the returned list does not count as extra space.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[4,3,2,7,8,2,3,1]</div><div class="line"></div><div class="line">Output:</div><div class="line">[5,6]</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>同上，将出现过的num对应index的数字变为负的，第二次遍历的时候假如某数num为正，代表该index数字未出现过</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList();</div><div class="line">    </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            <span class="keyword">int</span> index=Math.abs(nums[i])-<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(nums[index]&gt;<span class="number">0</span>)</div><div class="line">                nums[index]=-nums[index];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)</div><div class="line">                res.add(i+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Word Ladder Series]]></title>
      <url>/2017/02/02/2017-02-02--Word-Ladder-Series/</url>
      <content type="html"><![CDATA[<h3 id="Word-Ladder"><a href="#Word-Ladder" class="headerlink" title="Word Ladder"></a>Word Ladder</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary’s word list, find the length of shortest transformation sequence from <em>beginWord</em> to <em>endWord</em>, such that:</p>
<ol>
<li>Only one letter can be changed at a time.</li>
<li>Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.</li>
</ol>
<p>For example,</p>
<p>Given:</p>
<p><em>beginWord</em> = “hit”</p>
<p><em>endWord</em> = “cog”</p>
<p><em>wordList</em> = [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]</p>
<p>As one shortest transformation is “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”,</p>
<p>return its length 5.</p>
<p><strong>Note:</strong></p>
<ul>
<li>Return 0 if there is no such transformation sequence.</li>
<li>All words have the same length.</li>
<li>All words contain only lowercase alphabetic characters.</li>
<li>You may assume no duplicates in the word list.</li>
<li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li>
</ul>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>所有的词可以构成一张图，每个词相当于一个顶点，彼此间相差一个字母的词相连，利用BFS遍历整张图，第一次碰到endWord时的距离即使最短的。</p>
<ul>
<li>由于正常查找toAdd的方式会TLE，所以在每次得到toAdd的时候，将较小的集合作为begin，较大的集合作为end</li>
<li>题中给出的List查找效率较低（我也不知道什么效率低，大概是查找吧），所以也会导致TLE，在一开始的时候就要创建Set</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p><strong>Normal Solution</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!wordList.contains(endWord))  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        Set&lt;String&gt; reached=<span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">        reached.add(beginWord);</div><div class="line">        <span class="keyword">int</span> distance=<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(!reached.contains(endWord))&#123;</div><div class="line">            Set&lt;String&gt; toAdd=<span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">            <span class="keyword">for</span>(String each:reached)&#123;</div><div class="line">                <span class="keyword">char</span>[] str=each.toCharArray();</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;each.length();i++)&#123;</div><div class="line">                    <span class="keyword">char</span> old=str[i];</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">'a'</span>;c&lt;=<span class="string">'z'</span>;c++)&#123;</div><div class="line">                        str[i]=c;</div><div class="line">                        String newword=<span class="keyword">new</span> String(str);</div><div class="line">                        <span class="keyword">if</span>(wordList.contains(newword))&#123;</div><div class="line">                            toAdd.add(newword);</div><div class="line">                            wordList.remove(newword);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    str[i]=old;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            distance++;</div><div class="line">            <span class="keyword">if</span>(toAdd.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            reached=toAdd;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> distance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Two-end Solution</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordAsList)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!wordAsList.contains(endWord))  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        Set&lt;String&gt; wordList=<span class="keyword">new</span> HashSet(wordAsList);</div><div class="line">        Set&lt;String&gt; begin=<span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">        Set&lt;String&gt; end=<span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">        <span class="keyword">int</span> distance=<span class="number">1</span>;</div><div class="line">        </div><div class="line">        begin.add(beginWord);</div><div class="line">        end.add(endWord);</div><div class="line">        wordList.remove(beginWord);</div><div class="line">        wordList.remove(endWord);</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(!begin.isEmpty())&#123;</div><div class="line">            Set&lt;String&gt; toAdd=<span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">            <span class="keyword">for</span>(String each:begin)&#123;</div><div class="line">                <span class="keyword">char</span>[] str=each.toCharArray();</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;each.length();i++)&#123;</div><div class="line">                    <span class="keyword">char</span> old=str[i];</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">'a'</span>;c&lt;=<span class="string">'z'</span>;c++)&#123;</div><div class="line">                        str[i]=c;</div><div class="line">                        String newword=String.valueOf(str);</div><div class="line">                        </div><div class="line">                        <span class="keyword">if</span>(end.contains(newword))   <span class="keyword">return</span> distance+<span class="number">1</span>;</div><div class="line">                        </div><div class="line">                        <span class="keyword">if</span>(wordList.contains(newword))&#123;</div><div class="line">                            wordList.remove(newword);</div><div class="line">                            toAdd.add(newword);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    str[i]=old;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            begin=(toAdd.size()&lt;end.size())?toAdd:end;</div><div class="line">            end=(begin.size()&lt;end.size())?end:toAdd;</div><div class="line">            distance++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Word-Ladder-II"><a href="#Word-Ladder-II" class="headerlink" title="Word Ladder II"></a>Word Ladder II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary’s word list, find all shortest transformation sequence(s) from <em>beginWord</em> to <em>endWord</em>, such that:</p>
<ol>
<li>Only one letter can be changed at a time</li>
<li>Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.</li>
</ol>
<p>For example,</p>
<p>Given:</p>
<p><em>beginWord</em> = “hit”</p>
<p><em>endWord</em> = “cog”</p>
<p><em>wordList</em> = [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]</p>
<p>Return</p>
<p>  [</p>
<pre><code>[&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],

[&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]
</code></pre><p>  ]</p>
<p><strong>Note:</strong></p>
<ul>
<li>Return an empty list if there is no such transformation sequence.</li>
<li>All words have the same length.</li>
<li>All words contain only lowercase alphabetic characters.</li>
<li>You may assume no duplicates in the word list.</li>
<li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li>
</ul>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/27504/my-concise-java-solution-based-on-bfs-and-dfs" target="_blank" rel="external">LeetCode Discussion</a></p>
</blockquote>
<ul>
<li>利用BFS，找到所有词间可能的关系，利用DFS，找到相应的路径并添加到res中</li>
<li>BFS遍历过程同Word Ladder I，只不过不需要再找到endWord时候退出循环</li>
<li>nodeneighbors 保存每个节点的邻居节点</li>
<li>distance 保存当前节点与beginWord相差的字母个数，只有在BFS过程中第一次遇到某词才进行添加，后续不需要更新，因为第一次碰到是距离beginWord距离最短的</li>
<li>DFS遍历过程中同Backtracking，在每次调用初始像solution加入当前节点，在碰到endWord时，向res加入solution，<strong>加入solution时需要new ArrayList\<string>(Solution)</string></strong></li>
<li>DFS过程中，当下一节点与当前节点距离beginWord距离相差1时递归调用，且在完成一次递归调用的时候，删除在此次调用时加入的节点</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; findLadders(String beginWord, String endWord, List&lt;String&gt; wordAsList) &#123;</div><div class="line">        List&lt;List&lt;String&gt;&gt; res=<span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">if</span>(!wordAsList.contains(endWord))   <span class="keyword">return</span> res;</div><div class="line">        List&lt;String&gt; solution=<span class="keyword">new</span> ArrayList();</div><div class="line">        Map&lt;String, ArrayList&lt;String&gt;&gt; neighbors=<span class="keyword">new</span> HashMap();</div><div class="line">        Map&lt;String,Integer&gt; distance=<span class="keyword">new</span> HashMap();</div><div class="line">        Set&lt;String&gt; wordList=<span class="keyword">new</span> HashSet(wordAsList);</div><div class="line">        wordList.add(beginWord);</div><div class="line">        distance.put(beginWord,<span class="number">0</span>);</div><div class="line">        </div><div class="line">        bfs(beginWord,endWord,wordList,neighbors,distance);</div><div class="line">        dfs(beginWord,endWord,wordList,neighbors,distance,solution,res);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(String beginWord, String endWord, Set&lt;String&gt; wordList, Map&lt;String,ArrayList&lt;String&gt;&gt; nodeneighbors, Map&lt;String,Integer&gt; distance)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(String word:wordList)&#123;</div><div class="line">            nodeneighbors.put(word,<span class="keyword">new</span> ArrayList&lt;String&gt;());</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        List&lt;String&gt; begin=<span class="keyword">new</span> ArrayList();</div><div class="line">        begin.add(beginWord);</div><div class="line">        distance.put(beginWord,<span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(!begin.isEmpty())&#123;</div><div class="line">            List&lt;String&gt; toAdd=<span class="keyword">new</span> ArrayList();</div><div class="line">            <span class="keyword">boolean</span> findend=<span class="keyword">false</span>;</div><div class="line">        </div><div class="line">            <span class="keyword">for</span>(String each:begin)&#123;</div><div class="line">                </div><div class="line">                <span class="keyword">int</span> curdistance=distance.get(each);</div><div class="line">                List&lt;String&gt; neighbors=getneighbors(each,wordList);</div><div class="line">                </div><div class="line">                <span class="keyword">for</span>(String item:neighbors)&#123;</div><div class="line">                    nodeneighbors.get(each).add(item);</div><div class="line">                    <span class="keyword">if</span>(!distance.containsKey(item))&#123;</div><div class="line">                        distance.put(item,curdistance+<span class="number">1</span>);</div><div class="line">                        toAdd.add(item);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            begin=toAdd;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getneighbors</span><span class="params">(String str, Set&lt;String&gt; wordList)</span></span>&#123;</div><div class="line">        List&lt;String&gt; neighbors=<span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">char</span>[] s=str.toCharArray();</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length;i++)&#123;</div><div class="line">            <span class="keyword">char</span> old=s[i];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">'a'</span>;c&lt;=<span class="string">'z'</span>;c++)&#123;</div><div class="line">                <span class="keyword">if</span>(s[i]==c)     <span class="keyword">continue</span>;</div><div class="line">                s[i]=c;</div><div class="line">                String newWord=<span class="keyword">new</span> String(s);</div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(wordList.contains(newWord))&#123;</div><div class="line">                    neighbors.add(newWord);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            s[i]=old;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> neighbors;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String cur, String endWord, Set&lt;String&gt; wordList, Map&lt;String,ArrayList&lt;String&gt;&gt; nodeneighbors, Map&lt;String,Integer&gt; distance, List&lt;String&gt; solution, List&lt;List&lt;String&gt;&gt; res)</span></span>&#123;</div><div class="line">        </div><div class="line">        solution.add(cur);</div><div class="line">        <span class="keyword">if</span>(cur.equals(endWord))&#123;</div><div class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;String&gt;(solution));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(String next:nodeneighbors.get(cur))&#123;</div><div class="line">                <span class="keyword">if</span>(distance.get(next)==distance.get(cur)+<span class="number">1</span>)&#123;</div><div class="line">                    dfs(next,endWord,wordList,nodeneighbors,distance,solution,res);</div><div class="line">                &#125;</div><div class="line">            &#125;   </div><div class="line">        &#125;</div><div class="line">        solution.remove(solution.size()-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Sum of Two Integers ]]></title>
      <url>/2017/02/01/2017-02-01--Sum-of-Two-Integers%20/</url>
      <content type="html"><![CDATA[<h3 id="Sum-of-Two-Integers"><a href="#Sum-of-Two-Integers" class="headerlink" title="Sum of Two Integers"></a>Sum of Two Integers</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Calculate the sum of two integers <em>a</em> and <em>b</em>, but you are <strong>not allowed</strong> to use the operator + and -.</p>
<p><strong>Example:</strong></p>
<p>Given <em>a</em> = 1 and <em>b</em> = 2, return 3.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>a&amp;b 对于同一位，相同且均为1才会产生进位，故a&amp;b可得进位carry</li>
<li>a^b 相当于+操作，同为1产生进位当前位为0，同为0所得为0，不同数字才会得当前位为1的结果</li>
<li>由于进位只能向前进位，故每次对carry进行左移位赋给b，直至b=0</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(a==<span class="number">0</span>)    <span class="keyword">return</span> b;</div><div class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>)    <span class="keyword">return</span> a;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">int</span> carry=a&amp;b;</div><div class="line">            a=a^b;</div><div class="line">            b=carry&lt;&lt;<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="延伸-Subtraction-of-Two-Number"><a href="#延伸-Subtraction-of-Two-Number" class="headerlink" title="延伸 Subtraction of Two Number"></a>延伸 Subtraction of Two Number</h3><h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li><p>借位</p>
<p>0-1 需借位        0 1 = 1</p>
<p>1-1、0-0、1-0均无需借位    0 0 = 0     1 1 = 1    1 0 = 0</p>
<p>故只有当被减数a当前位数字为0，b当前位为1时才需借位，即borrow=(~a)&amp;b</p>
</li>
<li><p>减法</p>
<p>0-0=0,     0-1=1,     1-0=1,     1-1=0</p>
<p>满足异或^, 即 a^=b</p>
</li>
<li><p>第一次a&amp;b所得相当于没考虑借位的减法结果，故只需将b等于borrow左移1位不断减去借位，直至b=0</p>
</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSubtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">int</span> borrow = (~a) &amp; b;</div><div class="line">		a = a ^ b;</div><div class="line">		b = borrow &lt;&lt; <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="延伸-Negative-Number"><a href="#延伸-Negative-Number" class="headerlink" title="延伸 Negative Number"></a>延伸 Negative Number</h3><h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><p><a href="http://lib.csdn.net/base/javase" target="_blank" rel="external"><strong>Java</strong></a> 如何表示负数</p>
<p>　　任何整数类型都存在负数，那么java中是如何表示负数的呢。</p>
<p><strong>例如</strong> 5 在 计算机中的二进制表示为 0101，那么其负数（-5）怎么表示呢？</p>
<p>通过这个步骤就行：</p>
<p>注意，在做如下操作之前，我们应该非常注意5的二进制表示，它的高位一定要为0，也就是说如果5写成101，那么我们必须先将其表示成0101，这样按位取反的时候高位才会变为1。</p>
<p>将5按位取反，标为 1010， 然后加上1，变为1011，即为-5在计算机中的表示。</p>
<p>反过来，看到1011，第一反应看他的高位，如果高位为1，则肯定是个负数，那么他到底是负几呢，如下操作：将1011按位取反，得到0100，然后加上1，则得到其值0101，为5。则说明1011代表的是-5。</p>
<p><strong>将x取反+1，即得其负数</strong></p>
<h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> ~x + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Sort Characters By Frequency || Top K Frequent Elements]]></title>
      <url>/2017/01/29/2017-01-29--Sort-Characters-By-Frequency%20/</url>
      <content type="html"><![CDATA[<h3 id="Sort-Characters-By-Frequency"><a href="#Sort-Characters-By-Frequency" class="headerlink" title="Sort Characters By Frequency"></a>Sort Characters By Frequency</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a string, sort it in decreasing order based on the frequency of characters.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**Input:**</span></div><div class="line">"tree"</div><div class="line"></div><div class="line"><span class="strong">**Output:**</span></div><div class="line">"eert"</div><div class="line"></div><div class="line"><span class="strong">**Explanation:**</span></div><div class="line">'e' appears twice while 'r' and 't' both appear once.</div><div class="line">So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">&quot;cccaaa&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">&quot;cccaaa&quot;</div><div class="line"></div><div class="line">Explanation:</div><div class="line">Both &apos;c&apos; and &apos;a&apos; appear three times, so &quot;aaaccc&quot; is also a valid answer.</div><div class="line">Note that &quot;cacaca&quot; is incorrect, as the same characters must be together.</div></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">&quot;Aabb&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">&quot;bbAa&quot;</div><div class="line"></div><div class="line">Explanation:</div><div class="line">&quot;bbaA&quot; is also a valid answer, but &quot;Aabb&quot; is incorrect.</div><div class="line">Note that &apos;A&apos; and &apos;a&apos; are treated as two different characters.</div></pre></td></tr></table></figure>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ol>
<li>O(n)解法<ul>
<li>利用map记录出现在string中的各字符的次数</li>
<li>List Array的脚标i表示该字符在String中出现的次数，List以string的形式存储char，方便后续脚标从大到小遍历。 注意在新建ArrayList之后还需向其中加入当前字符ch，所以不能用else</li>
<li>根据脚标从大到小遍历，将字符以脚标个数加入字符串中</li>
</ul>
</li>
<li>利用Bucket Sort解决该问题<ul>
<li>ASCII码字符共有256个，故利用数组记录不同字符的出现次数</li>
<li>构造maxcount+1个String桶，将出现了相同次数的字符放入String桶中</li>
<li>同上进行遍历</li>
</ul>
</li>
</ol>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">frequencySort</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s.length()&lt;<span class="number">3</span>)    <span class="keyword">return</span> s;</div><div class="line">        Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(Character ch:s.toCharArray())&#123;</div><div class="line">            map.put(ch,map.getOrDefault(ch,<span class="number">0</span>)+<span class="number">1</span>);</div><div class="line">            max=Math.max(max,map.get(ch));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//Get List</span></div><div class="line">        List&lt;Character&gt;[] str=<span class="keyword">new</span> List[max+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(Character ch:map.keySet())&#123;</div><div class="line">            <span class="keyword">int</span> tmp=map.get(ch);</div><div class="line">            <span class="keyword">if</span>(str[tmp]==<span class="keyword">null</span>)  </div><div class="line">                str[tmp]=<span class="keyword">new</span> ArrayList();</div><div class="line">            str[tmp].add(ch);		<span class="comment">//Should not use else</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//Get result string</span></div><div class="line">        StringBuilder res=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=max;i&gt;<span class="number">0</span>;i--)&#123;</div><div class="line">            List&lt;Character&gt; list=str[i];</div><div class="line">            <span class="keyword">if</span>(list!=<span class="keyword">null</span>)&#123;</div><div class="line">                 <span class="keyword">for</span>(Character ch:list)&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</div><div class="line">                        res.append(ch);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Bucket Sort</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">frequencySort</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] count=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:s.toCharArray())&#123;</div><div class="line">            count[c]++;</div><div class="line">            max=Math.max(max,count[c]);</div><div class="line">        &#125;</div><div class="line">        String[] bucket=<span class="keyword">new</span> String[max+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</div><div class="line">            String tmp=bucket[count[i]];</div><div class="line">            <span class="keyword">if</span>(count[i]&gt;<span class="number">0</span>)&#123;</div><div class="line">                bucket[count[i]]=(tmp==<span class="keyword">null</span>)?<span class="string">""</span>+(<span class="keyword">char</span>)i:(tmp+(<span class="keyword">char</span>)i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        StringBuilder res=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=max;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">            <span class="keyword">if</span>(bucket[i]!=<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c:bucket[i].toCharArray())&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</div><div class="line">                        res.append(c);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Top-K-Frequent-Elements"><a href="#Top-K-Frequent-Elements" class="headerlink" title="Top K Frequent Elements"></a>Top K Frequent Elements</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a non-empty array of integers, return the <strong>k</strong> most frequent elements.</p>
<p>For example,</p>
<p>Given <code>[1,1,1,2,2,3]</code> and k = 2, return <code>[1,2]</code>.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>同上，在找kth元素的时候利用count计数，满足条件跳出循环</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">topKFrequent</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</div><div class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line">        <span class="comment">//Count the freq of num</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:nums)&#123;</div><div class="line">            map.put(i,map.getOrDefault(i,<span class="number">0</span>)+<span class="number">1</span>);</div><div class="line">            max=Math.max(max,map.get(i));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//Get the list which index is the freq</span></div><div class="line">        List&lt;Integer&gt;[] list=<span class="keyword">new</span> List[max+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(Integer i:map.keySet())&#123;</div><div class="line">            <span class="keyword">int</span> freq=map.get(i);</div><div class="line">            <span class="keyword">if</span>(list[freq]==<span class="keyword">null</span>)</div><div class="line">                list[freq]=<span class="keyword">new</span> ArrayList();</div><div class="line">            list[freq].add(i);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//Return the top Kth</span></div><div class="line">        <span class="keyword">int</span> count=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=max;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">            List&lt;Integer&gt; tmp=list[i];</div><div class="line">            <span class="keyword">if</span>(count&gt;k)     <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span>(tmp!=<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">for</span>(Integer num:tmp)&#123;</div><div class="line">                    <span class="keyword">if</span>(count&lt;=k)&#123;</div><div class="line">                        res.add(num);</div><div class="line">                        count++;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> </div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Spiral Matrix Series ]]></title>
      <url>/2017/01/23/2017-01-23--Spiral-Matrix-Series%20/</url>
      <content type="html"><![CDATA[<h3 id="Spiral-Matrix-I"><a href="#Spiral-Matrix-I" class="headerlink" title="Spiral Matrix I"></a>Spiral Matrix I</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a matrix of <em>m</em> x <em>n</em> elements (<em>m</em> rows, <em>n</em> columns), return all elements of the matrix in spiral order.</p>
<p>For example,</p>
<p>Given the following matrix:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"> [ 1, 2, 3 ],</div><div class="line"> [ 4, 5, 6 ],</div><div class="line"> [ 7, 8, 9 ]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>You should return <code>[1,2,3,6,9,8,7,4,5]</code>.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>利用四个变量colbegin,colend,rowbegin,rowend来记录遍历的每天边上次走到的位置，在遍历完某行某列之后，向内（加1减1操作）移动该边。</p>
<ul>
<li>两个end的标记为长度-1，否则会导致数组的越界</li>
<li>在从下往上遍历的时候需要检查之前的操作后边界是否有重合，假如有重合的话跳过</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span>(matrix.length==<span class="number">0</span>)    <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">int</span> rowbegin=<span class="number">0</span>,colbegin=<span class="number">0</span>,rowend=matrix.length-<span class="number">1</span>,colend=matrix[<span class="number">0</span>].length-<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(rowbegin&lt;=rowend&amp;&amp;colbegin&lt;=colend)&#123;</div><div class="line">            <span class="comment">//Traverse from left to right</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=colbegin;i&lt;=colend;i++)&#123;</div><div class="line">                res.add(matrix[rowbegin][i]);</div><div class="line">            &#125;</div><div class="line">            rowbegin++;</div><div class="line">            </div><div class="line">            <span class="comment">//Traverse from top to down (in right side)</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=rowbegin;i&lt;=rowend;i++)&#123;</div><div class="line">                res.add(matrix[i][colend]);</div><div class="line">            &#125;</div><div class="line">            colend--;</div><div class="line">            </div><div class="line">            <span class="comment">//Traverse from right to left (in down side)</span></div><div class="line">            <span class="keyword">if</span>(rowbegin&lt;=rowend)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=colend;i&gt;=colbegin;i--)&#123;</div><div class="line">                    res.add(matrix[rowend][i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            rowend--;</div><div class="line">            </div><div class="line">            <span class="comment">//Traverse from down to top (in left side)</span></div><div class="line">            <span class="keyword">if</span>(colbegin&lt;=colend)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=rowend;i&gt;=rowbegin;i--)&#123;</div><div class="line">                    res.add(matrix[i][colbegin]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            colbegin++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Spiral-Matrix-II"><a href="#Spiral-Matrix-II" class="headerlink" title="Spiral Matrix II"></a>Spiral Matrix II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given an integer <em>n</em>, generate a square matrix filled with elements from 1 to <em>n</em>2 in spiral order.</p>
<p>For example,</p>
<p>Given <em>n</em> = 3,</p>
<p>You should return the following matrix:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"> [ 1, 2, 3 ],</div><div class="line"> [ 8, 9, 4 ],</div><div class="line"> [ 7, 6, 5 ]</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>思路同上，反过来对数组进行填充</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="keyword">int</span>[][] res=<span class="keyword">new</span> <span class="keyword">int</span>[n][n];</div><div class="line">        <span class="keyword">int</span> rowbegin=<span class="number">0</span>,colbegin=<span class="number">0</span>,rowend=n-<span class="number">1</span>,colend=n-<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(rowbegin&lt;=rowend&amp;&amp;colbegin&lt;=colend)&#123;</div><div class="line">            <span class="comment">//To right</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=colbegin;i&lt;=colend;i++)&#123;</div><div class="line">                res[rowbegin][i]=num++;</div><div class="line">            &#125;</div><div class="line">            rowbegin++;</div><div class="line">            </div><div class="line">            <span class="comment">//To down (In right side)</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=rowbegin;i&lt;=rowend;i++)&#123;</div><div class="line">                res[i][colend]=num++;</div><div class="line">            &#125;</div><div class="line">            colend--;</div><div class="line">            </div><div class="line">            <span class="comment">//To left (In bottom side)</span></div><div class="line">            <span class="keyword">if</span>(rowbegin&lt;=rowend)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=colend;i&gt;=colbegin;i--)&#123;</div><div class="line">                    res[rowend][i]=num++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            rowend--;</div><div class="line">            </div><div class="line">            <span class="comment">//To top (In left side)</span></div><div class="line">            <span class="keyword">if</span>(colbegin&lt;=colend)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=rowend;i&gt;=rowbegin;i--)&#123;</div><div class="line">                    res[i][colbegin]=num++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            colbegin++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Interleaving String || Decode Ways ]]></title>
      <url>/2017/01/23/2017-01-23--Interleaving-String-%7C%7C-Decode-Ways%20/</url>
      <content type="html"><![CDATA[<h3 id="Interleaving-String"><a href="#Interleaving-String" class="headerlink" title="Interleaving String"></a>Interleaving String</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given <em>s1</em>, <em>s2</em>, <em>s3</em>, find whether <em>s3</em> is formed by the interleaving of <em>s1</em> and <em>s2</em>.</p>
<p>For example,</p>
<p>Given:</p>
<p><em>s1</em> = <code>&quot;aabcc&quot;</code>,</p>
<p><em>s2</em> = <code>&quot;dbbca&quot;</code>,</p>
<p>When <em>s3</em> =<code>&quot;aadbbcbcac&quot;</code>, return true.</p>
<p>When <em>s3</em> = <code>&quot;aadbbbaccc&quot;</code>, return false.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="http://fisherlei.blogspot.com/2012/12/leetcode-interleaving-string.html" target="_blank" rel="external">中文题解</a></p>
</blockquote>
<p>对于</p>
<p>s1 = a1, a2 ……..a(i-1), ai</p>
<p>s2 = b1, b2, …….b(j-1), bj</p>
<p>s3 = c1, c3, …….c(i+j-1), c(i+j)</p>
<p>定义 match[i][j] 意味着，S1的(0, i)和S2的(0,j)，匹配与S3的(i+j)</p>
<p>如果 ai == c(i+j), 那么 match[i][j] = match[i-1][j]， 等价于如下字符串是否匹配。</p>
<p>s1 = a1, a2 ……..a(i-1)</p>
<p>s2 = b1, b2, …….b(j-1), bj</p>
<p>s3 = c1, c3, …….c(i+j-1)</p>
<p>同理，如果bj = c(i+j), 那么match[i][j] = match[i][j-1];</p>
<p>转移方程如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Match[i][j]</div><div class="line">    =   (s3.lastChar == s1.lastChar) &amp;&amp; Match[i-1][j]</div><div class="line">      ||(s3.lastChar == s2.lastChar) &amp;&amp; Match[i][j-1]</div><div class="line">初始条件：</div><div class="line">    i=0 &amp;&amp; j=0时，Match[0][0] = true;</div><div class="line">    i=0时， s3[j] = s2[j], Match[0][j] |= Match[0][j-1]</div><div class="line">           s3[j] != s2[j], Match[0][j] = false;</div><div class="line"></div><div class="line">    j=0时， s3[i] = s1[i], Match[i][0] |= Match[i-1][0]</div><div class="line">           s3[i] != s1[i], Match[i][0] = false;</div></pre></td></tr></table></figure>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s1.length()+s2.length()!=s3.length())    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">boolean</span>[][] match=<span class="keyword">new</span> <span class="keyword">boolean</span>[s1.length()+<span class="number">1</span>][s2.length()+<span class="number">1</span>];</div><div class="line">        match[<span class="number">0</span>][<span class="number">0</span>]=<span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s1.length();i++)&#123;</div><div class="line">            match[i][<span class="number">0</span>]=match[i-<span class="number">1</span>][<span class="number">0</span>]&amp;&amp;s1.charAt(i-<span class="number">1</span>)==s3.charAt(i-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s2.length();i++)&#123;</div><div class="line">            match[<span class="number">0</span>][i]=match[<span class="number">0</span>][i-<span class="number">1</span>]&amp;&amp;s2.charAt(i-<span class="number">1</span>)==s3.charAt(i-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s1.length();i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=s2.length();j++)&#123;</div><div class="line">                match[i][j]=(match[i-<span class="number">1</span>][j]&amp;&amp;s1.charAt(i-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>))||(match[i][j-<span class="number">1</span>]&amp;&amp;s2.charAt(j-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> match[s1.length()][s2.length()];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Decode-Ways"><a href="#Decode-Ways" class="headerlink" title="Decode Ways"></a>Decode Ways</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>A message containing letters from A-Z is being encoded to numbers using the following mapping:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&apos;A&apos; -&gt; 1</div><div class="line">&apos;B&apos; -&gt; 2</div><div class="line">...</div><div class="line">&apos;Z&apos; -&gt; 26</div></pre></td></tr></table></figure>
<p>Given an encoded message containing digits, determine the total number of ways to decode it.</p>
<p>For example,</p>
<p>Given encoded message “12”, it could be decoded as “AB” (1 2) or “L” (12).</p>
<p>The number of ways decoding “12” is 2.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>一开始考虑用一个数组来记录不同的组合数，后来发现当前i的decode way只与i-1、i-2的decode way个数有关，所以可以用r1,r2两个变量来记录。</p>
<ul>
<li>若字符i为0，由于此时字符i不能独立拆分，所以r1=0</li>
<li>若当前字符可以之前字符组合，则r1=r1+r2,r2=r1（原）</li>
<li>若当前字符不可组成字符组合，当前字符decode way个数不变，r1不变，r2向前移动（r2=r1）</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> r1=<span class="number">1</span>,r2=<span class="number">1</span>;  <span class="comment">//r1 the decoding ways of str(i-1), r2 the decoding ways of str(i-2)</span></div><div class="line">        <span class="keyword">if</span>(s.length()==<span class="number">0</span>||s.charAt(<span class="number">0</span>)==<span class="string">'0'</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length();i++)&#123;</div><div class="line">            <span class="keyword">if</span>(s.charAt(i)==<span class="string">'0'</span>)    r1=<span class="number">0</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>)==<span class="string">'1'</span>||s.charAt(i-<span class="number">1</span>)==<span class="string">'2'</span>&amp;&amp;s.charAt(i)&lt;<span class="string">'7'</span>)&#123;</div><div class="line">                <span class="keyword">int</span> tmp=r1;</div><div class="line">                r1=r1+r2;</div><div class="line">                r2=tmp;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                r2=r1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> r1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Binary Tree Maximum Path Sum || Binary Tree Postorder Traversal]]></title>
      <url>/2017/01/22/2017-01-22--Binary-Tree-Maximum-Path-Sum-%7C%7C-Binary-Tree-Postorder-Traversal/</url>
      <content type="html"><![CDATA[<h3 id="Binary-Tree-Maximum-Path-Sum"><a href="#Binary-Tree-Maximum-Path-Sum" class="headerlink" title="Binary Tree Maximum Path Sum"></a>Binary Tree Maximum Path Sum</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a binary tree, find the maximum path sum.</p>
<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain <strong>at least one node</strong> and does not need to go through the root.</p>
<p>For example:</p>
<p>Given the below binary tree,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  1</div><div class="line"> / \</div><div class="line">2   3</div></pre></td></tr></table></figure>
<p>Return <code>6</code>.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="http://fisherlei.blogspot.com/2013/01/leetcode-binary-tree-maximum-path-sum.html" target="_blank" rel="external">中文题解</a></p>
</blockquote>
<p>如上述题解所说的，最后的路径可能有四种情况：</p>
<ol>
<li>只有node</li>
<li>node+leftsub</li>
<li>node+rightsub</li>
<li>node+leftsub+rightsub</li>
</ol>
<p>故在计算的过程中，假如left/right=0，则可得1-3种情况的值，若均不为0，则为第4种情况，同时与已经记录的maxvalue进行大小比较确定师傅需要更新。</p>
<p>由于路径不能回退的特性，所以返回值是right，left的最大值加上当前的val</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxvalue;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        maxvalue=Integer.MIN_VALUE;</div><div class="line">        maxPath(root);</div><div class="line">        <span class="keyword">return</span> maxvalue;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPath</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> left=Math.max(<span class="number">0</span>,maxPath(root.left));</div><div class="line">        <span class="keyword">int</span> right=Math.max(<span class="number">0</span>,maxPath(root.right));</div><div class="line">        maxvalue=Math.max(maxvalue,left+right+root.val);</div><div class="line">        <span class="keyword">return</span> Math.max(left,right)+root.val;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Binary-Tree-Postorder-Traversal"><a href="#Binary-Tree-Postorder-Traversal" class="headerlink" title="Binary Tree Postorder Traversal"></a>Binary Tree Postorder Traversal</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a binary tree, return the <em>postorder</em> traversal of its nodes’ values.</p>
<p>For example:</p>
<p>Given binary tree <code>{1,#,2,3}</code>,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"> \</div><div class="line">  2</div><div class="line"> /</div><div class="line">3</div></pre></td></tr></table></figure>
<p>return <code>[3,2,1]</code>.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>正常的递归后续遍历</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; result=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        helper(root,result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)  <span class="keyword">return</span>;</div><div class="line">        helper(root.left,result);</div><div class="line">        helper(root.right,result);</div><div class="line">        result.add(root.val);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Sudoku Series]]></title>
      <url>/2017/01/21/2017-01-21--Sudoku-Series/</url>
      <content type="html"><![CDATA[<h3 id="Valid-Sudoku"><a href="#Valid-Sudoku" class="headerlink" title="Valid Sudoku"></a>Valid Sudoku</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Determine if a Sudoku is valid, according to: <a href="http://sudoku.com.au/TheRules.aspx" target="_blank" rel="external">Sudoku Puzzles - The Rules</a>.</p>
<p>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>数独规则：</p>
<p>每行每列及每个九宫格内不可有相同的数字（一共九个九宫格）</p>
<p>故针对每行每列及每个九宫格初始化一个hashset，当前格内数字不是’.’且无法插入到hashset时代表已经存在了重复的数字，返回false，否则直到最后返回true</p>
<p>   int rowindex=3<em>(i/3);<br>   int colindex=3</em>(i%3);</p>
<p>row_base, col_base的计算需要*3</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</div><div class="line">            HashSet&lt;Character&gt; row=<span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">            HashSet&lt;Character&gt; col=<span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">            HashSet&lt;Character&gt; cube=<span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(board[i][j]!=<span class="string">'.'</span>&amp;&amp;!row.add(board[i][j]))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">if</span>(board[j][i]!=<span class="string">'.'</span>&amp;&amp;!col.add(board[j][i]))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">int</span> rowindex=<span class="number">3</span>*(i/<span class="number">3</span>);</div><div class="line">                <span class="keyword">int</span> colindex=<span class="number">3</span>*(i%<span class="number">3</span>);</div><div class="line">                <span class="keyword">if</span>(board[rowindex+j/<span class="number">3</span>][colindex+j%<span class="number">3</span>]!=<span class="string">'.'</span>&amp;&amp;!cube.add(board[rowindex+j/<span class="number">3</span>][colindex+j%<span class="number">3</span>]))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Sudoku-Solver"><a href="#Sudoku-Solver" class="headerlink" title="Sudoku Solver"></a>Sudoku Solver</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>
<p>Empty cells are indicated by the character ‘.’.</p>
<p>You may assume that there will be only one unique solution.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>上题已知如何检查一个sudoku是否valid，该题只需在当前格内为’.’的情况下，枚举1-9的情况后判断是否依旧valid，假如符合要求，进行填充，继续填充其他空格；假如不符要求，则返回false，回退继续尝试。</p>
<p>row_base, col_base的计算需要*3</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solveSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(board==<span class="keyword">null</span>||board.length==<span class="number">0</span>)    </div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        solve(board);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(board[i][j]==<span class="string">'.'</span>)&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">'1'</span>;c&lt;=<span class="string">'9'</span>;c++)&#123;</div><div class="line">                        <span class="keyword">if</span>(isValid(board,i,j,c))&#123;</div><div class="line">                            board[i][j]=c;</div><div class="line">                            </div><div class="line">                            <span class="keyword">if</span>(solve(board))</div><div class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                            <span class="keyword">else</span></div><div class="line">                                board[i][j]=<span class="string">'.'</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">char</span>[][] board,<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">char</span> c)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> rowbase=<span class="number">3</span>*(row/<span class="number">3</span>);</div><div class="line">        <span class="keyword">int</span> colbase=<span class="number">3</span>*(col/<span class="number">3</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(board[i][col]!=<span class="string">'.'</span>&amp;&amp;board[i][col]==c)    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">if</span>(board[row][i]!=<span class="string">'.'</span>&amp;&amp;board[row][i]==c)    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">if</span>(board[rowbase+i/<span class="number">3</span>][colbase+i%<span class="number">3</span>]!=<span class="string">'.'</span>&amp;&amp;board[rowbase+i/<span class="number">3</span>][colbase+i%<span class="number">3</span>]==c)    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Longest Increasing Subsequence ]]></title>
      <url>/2017/01/19/2017-01-19--Longest-Increasing-Subsequence%20/</url>
      <content type="html"><![CDATA[<h3 id="Longest-Increasing-Subsequence"><a href="#Longest-Increasing-Subsequence" class="headerlink" title="Longest Increasing Subsequence"></a>Longest Increasing Subsequence</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>
<p>For example,</p>
<p>Given <code>[10, 9, 2, 5, 3, 7, 101, 18]</code>,</p>
<p>The longest increasing subsequence is <code>[2, 3, 7, 101]</code>, therefore the length is <code>4</code>. Note that there may be more than one LIS combination, it is only necessary for you to return the length.</p>
<p>Your algorithm should run in O(<em>n**2</em>) complexity.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li><p>Java Arrays.binarySearch 在调用前需要对数组进行排序，否则返回的下角标不定。在找到相应元素的时候，返回相应的下标（从0开始）；若未找到相应的元素，返回数值应插入的位置的负值（从1开始）。</p>
<blockquote>
<p><a href="http://www.cnblogs.com/qingergege/p/5658292.html" target="_blank" rel="external">Java Array.binarySearch 用法总结</a></p>
</blockquote>
</li>
</ul>
<ol>
<li><p>基本解法：</p>
<p>​    数组dp记录以当前数字num[i]结尾的最长递增序列的长度，所以针对于dp[i+1]需要遍历0-i的内容，判断当前数字num[i+1]&gt;num[j]是否成立，假如成立且dp[j]+1&gt;dp[i+1]，则更新。</p>
<ul>
<li>在更新的过程中需要利用max记录最大长度</li>
<li>在进行填充之前，需要将数组dp所有元素均赋值为1</li>
</ul>
</li>
<li><p>优化解法：</p>
<blockquote>
<p><a href="http://blog.csdn.net/joylnwang/article/details/6766317" target="_blank" rel="external">参考题解</a></p>
</blockquote>
<p>​    优化解法利用二分搜索来保证当前最长序列中的每个元素都是遍历数字中的最小的那个，只有在当前元素num[i]大于dp中的最大元素的时候，才会延长最长序列的长度。而该条件即len==i（len虽然代表最大的串长度，但是脚标从0开始，所以len也是下一个期望插入数字的位置）。</p>
</li>
</ol>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> len=nums.length;</div><div class="line">        <span class="keyword">int</span>[] dp=<span class="keyword">new</span> <span class="keyword">int</span>[len];</div><div class="line">        Arrays.fill(dp,<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> max=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(nums[j]&lt;nums[i]&amp;&amp;dp[j]+<span class="number">1</span>&gt;dp[i])</div><div class="line">                    dp[i]=dp[j]+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            max=Math.max(dp[i],max);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] dp=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> tmp:nums)&#123;</div><div class="line">            <span class="keyword">int</span> i=Arrays.binarySearch(dp,<span class="number">0</span>,max,tmp);</div><div class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span>) i=-(i+<span class="number">1</span>);</div><div class="line">            dp[i]=tmp;</div><div class="line">            <span class="keyword">if</span>(i==max)  max++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Different Ways to Add Parentheses || Merge k Sorted Lists ]]></title>
      <url>/2017/01/03/2017-01-03--Different-Ways-to-Add-Parentheses-%7C%7C-Merge-k-Sorted-Lists%20/</url>
      <content type="html"><![CDATA[<h3 id="Different-Ways-to-Add-Parentheses"><a href="#Different-Ways-to-Add-Parentheses" class="headerlink" title="Different Ways to Add Parentheses"></a>Different Ways to Add Parentheses</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.</p>
<p><strong>Example 1</strong></p>
<p>Input: <code>&quot;2-1-1&quot;</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">((2-1)-1) = 0</div><div class="line">(2-(1-1)) = 2</div></pre></td></tr></table></figure>
<p>Output: <code>[0, 2]</code></p>
<p><strong>Example 2</strong></p>
<p>Input: <code>&quot;2*3-4*5&quot;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(2*(3-(4*5))) = -34</div><div class="line">((2*3)-(4*5)) = -14</div><div class="line">((2*(3-4))*5) = -10</div><div class="line">(2*((3-4)*5)) = -10</div><div class="line">(((2*3)-4)*5) = 10</div></pre></td></tr></table></figure>
<p>Output: <code>[-34, -14, -10, -10, 10]</code></p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/19901/a-recursive-java-solution-284-ms" target="_blank" rel="external">LeetCode Discuss - A recursive Java solution</a></p>
</blockquote>
<p>从字符串头开始遍历，遇到符号将字符串划分为左右两部分part1和part2，对他们递归调用该函数，得到左右部分的结果集合list，利用双重循环对结果进行组合计算。</p>
<p><strong>注意：</strong></p>
<p>在最终得到res的大小为0的时候，代表该字符串不存在符号，直接返回input字符串的数值即可。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">diffWaysToCompute</span><span class="params">(String input)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;input.length();i++)&#123;</div><div class="line">            <span class="keyword">char</span> c=input.charAt(i);</div><div class="line">            <span class="keyword">if</span>(c==<span class="string">'-'</span>||c==<span class="string">'*'</span>||c==<span class="string">'+'</span>)&#123;</div><div class="line">                String part1=input.substring(<span class="number">0</span>,i);</div><div class="line">                String part2=input.substring(i+<span class="number">1</span>);</div><div class="line">                List&lt;Integer&gt; pret1=diffWaysToCompute(part1);</div><div class="line">                List&lt;Integer&gt; pret2=diffWaysToCompute(part2);</div><div class="line">                <span class="keyword">for</span>(Integer num1:pret1)&#123;</div><div class="line">                    <span class="keyword">for</span>(Integer num2:pret2)&#123;</div><div class="line">                        <span class="keyword">int</span> tmp=<span class="number">0</span>;</div><div class="line">                        <span class="keyword">switch</span>(c)&#123;</div><div class="line">                            <span class="keyword">case</span> <span class="string">'-'</span>:</div><div class="line">                                tmp=num1-num2;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            <span class="keyword">case</span> <span class="string">'+'</span>:</div><div class="line">                                tmp=num1+num2;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            <span class="keyword">case</span> <span class="string">'*'</span>:</div><div class="line">                                tmp=num1*num2;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                        res.add(tmp);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(res.size()==<span class="number">0</span>)&#123;</div><div class="line">                res.add(Integer.valueOf(input));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Merge-k-Sorted-Lists"><a href="#Merge-k-Sorted-Lists" class="headerlink" title="Merge k Sorted Lists"></a>Merge k Sorted Lists</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="http://bangbingsyb.blogspot.com/2014/11/leetcode-merge-k-sorted-lists.html" target="_blank" rel="external">中文C++ 思路</a></p>
<p><a href="https://discuss.leetcode.com/topic/2780/a-java-solution-based-on-priority-queue" target="_blank" rel="external">A  Java Solution based on Priority Queue</a></p>
</blockquote>
<ul>
<li><p>重新定义PriorityQueue的comparator方法，Priority Queue 使用方法如下:</p>
<ul>
<li>插入方法（offer()、poll()、remove() 、add() 方法）时间复杂度为O(log(n))</li>
<li>remove(Object) 和 contains(Object) 时间复杂度为O(n)</li>
<li>检索方法（peek、element 和 size）时间复杂度为常量。</li>
</ul>
<blockquote>
<p><a href="http://zhangxiong0301.iteye.com/blog/2221926" target="_blank" rel="external">Priority Queue使用方法</a></p>
<p><a href="http://www.cnblogs.com/gnivor/p/4841191.html" target="_blank" rel="external">Priority Queue时间复杂度分析及示例</a></p>
</blockquote>
</li>
<li><p>将所有节点添加到队列后，循环出队加入结果链表，当加入节点next不为空的时候，将该next节点再次加入队列中</p>
</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(lists.length==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(lists.length==<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> lists[<span class="number">0</span>];</div><div class="line">        PriorityQueue&lt;ListNode&gt; queue=<span class="keyword">new</span> PriorityQueue&lt;ListNode&gt;(<span class="keyword">new</span> Comparator&lt;ListNode&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ListNode o1, ListNode o2)</span></span>&#123;</div><div class="line">                <span class="keyword">if</span>(o1.val&lt;o2.val)</div><div class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(o1.val==o2.val)</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        ListNode res=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode pointer=res;</div><div class="line">        <span class="keyword">for</span>(ListNode tmp:lists)&#123;</div><div class="line">            <span class="keyword">if</span>(tmp!=<span class="keyword">null</span>)&#123;</div><div class="line">                queue.offer(tmp);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</div><div class="line">            pointer.next=queue.poll();</div><div class="line">            pointer=pointer.next;</div><div class="line">            <span class="keyword">if</span>(pointer.next!=<span class="keyword">null</span>)</div><div class="line">                queue.offer(pointer.next);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Divide and Conquer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Unique Binary Search Trees Series ]]></title>
      <url>/2017/01/03/2017-01-03--Unique-Binary-Search-Trees-Series%20/</url>
      <content type="html"><![CDATA[<h3 id="Unique-Binary-Search-Trees-Series"><a href="#Unique-Binary-Search-Trees-Series" class="headerlink" title="Unique Binary Search Trees Series"></a>Unique Binary Search Trees Series</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given <em>n</em>, how many structurally unique <strong>BST’s</strong> (binary search trees) that store values 1…<em>n</em>?</p>
<p>For example,</p>
<p>Given <em>n</em> = 3, there are a total of 5 unique BST’s.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1         3     3      2      1</div><div class="line"> \       /     /      / \      \</div><div class="line">  3     2     1      1   3      2</div><div class="line"> /     /       \                 \</div><div class="line">2     1         2                 3</div></pre></td></tr></table></figure>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/8398/dp-solution-in-6-lines-with-explanation-f-i-n-g-i-1-g-n-i" target="_blank" rel="external">LeetCode Discuss Detailed explanation</a></p>
</blockquote>
<p>对于数字范围1-n，可能任意选择其中的x作为树的根，以x为根的树的种类数是[1,x-1]和[x+1,n]可形成的左右子树个数的乘积和。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] numTrees=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</div><div class="line">        numTrees[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        numTrees[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</div><div class="line">                numTrees[i]+=numTrees[j-<span class="number">1</span>]*numTrees[i-j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> numTrees[n];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Unique-Binary-Search-Trees-Series-II"><a href="#Unique-Binary-Search-Trees-Series-II" class="headerlink" title="Unique Binary Search Trees Series II"></a>Unique Binary Search Trees Series II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given an integer <em>n</em>, generate all structurally unique <strong>BST’s</strong> (binary search trees) that store values 1…<em>n</em>.</p>
<p>For example,</p>
<p>Given <em>n</em> = 3, your program should return all 5 unique BST’s shown below.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1         3     3      2      1</div><div class="line"> \       /     /      / \      \</div><div class="line">  3     2     1      1   3      2</div><div class="line"> /     /       \                 \</div><div class="line">2     1         2                 3</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/3079/a-simple-recursive-solution" target="_blank" rel="external">LeetCode Discuss Explanation</a></p>
</blockquote>
<p>原理同上，只不过得到的不是树的个数而是左右子树的节点，然后利用循环进行组合</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        List&lt;TreeNode&gt; res=<span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)    <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">return</span> helper(<span class="number">1</span>,n);</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">helper</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">        List&lt;TreeNode&gt; res=<span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">        <span class="keyword">if</span>(start&gt;end)&#123;</div><div class="line">            res.add(<span class="keyword">null</span>);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=end;i++)&#123;</div><div class="line">            List&lt;TreeNode&gt; left=helper(start,i-<span class="number">1</span>);</div><div class="line">            List&lt;TreeNode&gt; right=helper(i+<span class="number">1</span>,end);</div><div class="line">            </div><div class="line">            <span class="keyword">for</span>(TreeNode lchild:left)&#123;</div><div class="line">                <span class="keyword">for</span>(TreeNode rchild:right)&#123;</div><div class="line">                    TreeNode root=<span class="keyword">new</span> TreeNode(i);</div><div class="line">                    root.left=lchild;</div><div class="line">                    root.right=rchild;</div><div class="line">                    res.add(root);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Integer Break || Wiggle Subsequence]]></title>
      <url>/2017/01/01/2017-01-01--Integer-Break-%7C%7C-Wiggle-Subsequence/</url>
      <content type="html"><![CDATA[<h3 id="Integer-Break"><a href="#Integer-Break" class="headerlink" title="Integer Break"></a>Integer Break</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a positive integer <em>n</em>, break it into the sum of <strong>at least</strong> two positive integers and maximize the product of those integers. Return the maximum product you can get.</p>
<p>For example, given <em>n</em> = 2, return 1 (2 = 1 + 1); given <em>n</em> = 10, return 36 (10 = 3 + 3 + 4).</p>
<p><strong>Note</strong>: You may assume that <em>n</em> is not less than 2 and not larger than 58.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="http://blog.csdn.net/liyuanbhu/article/details/51198124" target="_blank" rel="external">Math Solution (Chinese Ver)</a></p>
<p><a href="https://discuss.leetcode.com/topic/42978/java-dp-solution" target="_blank" rel="external">DP Solution</a></p>
</blockquote>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>)    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">3</span>)    <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(n&gt;<span class="number">4</span>)&#123;</div><div class="line">            res*=<span class="number">3</span>;</div><div class="line">            n-=<span class="number">3</span>;</div><div class="line">        &#125;</div><div class="line">        res*=n;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Wiggle-Subsequence"><a href="#Wiggle-Subsequence" class="headerlink" title="Wiggle Subsequence"></a>Wiggle Subsequence</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>A sequence of numbers is called a <strong>wiggle sequence</strong> if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.</p>
<p>For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.</p>
<p>Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.</p>
<p><strong>Examples:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Input: [1,7,4,9,2,5]</div><div class="line">Output: 6</div><div class="line">The entire sequence is a wiggle sequence.</div><div class="line"></div><div class="line">Input: [1,17,5,10,13,15,10,5,16,8]</div><div class="line">Output: 7</div><div class="line">There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].</div><div class="line"></div><div class="line">Input: [1,2,3,4,5,6,7,8,9]</div><div class="line">Output: 2</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/51946/very-simple-java-solution-with-detail-explanation" target="_blank" rel="external">LeetCode Discuss</a></p>
</blockquote>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wiggleMaxLength</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>)   <span class="keyword">return</span> nums.length;</div><div class="line">        <span class="keyword">int</span> start=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(start&lt;nums.length&amp;&amp;nums[start]==nums[start-<span class="number">1</span>])   start++;</div><div class="line">        <span class="keyword">if</span>(start==nums.length)    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">boolean</span> increasing=(nums[start]&gt;nums[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">int</span> prev=nums[start];</div><div class="line">        <span class="keyword">int</span> MaxLength=<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start+<span class="number">1</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>((increasing&amp;&amp;nums[i]&lt;prev)||(!increasing&amp;&amp;nums[i]&gt;prev))&#123;</div><div class="line">                increasing=!increasing;</div><div class="line">                MaxLength++;</div><div class="line">            &#125;</div><div class="line">            prev=nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> MaxLength;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Math </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Binary Tree Right Side View || Populating Next Right Pointers in Each Node ]]></title>
      <url>/2016/12/30/2016-12-30--Binary-Tree-Right-Side-View-%7C%7C-Populating-Next-Right-Pointers-in-Each-Node%20/</url>
      <content type="html"><![CDATA[<h3 id="Binary-Tree-Right-Side-View"><a href="#Binary-Tree-Right-Side-View" class="headerlink" title="Binary Tree Right Side View"></a>Binary Tree Right Side View</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a binary tree, imagine yourself standing on the <em>right</em> side of it, return the values of the nodes you can see ordered from top to bottom.</p>
<p>For example:</p>
<p>Given the following binary tree,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   1            &lt;---</div><div class="line"> /   \</div><div class="line">2     3         &lt;---</div><div class="line"> \     \</div><div class="line">  5     4       &lt;---</div></pre></td></tr></table></figure>
<p>You should return <code>[1, 3, 4]</code>.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p><strong>Version 1</strong></p>
<ul>
<li>Each depth of the tree only select one node.</li>
<li>View depth is current size of result list.</li>
</ul>
<p><strong>Version 2</strong></p>
<ul>
<li>层次遍历，在parent==0即要换层次的时候将当前节点的值加入res</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p><strong>Version 1</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        rightView(root, result, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rightView</span><span class="params">(TreeNode curr, List&lt;Integer&gt; result, <span class="keyword">int</span> currDepth)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(curr == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(currDepth == result.size())&#123;</div><div class="line">            result.add(curr.val);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        rightView(curr.right, result, currDepth + <span class="number">1</span>);</div><div class="line">        rightView(curr.left, result, currDepth + <span class="number">1</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Version 2</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)  <span class="keyword">return</span> res;</div><div class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> LinkedList();</div><div class="line">        queue.offer(root);</div><div class="line">        <span class="keyword">int</span> parent=<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> child=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</div><div class="line">            TreeNode node=queue.poll();</div><div class="line">            <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;</div><div class="line">                queue.offer(node.left);</div><div class="line">                child++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</div><div class="line">                queue.offer(node.right);</div><div class="line">                child++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(--parent==<span class="number">0</span>)&#123;</div><div class="line">                parent=child;</div><div class="line">                child=<span class="number">0</span>;</div><div class="line">                res.add(node.val);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Populating-Next-Right-Pointers-in-Each-Node"><a href="#Populating-Next-Right-Pointers-in-Each-Node" class="headerlink" title="Populating Next Right Pointers in Each Node"></a>Populating Next Right Pointers in Each Node</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Follow up for problem “<em>Populating Next Right Pointers in Each Node</em>“.</p>
<p>What if the given tree could be any binary tree? Would your previous solution still work?</p>
<p><strong>Note:</strong></p>
<ul>
<li>You may only use constant extra space.</li>
</ul>
<p>For example,</p>
<p>Given the following binary tree,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">     /  \</div><div class="line">    2    3</div><div class="line">   / \    \</div><div class="line">  4   5    7</div></pre></td></tr></table></figure>
<p>After calling your function, the tree should look like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1 -&gt; NULL</div><div class="line">   /  \</div><div class="line">  2 -&gt; 3 -&gt; NULL</div><div class="line"> / \    \</div><div class="line">4-&gt; 5 -&gt; 7 -&gt; NULL</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p><strong>Version 1</strong> 见注释</p>
<p><strong>Version 2</strong> 层次遍历，每次除了最后一个节点next=null，其余的next=当前队列最上层节点</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><p><strong>Version 1 (LeetCode Version)</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//based on level order traversal</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(TreeLinkNode root)</span> </span>&#123;</div><div class="line"></div><div class="line">        TreeLinkNode head = <span class="keyword">null</span>; <span class="comment">//head of the next level</span></div><div class="line">        TreeLinkNode prev = <span class="keyword">null</span>; <span class="comment">//the leading node on the next level</span></div><div class="line">        TreeLinkNode cur = root;  <span class="comment">//current node of current level</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123; <span class="comment">//iterate on the current level</span></div><div class="line">                <span class="comment">//left child</span></div><div class="line">                <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</div><div class="line">                        prev.next = cur.left;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        head = cur.left;</div><div class="line">                    &#125;</div><div class="line">                    prev = cur.left;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//right child</span></div><div class="line">                <span class="keyword">if</span> (cur.right != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</div><div class="line">                        prev.next = cur.right;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        head = cur.right;</div><div class="line">                    &#125;</div><div class="line">                    prev = cur.right;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//move to next node</span></div><div class="line">                cur = cur.next;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//move to next level</span></div><div class="line">            cur = head;</div><div class="line">            head = <span class="keyword">null</span>;</div><div class="line">            prev = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Version 2</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for binary tree with next pointer.</div><div class="line"> * public class TreeLinkNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeLinkNode left, right, next;</div><div class="line"> *     TreeLinkNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(TreeLinkNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)  <span class="keyword">return</span>;</div><div class="line">        Queue&lt;TreeLinkNode&gt; q=<span class="keyword">new</span> LinkedList&lt;TreeLinkNode&gt;();</div><div class="line">        q.offer(root);</div><div class="line">        <span class="keyword">int</span> parent=<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> child=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</div><div class="line">            TreeLinkNode node=q.poll();</div><div class="line">            <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;</div><div class="line">                q.offer(node.left);</div><div class="line">                child++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</div><div class="line">                q.offer(node.right);</div><div class="line">                child++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(--parent==<span class="number">0</span>)&#123;</div><div class="line">                node.next=<span class="keyword">null</span>;</div><div class="line">                parent=child;</div><div class="line">                child=<span class="number">0</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                node.next=q.peek();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Largest Number ]]></title>
      <url>/2016/12/28/2016-12-28--Largest-Number%20/</url>
      <content type="html"><![CDATA[<h3 id="Largest-Number"><a href="#Largest-Number" class="headerlink" title="Largest Number"></a>Largest Number</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a list of non negative integers, arrange them such that they form the largest number.</p>
<p>For example, given <code>[3, 30, 34, 5, 9]</code>, the largest formed number is <code>9534330</code>.</p>
<p>Note: The result may be very large, so you need to return a string instead of an integer.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li><strong>[10,2]</strong> 对于上述用例，虽然10&gt;2,但是显然102&lt;210，所以应该比较的是两个字符串合并后的大小而非单独的字符串数值比较</li>
<li><strong>[0,0]</strong> 利用Comparator比较后，检查最大的字符是不是以0开头的，假如是直接返回0，否则可能会返回多个0为结果</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)  <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        String[] str=<span class="keyword">new</span> String[nums.length];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;++i)&#123;</div><div class="line">            str[i]=String.valueOf(nums[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        Comparator&lt;String&gt; cmp=<span class="keyword">new</span> Comparator&lt;String&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String a, String b)</span></span>&#123;</div><div class="line">                String str1=a+b;</div><div class="line">                String str2=b+a;</div><div class="line">                <span class="keyword">return</span> str2.compareTo(str1);    <span class="comment">//reverse</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        </div><div class="line">        Arrays.sort(str,cmp);</div><div class="line">        <span class="keyword">if</span>(str[<span class="number">0</span>].charAt(<span class="number">0</span>)==<span class="string">'0'</span>)   <span class="keyword">return</span> <span class="string">"0"</span>;</div><div class="line">        StringBuilder res=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(String tmp:str)&#123;</div><div class="line">            res.append(tmp);   </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Java-Comparator-用法"><a href="#Java-Comparator-用法" class="headerlink" title="Java Comparator 用法"></a>Java Comparator 用法</h3><blockquote>
<p><a href="http://www.blogjava.net/yesjoy/articles/126046.html" target="_blank" rel="external">在TreeSet与TreeMap中如何重载Comparator函数</a></p>
</blockquote>
<ul>
<li><p>Comparator<type> cmp=new Comparator<type>)(){Definition of compare function}</type></type></p>
</li>
<li><p>比较函数的返回值往往是int，两个参数 <code>Object a, Object b</code>,假如希望排序结果为正序，即1在2之前，A在B之前等等，返回值为a.compareTo(b)，若希望排序结果为逆序，则返回值为b.compareTo(a)</p>
</li>
<li><p>Arrays内第二个参数为自定义的comparator</p>
</li>
<li><p>TreeMap与TreeSet则在初始化的时候第一个参数即为comparator，详见链接</p>
<p>​</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Java Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Power of Number ]]></title>
      <url>/2016/12/28/2016-12-28--Power-of-Number%20/</url>
      <content type="html"><![CDATA[<h3 id="Power-of-Two"><a href="#Power-of-Two" class="headerlink" title="Power of Two"></a>Power of Two</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given an integer, write a function to determine if it is a power of two.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>2^n的二进制数中只存在一个1，所以利用num&amp;(num-1)==0 可以判断是否为2^n</li>
<li>Java中可以利用bitcount()</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (n&gt;<span class="number">0</span>)&amp;&amp;Integer.bitcount(n)==<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Power-of-Three"><a href="#Power-of-Three" class="headerlink" title="Power of Three"></a>Power of Three</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given an integer, write a function to determine if it is a power of three.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/33536/a-summary-of-all-solutions-new-method-included-at-15-30pm-jan-8th/2" target="_blank" rel="external">Summary in LeetCode Discuss</a></p>
</blockquote>
<p>利用log计算，</p>
<p>log3 12=2.26186<br>int(log3 12)=2<br>log3 12−int(log3 12)=0.26186</p>
<p><img src="/Users/Rabbit/Desktop/屏幕快照 2016-12-28 上午9.09.17.png" alt="Log"></p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (n&gt;<span class="number">0</span>)&amp;&amp;(Math.log10(n)/Math.log10(<span class="number">3</span>))%<span class="number">1</span>==<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> Integer.toString(n, <span class="number">3</span>).matches(<span class="string">"10*"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">//转换为3进制数利用正则匹配</span></div></pre></td></tr></table></figure>
<h3 id="Power-of-Four"><a href="#Power-of-Four" class="headerlink" title="Power of Four"></a>Power of Four</h3><h4 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h4><p>Given an integer, write a function to determine if it is a power of four.</p>
<h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><p>The basic idea is from power of 2, We can use “n&amp;(n-1) == 0” to determine if n is power of 2. For power of 4, the additional restriction is that in binary form, the only “1” should always located at the odd position. For example, 4^0 = 1, 4^1 = 100, 4^2 = 10000. So we can use “num &amp; 0x55555555==num” to check if “1” is located at the odd position.</p>
<h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (n&gt;<span class="number">0</span>)&amp;&amp;(num&amp;(num-<span class="number">1</span>)==<span class="number">0</span>)&amp;&amp;(num&amp;<span class="number">0x55555555</span>)==num;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Isomorphic Strings || Word Pattern ]]></title>
      <url>/2016/12/27/2016-12-27--Isomorphic-Strings-%7C%7C-Word-Pattern%20/</url>
      <content type="html"><![CDATA[<h3 id="Isomorphic-Strings"><a href="#Isomorphic-Strings" class="headerlink" title="Isomorphic Strings"></a>Isomorphic Strings</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given two strings <strong>s</strong> and <strong>t</strong>, determine if they are isomorphic.</p>
<p>Two strings are isomorphic if the characters in <strong>s</strong> can be replaced to get <strong>t</strong>.</p>
<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p>
<p>For example,</p>
<p>Given <code>&quot;egg&quot;</code>, <code>&quot;add&quot;</code>, return true.</p>
<p>Given <code>&quot;foo&quot;</code>, <code>&quot;bar&quot;</code>, return false.</p>
<p>Given <code>&quot;paper&quot;</code>, <code>&quot;title&quot;</code>, return true.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>利用两个num（大小256代表所有可能字符的个数），用来记录某种字符上次出现的位置</li>
<li>num需赋值小于0以避免下标大于等于0的情况</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIsomorphic</span><span class="params">(String s, String t)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span>[] str1=s.toCharArray();</div><div class="line">        <span class="keyword">char</span>[] str2=t.toCharArray();</div><div class="line">        <span class="keyword">int</span>[] num1=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">int</span>[] num2=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        Arrays.fill(num1,-<span class="number">1</span>);</div><div class="line">        Arrays.fill(num2,-<span class="number">1</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str1.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(num1[str1[i]]!=num2[str2[i]])</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            num1[str1[i]]=i;</div><div class="line">            num2[str2[i]]=i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Word-Pattern"><a href="#Word-Pattern" class="headerlink" title="Word Pattern"></a>Word Pattern</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a <code>pattern</code> and a string <code>str</code>, find if <code>str</code> follows the same pattern.</p>
<p>Here <strong>follow</strong> means a full match, such that there is a bijection between a letter in pattern and a <strong>non-empty</strong> word in str.</p>
<p><strong>Examples:</strong></p>
<ol>
<li>pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code> should return true.</li>
<li>pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat fish&quot;</code> should return false.</li>
<li>pattern = <code>&quot;aaaa&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code> should return false.</li>
<li>pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog dog dog dog&quot;</code> should return false.</li>
</ol>
<p><strong>Notes:</strong></p>
<p>You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><ol>
<li>蠢蠢的方法<ul>
<li>Map保存char到string的映射，Set用以判断是否有多个char映射到同一个String</li>
<li>第一遍遍历保存映射，第二次遍历查看是否有不符合映射标准的，假如有返回false</li>
</ul>
</li>
<li>LeetCode Discuss<ul>
<li>思路跟上题一样，保存每个映射对应的上次出现的位置，可以用一个不限定类型的map取代两个map</li>
<li>map.put的返回值是之前与 key 关联的值，如果没有针对 key 的映射关系，则返回 null</li>
</ul>
</li>
</ol>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><ol>
<li>Version 1</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern</span><span class="params">(String pattern, String str)</span> </span>&#123;</div><div class="line">        String[] word=str.split(<span class="string">" "</span>);</div><div class="line">        HashMap&lt;Character,String&gt; map=<span class="keyword">new</span> HashMap();</div><div class="line">        HashSet&lt;String&gt; set=<span class="keyword">new</span> HashSet();</div><div class="line">        <span class="keyword">if</span>(pattern.length()!=word.length)  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;word.length;i++)&#123;</div><div class="line">            <span class="keyword">char</span> c=pattern.charAt(i);</div><div class="line">            <span class="keyword">if</span>(!map.containsKey(c))&#123;</div><div class="line">                <span class="keyword">if</span>(!set.contains(word[i]))&#123;</div><div class="line">                    map.put(c,word[i]);</div><div class="line">                    set.add(word[i]);</div><div class="line">                &#125;<span class="keyword">else</span> </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;word.length;i++)&#123;</div><div class="line">            <span class="keyword">char</span> c=pattern.charAt(i);</div><div class="line">            <span class="keyword">if</span>(!map.get(c).equals(word[i]))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>Version 2 (Short one)</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern</span><span class="params">(String pattern, String str)</span> </span>&#123;</div><div class="line">    String[] words = str.split(<span class="string">" "</span>);</div><div class="line">    <span class="keyword">if</span> (words.length != pattern.length())</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    Map index = <span class="keyword">new</span> HashMap();</div><div class="line">    <span class="keyword">for</span> (Integer i=<span class="number">0</span>; i&lt;words.length; ++i)</div><div class="line">        <span class="keyword">if</span> (index.put(pattern.charAt(i), i) != index.put(words[i], i))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> HashTable </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Path Sum Series ]]></title>
      <url>/2016/12/27/2016-12-27--Path-Sum-Series%20/</url>
      <content type="html"><![CDATA[<h3 id="Path-Sum"><a href="#Path-Sum" class="headerlink" title="Path Sum"></a>Path Sum</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>
<p>For example:</p>
<p>Given the below binary tree and sum = 22,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">      5</div><div class="line">     / \</div><div class="line">    4   8</div><div class="line">   /   / \</div><div class="line">  11  13  4</div><div class="line"> /  \      \</div><div class="line">7    2      1</div></pre></td></tr></table></figure>
<p>return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>不断地在sum上减去当前节点的值看是否为0，递归向下进行。假如某节点为叶节点且sum-root.val==0，返回true</li>
<li>也可构建helper函数进行DFS遍历，利用global变量不断加上节点值，判断是否相等</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">public class Solution &#123;</div><div class="line">    </div><div class="line">    public boolean hasPathSum(TreeNode root, int sum) &#123;</div><div class="line">        if(root==null)  return false;</div><div class="line">        if(root.left==null&amp;&amp;root.right==null&amp;&amp;sum-root.val==0)  return true;</div><div class="line">        return hasPathSum(root.left,sum-root.val)||hasPathSum(root.right,sum-root.val);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Path-Sum-II"><a href="#Path-Sum-II" class="headerlink" title="Path Sum II"></a>Path Sum II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum.</p>
<p>For example:</p>
<p>Given the below binary tree and <code>sum = 22</code>,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">      5</div><div class="line">     / \</div><div class="line">    4   8</div><div class="line">   /   / \</div><div class="line">  11  13  4</div><div class="line"> /  \    / \</div><div class="line">7    2  5   1</div></pre></td></tr></table></figure>
<p>return </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">   [5,4,11,2],</div><div class="line">   [5,8,4,5]</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>DFS遍历过程中碰到加和sum=target将对应序列加入结果res</li>
<li>结束一次遍历时需注意 item.remove(item.size()-1); 移走最后一个元素</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">public class Solution &#123;</div><div class="line">    private int sum;</div><div class="line">    </div><div class="line">    public List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, int sum) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res=new ArrayList&lt;&gt;();</div><div class="line">        if(root==null)</div><div class="line">            return res;</div><div class="line">        List&lt;Integer&gt; item=new ArrayList&lt;&gt;();</div><div class="line">        this.sum=sum;</div><div class="line">        </div><div class="line">        item.add(root.val);</div><div class="line">        DFS(root,root.val,item,res);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private void DFS(TreeNode node, int num, List&lt;Integer&gt; item, List&lt;List&lt;Integer&gt;&gt; res)&#123;</div><div class="line">        if(node.left==null&amp;&amp;node.right==null)&#123;</div><div class="line">            if(num==sum)</div><div class="line">                res.add(new ArrayList(item));</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if(node.left!=null)&#123;</div><div class="line">            item.add(node.left.val);</div><div class="line">            DFS(node.left,num+node.left.val,item,res);</div><div class="line">            item.remove(item.size()-1);</div><div class="line">        &#125;</div><div class="line">        if(node.right!=null)&#123;</div><div class="line">            item.add(node.right.val);</div><div class="line">            DFS(node.right,num+node.right.val,item,res);</div><div class="line">            item.remove(item.size()-1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Path-Sum-III"><a href="#Path-Sum-III" class="headerlink" title="Path Sum III"></a>Path Sum III</h3><h4 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h4><p>You are given a binary tree in which each node contains an integer value.</p>
<p>Find the number of paths that sum to a given value.</p>
<p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p>
<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p>
<p><strong>Example：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8</div><div class="line"></div><div class="line">      10</div><div class="line">     /  \</div><div class="line">    5   -3</div><div class="line">   / \    \</div><div class="line">  3   2   11</div><div class="line"> / \   \</div><div class="line">3  -2   1</div><div class="line"></div><div class="line">Return 3. The paths that sum to 8 are:</div><div class="line"></div><div class="line">1.  5 -&gt; 3</div><div class="line">2.  5 -&gt; 2 -&gt; 1</div><div class="line">3. -3 -&gt; 11</div></pre></td></tr></table></figure>
<h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>当遍历到某节点时，找到所以以该节点为终点且取值和可为sum的路径</li>
<li>利用presum保存到该节点的所有可能取值和</li>
<li>查找res-target是否存在于presum是为了判断是否有可从中间开始计数且满足条件的路径</li>
<li>一次遍历结束后需 presum.put(res,presum.get(res)-1); 保证当前存储的都会在后续遍历中构成路径，不影响后续的递归</li>
</ul>
<h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> cnt;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        HashMap&lt;Integer,Integer&gt; presum=<span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        presum.put(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> helper(root,<span class="number">0</span>,sum,presum);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode node, <span class="keyword">int</span> sum, <span class="keyword">int</span> target, HashMap&lt;Integer,Integer&gt; presum)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res=sum+node.val;</div><div class="line">        <span class="keyword">int</span> cnt=presum.getOrDefault(res-target,<span class="number">0</span>);</div><div class="line">        </div><div class="line">        presum.put(res,presum.getOrDefault(res,<span class="number">0</span>)+<span class="number">1</span>);</div><div class="line">        cnt+=helper(node.left,res,target,presum)+helper(node.right,res,target,presum);</div><div class="line">        presum.put(res,presum.get(res)-<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ List Sort Series ]]></title>
      <url>/2016/12/26/2016-12-26--List-Sort-Series%20/</url>
      <content type="html"><![CDATA[<h3 id="Insertion-Sort-List"><a href="#Insertion-Sort-List" class="headerlink" title="Insertion Sort List"></a>Insertion Sort List</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Sort a linked list using insertion sort.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/8570/an-easy-and-clear-way-to-sort-o-1-space" target="_blank" rel="external">An easy and clear way to sort ( O(1) space )</a></p>
</blockquote>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">insertionSortList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>)     <span class="keyword">return</span> head;</div><div class="line">        ListNode next=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">        ListNode cur=head;</div><div class="line">        ListNode res=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">        ListNode pre=res;</div><div class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</div><div class="line">            next=cur.next;</div><div class="line">            <span class="keyword">while</span>(pre!=<span class="keyword">null</span>&amp;&amp;pre.next!=<span class="keyword">null</span>&amp;&amp;pre.next.val&lt;cur.val)&#123;</div><div class="line">                pre=pre.next;</div><div class="line">            &#125;</div><div class="line">            cur.next=pre.next;</div><div class="line">            pre.next=cur;</div><div class="line">            cur=next;</div><div class="line">            pre=res;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Sort-List"><a href="#Sort-List" class="headerlink" title="Sort List"></a>Sort List</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Sort a linked list in <em>O</em>(<em>n</em> log <em>n</em>) time using constant space complexity.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/18100/java-merge-sort-solution" target="_blank" rel="external">Java Merge Sort Solution</a></p>
</blockquote>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>)     <span class="keyword">return</span> head;</div><div class="line">        </div><div class="line">        ListNode slow=head;</div><div class="line">        ListNode fast=head;</div><div class="line">        ListNode prev=<span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;</div><div class="line">            prev=slow;</div><div class="line">            slow=slow.next;</div><div class="line">            fast=fast.next.next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        prev.next=<span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        ListNode l1=sortList(head);</div><div class="line">        ListNode l2=sortList(slow);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> Merge(l1,l2);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">Merge</span><span class="params">(ListNode l1, ListNode l2)</span></span>&#123;</div><div class="line">        ListNode p=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">        ListNode res=p;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span>&amp;&amp;l2!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(l1.val&gt;l2.val)&#123;</div><div class="line">                res.next=l2;</div><div class="line">                l2=l2.next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                res.next=l1;</div><div class="line">                l1=l1.next;</div><div class="line">            &#125;</div><div class="line">            res=res.next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(l1!=<span class="keyword">null</span>)</div><div class="line">            res.next=l1;</div><div class="line">        <span class="keyword">if</span>(l2!=<span class="keyword">null</span>)</div><div class="line">            res.next=l2;</div><div class="line">            </div><div class="line">        <span class="keyword">return</span> p.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Reverse Integer || Reverse Bit]]></title>
      <url>/2016/12/23/2016-12-23--Reverse-Integer-%7C%7C-Reverse-Bit/</url>
      <content type="html"><![CDATA[<h3 id="Reverse-Integer"><a href="#Reverse-Integer" class="headerlink" title="Reverse Integer"></a>Reverse Integer</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Reverse digits of an integer.</p>
<p><strong>Example1:</strong> x = 123, return 321</p>
<p><strong>Example2:</strong> x = -123, return -321</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>越界判断：</p>
<p>tmp加上tail后看是否还能变回原来的数字，不可直接利用int型的加和来判断越界（tmp*10+tail&gt;Integer.MAX_VALUE）</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</div><div class="line">      	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)	flag=<span class="keyword">true</span>;</div><div class="line">      	x=Math.abs(x);</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">     	<span class="keyword">int</span> tmp=<span class="number">0</span>;</div><div class="line">      	<span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</div><div class="line">          	<span class="keyword">int</span> tail=x%<span class="number">10</span>;</div><div class="line">          	tmp=tmp*<span class="number">10</span>+tail;</div><div class="line">          	<span class="keyword">if</span>((tmp-tail)/<span class="number">10</span>!=res)</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;  	</div><div class="line">            res=tmp;</div><div class="line">          	x=x/<span class="number">10</span>;</div><div class="line">      	&#125;</div><div class="line">      	<span class="keyword">if</span>(flag)	<span class="keyword">return</span> -res;</div><div class="line">      	<span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Reverse-Bit"><a href="#Reverse-Bit" class="headerlink" title="Reverse Bit"></a>Reverse Bit</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Reverse bits of a given 32 bits unsigned integer.</p>
<p>For example, given input 43261596 (represented in binary as <strong>00000010100101000001111010011100</strong>), return 964176192 (represented in binary as <strong>00111001011110000010100101000000</strong>).</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>每次取出数字n的最后一位给res，res在前31位的时候不断左移</li>
<li>优化后，将32-bit分为四段，利用map来保存倒转的结果</li>
</ul>
<blockquote>
<p><a href="https://discuss.leetcode.com/topic/9764/java-solution-and-optimization" target="_blank" rel="external">LeetCode Discuss Answer</a></p>
<p><a href="https://segmentfault.com/a/1190000003483740" target="_blank" rel="external">中文参考</a></p>
</blockquote>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><p><strong>Basic Version</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">// you need treat n as an unsigned value</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</div><div class="line">            res+=n&amp;<span class="number">1</span>;</div><div class="line">            n&gt;&gt;&gt;=<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(i&lt;<span class="number">31</span>)</div><div class="line">                res&lt;&lt;=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Optimized Version</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">// you need treat n as an unsigned value</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map&lt;Byte,Integer&gt; cache=<span class="keyword">new</span> HashMap&lt;Byte,Integer&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</div><div class="line">            bytes[i]=(<span class="keyword">byte</span>)((n&gt;&gt;&gt;<span class="number">8</span>*i)&amp;<span class="number">0xFF</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</div><div class="line">            <span class="keyword">int</span> tmp=munipulation(bytes[j]);</div><div class="line">            res+=tmp;</div><div class="line">            <span class="keyword">if</span>(j&lt;<span class="number">3</span>)</div><div class="line">                res&lt;&lt;=<span class="number">8</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">munipulation</span><span class="params">(Byte b)</span></span>&#123;</div><div class="line">        Integer value=cache.get(b);</div><div class="line">        <span class="keyword">if</span>(value!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line">        value=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</div><div class="line">            value+=(b&gt;&gt;&gt;i)&amp;<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(i&lt;<span class="number">7</span>)</div><div class="line">                value&lt;&lt;=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        cache.put(b,value);</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ House Robber Series]]></title>
      <url>/2016/12/23/2016-12-23--House-Robber-Series/</url>
      <content type="html"><![CDATA[<h3 id="House-Robber"><a href="#House-Robber" class="headerlink" title="House Robber"></a>House Robber</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>利用两个变量rob,not rob 记录当前房间是否rob情况下的最大收益</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len=nums.length;</div><div class="line">        <span class="keyword">int</span> notrob=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> rob=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">            <span class="keyword">int</span> currob=notrob+nums[i];</div><div class="line">            notrob=Math.max(notrob,rob);</div><div class="line">            rob=currob;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Math.max(notrob,rob);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="House-Robber-II"><a href="#House-Robber-II" class="headerlink" title="House Robber II"></a>House Robber II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p><strong>Note:</strong> This is an extension of <a href="https://leetcode.com/problems/house-robber/" target="_blank" rel="external">House Robber</a>.</p>
<p>After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are <strong>arranged in a circle.</strong> That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>与第一题不同的是：此时所有房子构成一个环</p>
<p>分为两种情况：</p>
<ul>
<li>抢第一个房子，则与其相邻的两个房子均不可抢，考虑[2,len-2]的房子的最大值</li>
<li>不抢第一个房子，考虑[1,len-1]房子情况下的最大值</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len=nums.length;</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>)  <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">return</span> Math.max(helper(nums,<span class="number">2</span>,len-<span class="number">2</span>)+nums[<span class="number">0</span>],helper(nums,<span class="number">1</span>,len-<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> rob=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> notrob=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=end;i++)&#123;</div><div class="line">            <span class="keyword">int</span> currob=notrob+nums[i];</div><div class="line">            notrob=Math.max(notrob,rob);</div><div class="line">            rob=currob;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Math.max(rob,notrob);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="House-Robber-III"><a href="#House-Robber-III" class="headerlink" title="House Robber III"></a>House Robber III</h3><h4 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h4><p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the “root.” Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that “all houses in this place forms a binary tree”. It will automatically contact the police if two directly-linked houses were broken into on the same night.</p>
<p>Determine the maximum amount of money the thief can rob tonight without alerting the police.</p>
<p><strong>Example 1:</strong></p>
<pre><code> 3

/ \
</code></pre><p>   2   3</p>
<pre><code>\   \ 

 3   1
</code></pre><p>Maximum amount of money the thief can rob = 3 + 3 + 1 = <strong>7</strong>.</p>
<p><strong>Example 2:</strong></p>
<pre><code> 3

/ \
</code></pre><p>   4   5</p>
<p>  / \   \ </p>
<p> 1   3   1</p>
<p>Maximum amount of money the thief can rob = 4 + 5 = <strong>9</strong>.</p>
<h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><p>注意：不要天真的一位是层序遍历求和然后判断！</p>
<p>不一定取或不取一层中的所有节点</p>
<h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] res=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        res=helper(root);</div><div class="line">        <span class="keyword">return</span> Math.max(res[<span class="number">0</span>],res[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] helper(TreeNode root)&#123;</div><div class="line">        <span class="keyword">int</span>[] tmp=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> tmp;</div><div class="line">        <span class="keyword">int</span>[] left=helper(root.left);</div><div class="line">        <span class="keyword">int</span>[] right=helper(root.right);</div><div class="line">        			   tmp[<span class="number">0</span>]=Math.max(left[<span class="number">0</span>],left[<span class="number">1</span>])+Math.max(right[<span class="number">0</span>],right[<span class="number">1</span>]);</div><div class="line">        tmp[<span class="number">1</span>]=left[<span class="number">0</span>]+right[<span class="number">0</span>]+root.val;</div><div class="line">        <span class="keyword">return</span> tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Majority Elements Series ]]></title>
      <url>/2016/12/23/2016-12-23--Majority-Elements-Series%20/</url>
      <content type="html"><![CDATA[<h3 id="Majority-Element"><a href="#Majority-Element" class="headerlink" title="Majority Element"></a>Majority Element</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given an array of size <em>n</em>, find the majority element. The majority element is the element that appears <strong>more than</strong> ⌊ n/2 ⌋ times.</p>
<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html" target="_blank" rel="external">Boyer-Moore Majority</a></p>
</blockquote>
<p>直接Array排序后找最多会超时</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] num)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> major=num[<span class="number">0</span>], count = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;num.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</div><div class="line">                count++;</div><div class="line">                major=num[i];</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(major==num[i])&#123;</div><div class="line">                count++;</div><div class="line">            &#125;<span class="keyword">else</span> count--;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> major;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Majority-Element-II"><a href="#Majority-Element-II" class="headerlink" title="Majority Element II"></a>Majority Element II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given an integer array of size <em>n</em>, find all elements that appear more than ⌊ n/3 ⌋ times. The algorithm should run in linear time and in O(1) space.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>最多只可能有两个符合条件的元素，利用两个cnt和num记录</p>
<p>第一次遍历找到可能符合条件的num，再一次遍历确定是否超过n/3</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)  <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">int</span> cnt1=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> cnt2=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> num1=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> num2=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]==num1)</div><div class="line">                cnt1++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]==num2)</div><div class="line">                cnt2++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cnt1==<span class="number">0</span>)&#123;</div><div class="line">                cnt1=<span class="number">1</span>;</div><div class="line">                num1=nums[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cnt2==<span class="number">0</span>)&#123;</div><div class="line">                cnt2=<span class="number">1</span>;</div><div class="line">                num2=nums[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                cnt1--;</div><div class="line">                cnt2--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> count1=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> count2=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]==num1)</div><div class="line">                count1++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]==num2)</div><div class="line">                count2++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(count1&gt;nums.length/<span class="number">3</span>)    res.add(num1);</div><div class="line">        <span class="keyword">if</span>(count2&gt;nums.length/<span class="number">3</span>)    res.add(num2);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Course Schedule Series]]></title>
      <url>/2016/12/20/2016-09-17--Course-Schedule-Series/</url>
      <content type="html"><![CDATA[<h3 id="Course-Schedule"><a href="#Course-Schedule" class="headerlink" title="Course Schedule"></a>Course Schedule</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>There are a total of n courses you have to take, labeled from 0 to n - 1.</p>
<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]</p>
<p>Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?</p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2, [[1,0]]</div></pre></td></tr></table></figure>
<p>There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2, [[1,0],[0,1]]</div></pre></td></tr></table></figure>
<p>There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>先将题给的先修课程转化为图结构，利用队列不断寻找入度为0的节点，最后判断所有入度为0的节点个数是否等于numcourses</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len=numCourses;</div><div class="line">        <span class="keyword">int</span>[][] graph=<span class="keyword">new</span> <span class="keyword">int</span>[len][len];</div><div class="line">        <span class="keyword">int</span>[] degree=<span class="keyword">new</span> <span class="keyword">int</span>[len];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prerequisites.length;i++)&#123;</div><div class="line">            <span class="keyword">int</span> prenode=prerequisites[i][<span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> tonode=prerequisites[i][<span class="number">0</span>];</div><div class="line">            <span class="keyword">if</span>(graph[prenode][tonode]==<span class="number">0</span>)</div><div class="line">                degree[tonode]++;</div><div class="line">            graph[prenode][tonode]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        Queue&lt;Integer&gt; queue=<span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(degree[i]==<span class="number">0</span>)</div><div class="line">                queue.offer(i);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</div><div class="line">            <span class="keyword">int</span> tmp=queue.poll();</div><div class="line">            count++;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">                <span class="keyword">if</span>(graph[tmp][i]!=<span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">if</span>(--degree[i]==<span class="number">0</span>)&#123;</div><div class="line">                        queue.offer(i);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> count==len;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Course-Description-II"><a href="#Course-Description-II" class="headerlink" title="Course Description II"></a>Course Description II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>同上，输出拓扑排序结果</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p><strong>注意：</strong></p>
<ul>
<li>在构建图的时候可能会存在重复的先修关系，所以需要判断该点在图中是否已为1</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findOrder(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites) &#123;</div><div class="line">        <span class="keyword">int</span> len=prerequisites.length;</div><div class="line">        <span class="keyword">int</span> n=numCourses;</div><div class="line">        <span class="keyword">int</span>[] res=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">        <span class="keyword">int</span>[][] graph=<span class="keyword">new</span> <span class="keyword">int</span>[n][n];</div><div class="line">        <span class="keyword">int</span>[] degree=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">            <span class="keyword">int</span> from=prerequisites[i][<span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> to=prerequisites[i][<span class="number">0</span>];</div><div class="line">            <span class="keyword">if</span>(graph[from][to]==<span class="number">0</span>)</div><div class="line">                degree[to]++;</div><div class="line">            graph[from][to]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        Queue&lt;Integer&gt; queue=<span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(degree[i]==<span class="number">0</span>)</div><div class="line">                queue.offer(i);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">    </div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</div><div class="line">            <span class="keyword">int</span> tmp=queue.poll();</div><div class="line">            res[cnt++]=tmp;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(graph[tmp][j]!=<span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">if</span>(--degree[j]==<span class="number">0</span>)&#123;</div><div class="line">                        queue.offer(j);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(cnt==n)</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Topological </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Binary Watch || Letter Combinations of a Phone Number]]></title>
      <url>/2016/12/20/2016-12-20--Binary-Watch-%7C%7C-Letter-Combinations-of-a-Phone-Number/</url>
      <content type="html"><![CDATA[<h3 id="Binary-Watch"><a href="#Binary-Watch" class="headerlink" title="Binary Watch"></a>Binary Watch</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).</p>
<p>Each LED represents a zero or one, with the least significant bit on the right.</p>
<p>For example, the above binary watch reads “3:25”.</p>
<p>Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: n = 1</div><div class="line">Return: [&quot;1:00&quot;, &quot;2:00&quot;, &quot;4:00&quot;, &quot;8:00&quot;, &quot;0:01&quot;, &quot;0:02&quot;, &quot;0:04&quot;, &quot;0:08&quot;, &quot;0:16&quot;, &quot;0:32&quot;]</div></pre></td></tr></table></figure>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>简单的回溯问题，注意以下几点：</p>
<ul>
<li>递归过程中需要标明小时和分钟计算到了哪位数字，即<strong>hindex,mindex</strong>，否则生成重复时间</li>
<li>利用HashSet排除重复的时间</li>
<li>在插入过程中，所有h&gt;=12和m&gt;=60的情况都排除</li>
</ul>
<blockquote>
<p><a href="https://discuss.leetcode.com/topic/59494/3ms-java-solution-using-backtracking-and-idea-of-permutation-and-combination" target="_blank" rel="external">LeetCode Discuss 简明做法</a></p>
<p><a href="https://discuss.leetcode.com/topic/59374/simple-python-java" target="_blank" rel="external">LeetCode Discuss 非回溯做法</a></p>
</blockquote>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">readBinaryWatch</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        HashSet&lt;String&gt; table=<span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        <span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</div><div class="line">            res.add(<span class="string">"0:00"</span>);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        helper(table,res,num,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(HashSet&lt;String&gt; table, List&lt;String&gt; res, <span class="keyword">int</span> n, <span class="keyword">int</span> hour, <span class="keyword">int</span> minute, <span class="keyword">int</span> hindex, <span class="keyword">int</span> mindex)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</div><div class="line">            StringBuilder tmp=<span class="keyword">new</span> StringBuilder();</div><div class="line">            <span class="keyword">if</span>(hour&gt;=<span class="number">12</span>)</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            tmp.append(Integer.toString(hour));</div><div class="line">            tmp.append(<span class="string">":"</span>);</div><div class="line">            <span class="keyword">if</span>(minute&gt;=<span class="number">60</span>)</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            <span class="keyword">if</span>(minute&lt;<span class="number">10</span>)&#123;</div><div class="line">                tmp.append(<span class="string">"0"</span>);</div><div class="line">            &#125;</div><div class="line">            tmp.append(Integer.toString(minute));</div><div class="line">            <span class="keyword">if</span>(!table.contains(tmp.toString()))&#123;</div><div class="line">                table.add(tmp.toString());</div><div class="line">                res.add(tmp.toString());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=hindex;i&lt;<span class="number">4</span>;i++)&#123;</div><div class="line">            helper(table,res,n-<span class="number">1</span>,hour+(<span class="number">1</span>&lt;&lt;i),minute,i+<span class="number">1</span>,mindex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=mindex;j&lt;<span class="number">6</span>;j++)&#123;</div><div class="line">            helper(table,res,n-<span class="number">1</span>,hour,minute+(<span class="number">1</span>&lt;&lt;j),hindex,j+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Letter-Combinations-of-a-Phone-Number"><a href="#Letter-Combinations-of-a-Phone-Number" class="headerlink" title="Letter Combinations of a Phone Number"></a>Letter Combinations of a Phone Number</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a digit string, return all possible letter combinations that the number could represent.</p>
<p>A mapping of digit to letters (just like on the telephone buttons) is given below.</p>
<p><strong>Example：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input:Digit string &quot;23&quot;</div><div class="line">Output: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>同上简单的回溯问题，利用String数组存储不同数字对应的字符串，注意：</p>
<ul>
<li>确认keys下标的时候 <strong>-‘0’</strong></li>
<li>初始判断是否digits长度为0</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] keys=&#123;<span class="string">""</span>,<span class="string">""</span>,<span class="string">"abc"</span>,<span class="string">"def"</span>,<span class="string">"ghi"</span>,<span class="string">"jkl"</span>,<span class="string">"mno"</span>,<span class="string">"pqrs"</span>,<span class="string">"tuv"</span>,<span class="string">"wxyz"</span>&#125;;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</div><div class="line">       List&lt;String&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">       <span class="keyword">if</span>(digits.length()==<span class="number">0</span>)   <span class="keyword">return</span> res;</div><div class="line">       helper(<span class="string">""</span>, <span class="number">0</span>, digits, res);</div><div class="line">       <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(String prefix, <span class="keyword">int</span> index, String digits, List&lt;String&gt; res)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(index&gt;=digits.length())&#123;</div><div class="line">            res.add(prefix);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        String tmp=keys[digits.charAt(index)-<span class="string">'0'</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tmp.length();i++)&#123;</div><div class="line">            helper(prefix+tmp.charAt(i), index+<span class="number">1</span>, digits, res);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Trapping Rain Water II ||  First Missing Positive]]></title>
      <url>/2016/12/19/2016-12-19--Trapping-Rain-Water-II-%7C%7C-First-Missing-Positive/</url>
      <content type="html"><![CDATA[<h3 id="Trapping-Rain-Water-II"><a href="#Trapping-Rain-Water-II" class="headerlink" title="Trapping Rain Water II"></a>Trapping Rain Water II</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.</p>
<p><strong>Note:</strong><br>Both m and n are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Given the following 3x6 height map:</div><div class="line">[</div><div class="line">  [1,4,3,1,3,2],</div><div class="line">  [3,2,1,3,2,4],</div><div class="line">  [2,3,3,2,3,1]</div><div class="line">]</div><div class="line"></div><div class="line">Return 4.</div></pre></td></tr></table></figure>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/60418/java-solution-using-priorityqueue" target="_blank" rel="external">LeetCode Discuss 利用Priority Queue解法</a></p>
</blockquote>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> row;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> col;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> height;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Cell</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> height)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.row=row;</div><div class="line">            <span class="keyword">this</span>.col=col;</div><div class="line">            <span class="keyword">this</span>.height=height;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trapRainWater</span><span class="params">(<span class="keyword">int</span>[][] heightMap)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m=heightMap.length;</div><div class="line">        <span class="keyword">if</span>(m&lt;=<span class="number">2</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n=heightMap[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span>[][] visited=<span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</div><div class="line">        </div><div class="line"></div><div class="line">        PriorityQueue&lt;Cell&gt; queue=<span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="number">1</span>,<span class="keyword">new</span> Comparator&lt;Cell&gt;()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Cell a, Cell b)</span></span>&#123;</div><div class="line">                <span class="keyword">return</span> a.height-b.height;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">            visited[i][<span class="number">0</span>]=<span class="keyword">true</span>;</div><div class="line">            visited[i][n-<span class="number">1</span>]=<span class="keyword">true</span>;</div><div class="line">            queue.offer(<span class="keyword">new</span> Cell(i,<span class="number">0</span>,heightMap[i][<span class="number">0</span>]));</div><div class="line">            queue.offer(<span class="keyword">new</span> Cell(i,n-<span class="number">1</span>,heightMap[i][n-<span class="number">1</span>]));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</div><div class="line">            visited[<span class="number">0</span>][j]=<span class="keyword">true</span>;</div><div class="line">            visited[m-<span class="number">1</span>][j]=<span class="keyword">true</span>;</div><div class="line">            queue.offer(<span class="keyword">new</span> Cell(<span class="number">0</span>,j,heightMap[<span class="number">0</span>][j]));</div><div class="line">            queue.offer(<span class="keyword">new</span> Cell(m-<span class="number">1</span>,j,heightMap[m-<span class="number">1</span>][j]));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//Set Directions</span></div><div class="line">        <span class="keyword">int</span> water=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</div><div class="line">            Cell tmp=queue.poll();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>[] dir:direction)&#123;</div><div class="line">                <span class="keyword">int</span> row=tmp.row+dir[<span class="number">0</span>];</div><div class="line">                <span class="keyword">int</span> col=tmp.col+dir[<span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span>(row&gt;=<span class="number">0</span>&amp;&amp;row&lt;m&amp;&amp;col&gt;=<span class="number">0</span>&amp;&amp;col&lt;n&amp;&amp;!visited[row][col])&#123;</div><div class="line">                    visited[row][col]=<span class="keyword">true</span>;</div><div class="line">                    water+=Math.max(<span class="number">0</span>,tmp.height-heightMap[row][col]);</div><div class="line">                    queue.offer(<span class="keyword">new</span> Cell(row,col,Math.max(heightMap[row][col],tmp.height)));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> water;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="First-Missing-Positive"><a href="#First-Missing-Positive" class="headerlink" title="First Missing Positive"></a>First Missing Positive</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given an unsorted integer array, find the first missing positive integer.</p>
<p>For example,<br>Given<code>[1,2,0]</code> return <code>3</code>,<br>and <code>[3,4,-1,1]</code> return<code>2</code>.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/8293/my-short-c-solution-o-1-space-and-o-n-time" target="_blank" rel="external">LeetCode Discuss</a></p>
</blockquote>
<p>从头到尾遍历，将每个大于0且小于等于长度len的数i都放在数组i-1的位置上，最后再从头遍历一次，找到第一个num[i]!=i+1的即所需结果</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len=nums.length;</div><div class="line">        <span class="keyword">int</span> tmp=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">            <span class="keyword">while</span>(nums[i]&gt;<span class="number">0</span>&amp;&amp;nums[i]&lt;=len&amp;&amp;nums[nums[i]-<span class="number">1</span>]!=nums[i])&#123;    <span class="comment">//Swap(A[A[i]-1],A[i])</span></div><div class="line">                tmp=nums[i];</div><div class="line">                nums[i]=nums[tmp-<span class="number">1</span>];</div><div class="line">                nums[tmp-<span class="number">1</span>]=tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]!=i+<span class="number">1</span>)</div><div class="line">                <span class="keyword">return</span> i+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> len+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[  Product of Array Except Self || Trapping Rain Water]]></title>
      <url>/2016/12/17/2016-12-17--Product-of-Array-Except-Self-%7C%7C-Trapping-Rain-Water/</url>
      <content type="html"><![CDATA[<h3 id="Product-of-Array-Except-Self"><a href="#Product-of-Array-Except-Self" class="headerlink" title="Product of Array Except Self"></a>Product of Array Except Self</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given an array of n integers where n &gt; 1, <code>nums</code>, return an array <code>output</code>such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p>
<p>Solve it without division and in O(n).</p>
<p>For example, given <code>[1,2,3,4]</code>, return <code>[24,12,8,6]</code>.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/18864/simple-java-solution-in-o-n-without-extra-space" target="_blank" rel="external">LeetCode Discuss Two Pointers </a></p>
</blockquote>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">int</span>[] product=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        <span class="keyword">int</span> right=<span class="number">1</span>;</div><div class="line">        product[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            product[i]=product[i-<span class="number">1</span>]*nums[i-<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=nums.length-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</div><div class="line">            product[j]*=right;</div><div class="line">            right*=nums[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> product;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Trapping-Rain-Water"><a href="#Trapping-Rain-Water" class="headerlink" title="Trapping Rain Water"></a>Trapping Rain Water</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p>
<p>For example,<br>Given <code>[0,1,0,2,1,0,1,3,2,1,2,1]</code>, return <code>6</code>.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/18864/simple-java-solution-in-o-n-without-extra-space/21" target="_blank" rel="external">LeetCode Discuss</a></p>
<p><a href="http://bangbingsyb.blogspot.com/2014/11/leetcode-trapping-rain-water.html" target="_blank" rel="external">中文解析</a></p>
</blockquote>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len=height.length;</div><div class="line">        <span class="keyword">if</span>(len&lt;<span class="number">2</span>)   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] maxl=<span class="keyword">new</span> <span class="keyword">int</span>[len];</div><div class="line">        <span class="keyword">int</span>[] maxr=<span class="keyword">new</span> <span class="keyword">int</span>[len];</div><div class="line">        <span class="keyword">int</span> water=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> min=Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            maxl[i]=Math.max(maxl[i-<span class="number">1</span>],height[i-<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=len-<span class="number">2</span>;j&gt;=<span class="number">0</span>;j--)&#123;</div><div class="line">            maxr[j]=Math.max(maxr[j+<span class="number">1</span>],height[j+<span class="number">1</span>]);</div><div class="line">            min=Math.min(maxl[j],maxr[j]);</div><div class="line">            <span class="keyword">if</span>(min&gt;height[j])</div><div class="line">                water+=min-height[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> water;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Expression Add Operators || Basic Calculator II]]></title>
      <url>/2016/12/13/2016-12-13--Expression-Add-Operators-%7C%7C-Basic-Calculator-II/</url>
      <content type="html"><![CDATA[<h3 id="Expression-Add-Operators"><a href="#Expression-Add-Operators" class="headerlink" title="Expression Add Operators"></a>Expression Add Operators</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.</p>
<p>Examples: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;123&quot;, 6 -&gt; [&quot;1+2+3&quot;, &quot;123&quot;] </div><div class="line">&quot;232&quot;, 8 -&gt; [&quot;23+2&quot;, &quot;2+32&quot;]</div><div class="line">&quot;105&quot;, 5 -&gt; [&quot;1*0+5&quot;,&quot;10-5&quot;]</div><div class="line">&quot;00&quot;, 0 -&gt; [&quot;0+0&quot;, &quot;0-0&quot;, &quot;0*0&quot;]</div><div class="line">&quot;3456237490&quot;, 9191 -&gt; []</div></pre></td></tr></table></figure>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/24523/java-standard-backtrace-ac-solutoin-short-and-clear" target="_blank" rel="external">Java Standard Backtrace AC Solutoin, short and clear</a></p>
<p><a href="https://segmentfault.com/a/1190000003797204" target="_blank" rel="external">中文参考</a></p>
</blockquote>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">addOperators</span><span class="params">(String num, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span>(num==<span class="keyword">null</span>||num.length()==<span class="number">0</span>)    <span class="keyword">return</span> res;</div><div class="line">        helper(res,<span class="string">""</span>,num,<span class="number">0</span>,target,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(List&lt;String&gt; res, String path, String num, <span class="keyword">long</span> cal, <span class="keyword">int</span> target, <span class="keyword">int</span> pos, <span class="keyword">long</span> multi)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(pos==num.length())&#123;</div><div class="line">            <span class="keyword">if</span>(cal==target)&#123;</div><div class="line">                res.add(path);</div><div class="line">                <span class="keyword">return</span> ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&lt;num.length();i++)&#123;</div><div class="line">            <span class="keyword">if</span>(i!=pos&amp;&amp;num.charAt(pos)==<span class="string">'0'</span>)  <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">long</span> cur=Long.parseLong(num.substring(pos,i+<span class="number">1</span>));</div><div class="line">            <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;</div><div class="line">                helper(res,path+cur,num,cur,target,i+<span class="number">1</span>,cur);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                helper(res,path+<span class="string">"+"</span>+cur,num,cal+cur,target,i+<span class="number">1</span>,cur);</div><div class="line">                helper(res,path+<span class="string">"-"</span>+cur,num,cal-cur,target,i+<span class="number">1</span>,-cur);</div><div class="line">                helper(res,path+<span class="string">"*"</span>+cur,num,cal-multi+cur*multi,target,i+<span class="number">1</span>,cur*multi);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Basic-Calculator-II"><a href="#Basic-Calculator-II" class="headerlink" title="Basic Calculator II"></a>Basic Calculator II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Implement a basic calculator to evaluate a simple expression string.</p>
<p>The expression string contains only non-negative integers, +, -, *, / operators and empty spaces . The integer division should truncate toward zero.</p>
<p>You may assume that the given expression is always valid.</p>
<p>Some examples:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;3+2*2&quot; = 7</div><div class="line">&quot; 3/2 &quot; = 1</div><div class="line">&quot; 3+5 / 2 &quot; = 5</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/16935/share-my-java-solution" target="_blank" rel="external">LeetCode Discuss Solution</a></p>
</blockquote>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>||s.length()==<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        Stack&lt;Integer&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        <span class="keyword">char</span> sign=<span class="string">'+'</span>;</div><div class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</div><div class="line">            <span class="keyword">char</span> c=s.charAt(i);</div><div class="line">            <span class="keyword">if</span>(Character.isDigit(c))&#123;</div><div class="line">                num=num*<span class="number">10</span>+(c-<span class="string">'0'</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!Character.isDigit(c)&amp;&amp;c!=<span class="string">' '</span>||i==s.length()-<span class="number">1</span>)&#123; <span class="comment">//i=length-1最后一个数必须加入结果res,且不可用else if，无法应对s="1"的状况</span></div><div class="line">                <span class="keyword">if</span>(sign==<span class="string">'-'</span>)&#123;</div><div class="line">                    stack.push(-num);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(sign==<span class="string">'+'</span>)&#123;</div><div class="line">                    stack.push(num);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(sign==<span class="string">'/'</span>)&#123;</div><div class="line">                    stack.push(stack.pop()/num);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(sign==<span class="string">'*'</span>)&#123;</div><div class="line">                    stack.push(stack.pop()*num);</div><div class="line">                &#125;</div><div class="line">                sign=c;</div><div class="line">                num=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> item:stack)&#123;</div><div class="line">            res+=item;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Divide and Conquer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Max Points on a Line || Guess Number Higher or Lower II]]></title>
      <url>/2016/12/12/2016-12-12--Max-Points-on-a-Line-%7C%7C-Guess-Number-Higher-or-Lower-II/</url>
      <content type="html"><![CDATA[<h3 id="Max-Points-on-a-Line"><a href="#Max-Points-on-a-Line" class="headerlink" title="Max Points on a Line"></a>Max Points on a Line</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="http://www.jiuzhang.com/solutions/max-points-on-a-line/" target="_blank" rel="external">九章算法</a></p>
</blockquote>
<ul>
<li>map.put((double)Integer.MIN_VALUE,1); 可能整个序列都是相同点，他们的斜率用MIN_VALUE表示</li>
<li>利用dup变量记录有多少个重复的点</li>
<li>每次进入一个新的坐标点比较的时候记住map.clear</li>
<li>计算key的时候必须+0.0，否则无法通过所有点纵坐标相同的情况</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a point.</div><div class="line"> * class Point &#123;</div><div class="line"> *     int x;</div><div class="line"> *     int y;</div><div class="line"> *     Point() &#123; x = 0; y = 0; &#125;</div><div class="line"> *     Point(int a, int b) &#123; x = a; y = b; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(Point[] points)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(points.length&lt;<span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> points.length;</div><div class="line">        Map&lt;Double,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;Double,Integer&gt;();</div><div class="line">        <span class="keyword">int</span> max=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;points.length;i++)&#123;</div><div class="line">            map.clear();</div><div class="line">            map.put((<span class="keyword">double</span>)Integer.MAX_VALUE,<span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> dup=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;points.length;j++)&#123;</div><div class="line">                <span class="keyword">double</span> key=<span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span>(points[i].x==points[j].x&amp;&amp;points[i].y==points[j].y)&#123;</div><div class="line">                    dup++;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(points[i].x==points[j].x)</div><div class="line">                    key=(<span class="keyword">double</span>)Integer.MAX_VALUE;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    key=<span class="number">0.0</span>+(<span class="keyword">double</span>)(points[i].y-points[j].y)/(<span class="keyword">double</span>)(points[i].x-points[j].x);</div><div class="line">                map.put(key,map.getOrDefault(key,<span class="number">1</span>)+<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> tmp:map.values())&#123;</div><div class="line">                max=Math.max(dup+tmp,max);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Palindrome-Partitioning-II"><a href="#Palindrome-Partitioning-II" class="headerlink" title="Palindrome Partitioning II"></a>Palindrome Partitioning II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>We are playing the Guess Game. The game is as follows:</p>
<p>I pick a number from 1 to n. You have to guess which number I picked.</p>
<p>Every time you guess wrong, I’ll tell you whether the number I picked is higher or lower.</p>
<p>However, when you guess a particular number x, and you guess wrong, you pay $x. You win the game when you guess the number I picked.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">n = 10, I pick 8.</div><div class="line">First round:  You guess 5, I tell you that it&apos;s higher. You pay $5.</div><div class="line">Second round: You guess 7, I tell you that it&apos;s higher. You pay $7.</div><div class="line">Third round:  You guess 9, I tell you that it&apos;s lower. You pay $9.</div><div class="line">Game over. 8 is the number I picked.</div><div class="line">You end up paying $5 + $7 + $9 = $21.</div></pre></td></tr></table></figure>
<p>Given a particular n ≥ 1, find out how much money you need to have to guarantee a win.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="http://www.cnblogs.com/grandyang/p/5677550.html" target="_blank" rel="external">中文参考</a></p>
<p><a href="https://discuss.leetcode.com/topic/51353/simple-dp-solution-with-explanation" target="_blank" rel="external">LeetCode Discuss</a></p>
<p><a href="http://univasity.iteye.com/blog/1170216" target="_blank" rel="external">最大最小化</a></p>
</blockquote>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoneyAmount</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] table = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> DP(table, <span class="number">1</span>, n);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span>[][] t, <span class="keyword">int</span> s, <span class="keyword">int</span> e)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(s &gt;= e) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(t[s][e] != <span class="number">0</span>) <span class="keyword">return</span> t[s][e];</div><div class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=s; x&lt;=e; x++)&#123;</div><div class="line">            <span class="keyword">int</span> tmp = x + Math.max(DP(t, s, x-<span class="number">1</span>), DP(t, x+<span class="number">1</span>, e));</div><div class="line">            res = Math.min(res, tmp);</div><div class="line">        &#125;</div><div class="line">        t[s][e] = res;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Number of Boomerangs || Linked List Cycle Series]]></title>
      <url>/2016/12/06/2016-12-06--Number-of-Boomerangs/</url>
      <content type="html"><![CDATA[<h3 id="Number-of-Boomerangs"><a href="#Number-of-Boomerangs" class="headerlink" title="Number of Boomerangs"></a>Number of Boomerangs</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given n points in the plane that are all pairwise distinct, a “boomerang” is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).</p>
<p>Find the number of boomerangs. You may assume that n will be at most 500 and coordinates of points are all in the range [-10000, 10000] (inclusive).</p>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[[0,0],[1,0],[2,0]]</div><div class="line"></div><div class="line">Output:</div><div class="line">2</div><div class="line"></div><div class="line">Explanation:</div><div class="line">The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]</div></pre></td></tr></table></figure>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>For every i, we capture the number of points equidistant from i. Now for this i, we have to calculate all possible permutations of (j,k) from these equidistant points.</p>
<p>Total number of permutations of size 2 from n different points is nP2 = n!/(n-2)! = n * (n-1).</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int numberOfBoomerangs(int[][] points) &#123;</div><div class="line">        int res=0;</div><div class="line">        Map&lt;Integer,Integer&gt; table=new HashMap&lt;&gt;();</div><div class="line">        for(int i=0;i&lt;points.length;i++)&#123;</div><div class="line">            for(int j=0;j&lt;points.length;j++)&#123;</div><div class="line">                if(i==j)</div><div class="line">                    continue;</div><div class="line">                int d=caldis(points[i],points[j]);</div><div class="line">                table.put(d,table.getOrDefault(d,0)+1);</div><div class="line">            &#125;</div><div class="line">            for(int values:table.values())&#123;</div><div class="line">                res+=values*(values-1);   </div><div class="line">            &#125;</div><div class="line">            table.clear();</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private int caldis(int[] a, int[] b)&#123;</div><div class="line">        int x=a[0]-b[0];</div><div class="line">        int y=a[1]-b[1];</div><div class="line">        return x*x+y*y;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Linked-List-Cycle-Series"><a href="#Linked-List-Cycle-Series" class="headerlink" title="Linked List Cycle Series"></a>Linked List Cycle Series</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.</p>
<p>Note: Do not modify the linked list.</p>
<p>Follow up:<br>Can you solve it without using extra space?</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="http://www.cnblogs.com/hiddenfox/p/3408931.html" target="_blank" rel="external">链表环解决方案</a></p>
</blockquote>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123;</div><div class="line"> *         val = x;</div><div class="line"> *         next = null;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        ListNode walker=head;</div><div class="line">        ListNode runner=head;</div><div class="line">        <span class="keyword">boolean</span> hasCycle=<span class="keyword">false</span>;</div><div class="line">        <span class="keyword">while</span>(runner.next!=<span class="keyword">null</span>&amp;&amp;runner.next.next!=<span class="keyword">null</span>)&#123;</div><div class="line">            walker=walker.next;</div><div class="line">            runner=runner.next.next;</div><div class="line">            <span class="keyword">if</span>(walker==runner)&#123;</div><div class="line">                hasCycle=<span class="keyword">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!hasCycle)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        walker=head;</div><div class="line">        <span class="keyword">while</span>(walker!=runner)&#123;</div><div class="line">            walker=walker.next;</div><div class="line">            runner=runner.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> walker;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Insert Interval/ Merge Intervals]]></title>
      <url>/2016/11/30/2016-11-30--Insert-Interval:-Merge-Intervals/</url>
      <content type="html"><![CDATA[<h2 id="Insert-Interval"><a href="#Insert-Interval" class="headerlink" title="Insert Interval"></a>Insert Interval</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Given a set of <em>non-overlapping</em> intervals, insert a new interval into the intervals (merge if necessary).</p>
<p>You may assume that the intervals were initially sorted according to their start times.</p>
<p><strong>Example 1:</strong><br>Given intervals <code>[1,3],[6,9]</code>, insert and merge <code>[2,5]</code> in as <code>[1,5],[6,9]</code>.</p>
<p><strong>Example 2:</strong><br>Given <code>[1,2],[3,5],[6,7],[8,10],[12,16]</code>, insert and merge <code>[4,9]</code> in as <code>[1,2],[3,10],[12,16]</code>.</p>
<p>This is because the new interval <code>[4,9]</code> overlaps with <code>[3,5],[6,7],[8,10]</code>.</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>设newInterval的起止为low和high</p>
<ul>
<li>对于集合中所有end小于low的区间直接加入res中</li>
<li>集合中start小于等于low的属于可以归并的区间，则一直循环下去并始终取最小为下届，最大为上届(newInterval的)，直到start&gt;low，将最终的 newInterval加入res</li>
<li>剩余的区间直接加入res</li>
</ul>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() &#123; start = 0; end = 0; &#125;</div><div class="line"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Interval&gt; <span class="title">insert</span><span class="params">(List&lt;Interval&gt; intervals, Interval newInterval)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> num=intervals.size();</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        List&lt;Interval&gt; res=<span class="keyword">new</span> LinkedList();</div><div class="line">        <span class="keyword">while</span>(i&lt;num&amp;&amp;intervals.get(i).end&lt;newInterval.start)&#123;</div><div class="line">            res.add(intervals.get(i));</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(i&lt;num&amp;&amp;intervals.get(i).start&lt;=newInterval.end)&#123;</div><div class="line">            <span class="keyword">int</span> start=Math.min(intervals.get(i).start,newInterval.start);</div><div class="line">            <span class="keyword">int</span> end=Math.max(intervals.get(i).end,newInterval.end);</div><div class="line">            newInterval=<span class="keyword">new</span> Interval(start,end);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        res.add(newInterval);</div><div class="line">        <span class="keyword">while</span>(i&lt;num)&#123;</div><div class="line">            res.add(intervals.get(i));</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Merge-Intervals"><a href="#Merge-Intervals" class="headerlink" title="Merge Intervals"></a>Merge Intervals</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><p>Given a collection of intervals, merge all overlapping intervals.</p>
<p>For example,<br>Given <code>[1,3],[2,6],[8,10],[15,18]</code>,<br>return <code>[1,6],[8,10],[15,18]</code>.</p>
<h3 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h3><p><strong>重点是要对现有的序列以start从小到大排序</strong></p>
<p>将第一个区间的上下界设为low,high，分为两种情况：</p>
<ul>
<li>high&lt;当前区间的start，代表无重合部分，直接将区间[low,high]加入res，并且以当前区间的上下界更新low,high</li>
<li>high≥当前区间的start，区间有重合，取两者较大的上界为high，继续对比</li>
</ul>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() &#123; start = 0; end = 0; &#125;</div><div class="line"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Interval&gt; <span class="title">merge</span><span class="params">(List&lt;Interval&gt; intervals)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(intervals.size()==<span class="number">0</span>||intervals.size()==<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> intervals;</div><div class="line">        Collections.sort(intervals, <span class="keyword">new</span> Comparator&lt;Interval&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Interval i1, Interval i2)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> Integer.compare(i1.start, i2.start);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> low=intervals.get(<span class="number">0</span>).start;</div><div class="line">        <span class="keyword">int</span> high=intervals.get(<span class="number">0</span>).end;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        List&lt;Interval&gt; res=<span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        <span class="keyword">while</span>(i&lt;intervals.size())&#123;</div><div class="line">             <span class="keyword">if</span>(high&lt;intervals.get(i).start)&#123;</div><div class="line">                 res.add(<span class="keyword">new</span> Interval(low,high));</div><div class="line">                 low=intervals.get(i).start;</div><div class="line">                 high=intervals.get(i).end;</div><div class="line">             &#125;</div><div class="line">             <span class="keyword">else</span>&#123;</div><div class="line">                 high=Math.max(high,intervals.get(i).end);</div><div class="line">             &#125;</div><div class="line">             i++;</div><div class="line">        &#125;</div><div class="line">        res.add(<span class="keyword">new</span> Interval(low,high));</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Array </tag>
            
            <tag> Sort </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Unique Path Series]]></title>
      <url>/2016/11/14/2016-11-14--Unique-Path-Series/</url>
      <content type="html"><![CDATA[<h3 id="Unique-Paths-I"><a href="#Unique-Paths-I" class="headerlink" title="Unique Paths I"></a>Unique Paths I</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>A robot is located at the top-left corner of a <em>m</em> x <em>n</em> grid (marked ‘Start’ in the diagram below).</p>
<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p>
<p>How many possible unique paths are there?</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/5623/java-dp-solution-with-complexity-o-n-m" target="_blank" rel="external">Java DP solution with complexity O(n*m)</a></p>
</blockquote>
<p>最左侧和最上侧的一列的行走方式都只有1种，除此之外的每个格子的路径个数是他的上方相邻格和左侧相邻格的路径个数和</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>2-D array version:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] map=<span class="keyword">new</span> <span class="keyword">int</span>[m][n];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">            map[i][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">            map[<span class="number">0</span>][i]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</div><div class="line">                map[i][j]=map[i][j-<span class="number">1</span>]+map[i-<span class="number">1</span>][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> map[m-<span class="number">1</span>][n-<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1-D array version:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (m == <span class="number">1</span> || n == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            dp[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</div><div class="line">                dp[j] += dp[j - <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Unique-Paths-II"><a href="#Unique-Paths-II" class="headerlink" title="Unique Paths II"></a>Unique Paths II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Follow up for “Unique Paths”:</p>
<p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p>
<p>An obstacle and empty space is marked as <code>1</code> and <code>0</code> respectively in the grid.</p>
<p>For example,</p>
<p>There is one obstacle in the middle of a 3x3 grid as illustrated below.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [0,0,0],</div><div class="line">  [0,1,0],</div><div class="line">  [0,0,0]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>The total number of unique paths is <code>2</code>.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>重点在于<strong>确定好最左侧和最上方行列的路径个数</strong></p>
<ul>
<li>(0,0)位置有阻碍则map为0，否则为1</li>
<li>左侧和上方的当前格子路径个数都等于前一个*1，即假如上一个格子的路径数已经为0，其后所有的格子的路径数都为0</li>
<li>其余格子计算同上</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] obstacleGrid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m=obstacleGrid.length;</div><div class="line">        <span class="keyword">if</span>(m==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n=obstacleGrid[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">int</span>[][] map=<span class="keyword">new</span> <span class="keyword">int</span>[m][n];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(obstacleGrid[i][j]==<span class="number">1</span>)</div><div class="line">                    map[i][j]=<span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>&amp;&amp;j==<span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">if</span>(obstacleGrid[i][j]==<span class="number">1</span>)</div><div class="line">                        map[i][j]=<span class="number">0</span>;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        map[i][j]=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>)</div><div class="line">                    map[i][j]=map[i][j-<span class="number">1</span>]*<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>)</div><div class="line">                    map[i][j]=map[i-<span class="number">1</span>][j]*<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    map[i][j]=map[i-<span class="number">1</span>][j]+map[i][j-<span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> map[m-<span class="number">1</span>][n-<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#### </p>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Binary Search Tree Iterator || Binary Tree Zigzag Level Order Traversal ]]></title>
      <url>/2016/10/29/2016-10-29--Binary-Search-Tree-Iterator%20%7C%7C%20-Binary-Tree-Zigzag-Level-Order-Traversal%20/</url>
      <content type="html"><![CDATA[<h3 id="Binary-Search-Tree-Iterator"><a href="#Binary-Search-Tree-Iterator" class="headerlink" title="Binary Search Tree Iterator"></a>Binary Search Tree Iterator</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.</p>
<p>Calling <code>next()</code> will return the next smallest number in the BST.</p>
<p><strong>Note: </strong><code>next()</code> and <code>hasNext()</code> should run in average O(1) time and uses O(<em>h</em>) memory, where <em>h</em> is the height of the tree.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>利用栈保存根节点的所有直接左节点</li>
<li>判断是否存在next节点可以直接通过栈是否为空来判断</li>
<li>next函数在pop当前节点后push该节点的所有直接左节点</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for binary tree</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BSTIterator</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        pushAll(root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** <span class="doctag">@return</span> whether we have a next smallest number */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> !stack.isEmpty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** <span class="doctag">@return</span> the next smallest number */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        TreeNode node=stack.pop();</div><div class="line">        pushAll(node.right);</div><div class="line">        <span class="keyword">return</span> node.val;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushAll</span><span class="params">(TreeNode node)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(;node!=<span class="keyword">null</span>;node=node.left)</div><div class="line">            stack.push(node);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your BSTIterator will be called like this:</div><div class="line"> * BSTIterator i = new BSTIterator(root);</div><div class="line"> * while (i.hasNext()) v[f()] = i.next();</div><div class="line"> */</div></pre></td></tr></table></figure>
<h3 id="Binary-Tree-Zigzag-Level-Order-Traversal"><a href="#Binary-Tree-Zigzag-Level-Order-Traversal" class="headerlink" title="Binary Tree Zigzag Level Order Traversal"></a>Binary Tree Zigzag Level Order Traversal</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a binary tree, return the <em>zigzag level order</em> traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).</p>
<p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  3</div><div class="line"> / \</div><div class="line">9  20</div><div class="line">  /  \</div><div class="line"> 15   7</div></pre></td></tr></table></figure>
<p>return its zigzag level order traversal as:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [3],</div><div class="line">  [20,9],</div><div class="line">  [15,7]</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>利用linkedlist来保存每层的节点，偶数层的节点从前向后插入，奇数层节点每次插入在头节点处</li>
<li>利用两个变量parent，child来记录每层节点个数，从而确定从queue中poll的次数，parent保存当前层的节点个数，child保存下一层的节点个数</li>
<li>在一开始的时候判断root是否为空</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">int</span> level=<span class="number">0</span>;    <span class="comment">//Judge odd or even by mod</span></div><div class="line">        <span class="keyword">int</span> child=<span class="number">0</span>;    <span class="comment">//Number of child node</span></div><div class="line">        <span class="keyword">int</span> parent=<span class="number">1</span>;   <span class="comment">//Number of nodes in current level</span></div><div class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">        List&lt;Integer&gt; tmp=<span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        queue.add(root);</div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</div><div class="line">            TreeNode node=queue.poll();</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(level%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">                tmp.add(node.val);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                tmp.add(<span class="number">0</span>,node.val);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;</div><div class="line">                queue.add(node.left);</div><div class="line">                child++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</div><div class="line">                queue.add(node.right);</div><div class="line">                child++;</div><div class="line">            &#125;</div><div class="line">            parent--;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(parent==<span class="number">0</span>)&#123;</div><div class="line">                res.add(tmp);</div><div class="line">                level++;</div><div class="line">                tmp=<span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">                parent=child;</div><div class="line">                child=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Tree </tag>
            
            <tag> Stack </tag>
            
            <tag> BST </tag>
            
            <tag> Design </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Word Break || Word Break II ]]></title>
      <url>/2016/10/27/2016-10-27--Word-Break-%20%7C%7C%20-Word-Break-II%20/</url>
      <content type="html"><![CDATA[<h3 id="Word-Break"><a href="#Word-Break" class="headerlink" title="Word Break"></a>Word Break</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a string <em>s</em> and a dictionary of words <em>dict</em>, determine if <em>s</em> can be segmented into a space-separated sequence of one or more dictionary words.</p>
<p>For example, given<br><em>s</em> = <code>&quot;leetcode&quot;</code>,<br><em>dict</em> = <code>[&quot;leet&quot;, &quot;code&quot;]</code>.</p>
<p>Return true because <code>&quot;leetcode&quot;</code> can be segmented as <code>&quot;leet code&quot;</code>.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>数组f[i]表示截止到第i个字符是否满足wordbreak的条件</li>
<li>外层循环从1开始，循环对f[i]进行赋值</li>
<li>内层循环范围为0-i，检查该部分字符串是否存在一个节点j可以使得其满足wordbreak条件</li>
<li>最终返回f[s.length]</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, Set&lt;String&gt; wordDict)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span>[] f=<span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()+<span class="number">1</span>];</div><div class="line">        Arrays.fill(f,<span class="keyword">false</span>);</div><div class="line">        f[<span class="number">0</span>]=<span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s.length();i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(f[j]&amp;&amp;wordDict.contains(s.substring(j,i)))&#123;</div><div class="line">                    f[i]=<span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> f[s.length()];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="WordBreak-II"><a href="#WordBreak-II" class="headerlink" title="WordBreak II"></a>WordBreak II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a string <em>s</em> and a dictionary of words <em>dict</em>, add spaces in <em>s</em> to construct a sentence where each word is a valid dictionary word.</p>
<p>Return all such possible sentences.</p>
<p>For example, given<br><em>s</em> = <code>&quot;catsanddog&quot;</code>,<br><em>dict</em> = <code>[&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</code>.</p>
<p>A solution is <code>[&quot;cats and dog&quot;, &quot;cat sand dog&quot;]</code>.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/27855/my-concise-java-solution-based-on-memorized-dfs" target="_blank" rel="external">My concise JAVA solution based on memorized DFS</a></p>
<p><a href="https://discuss.leetcode.com/topic/12997/11ms-c-solution-concise" target="_blank" rel="external">11ms C++ solution (concise)</a></p>
</blockquote>
<ul>
<li>从1开始循环，看[1,length]范围内的子串t是否在字典内，假如在字典内进入递归</li>
<li>对[0,i]范围内的子串进行处理，并返回former</li>
<li>假如former不为空，将former中的串+空格+tmp加入res中，并在最后返回</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    HashMap&lt;String,List&lt;String&gt;&gt; table=<span class="keyword">new</span> HashMap&lt;String,List&lt;String&gt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">wordBreak</span><span class="params">(String s, Set&lt;String&gt; wordDict)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; res=<span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>||s.length()==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">if</span>(table.containsKey(s))</div><div class="line">            <span class="keyword">return</span> table.get(s);</div><div class="line">        <span class="keyword">if</span>(wordDict.contains(s))</div><div class="line">            res.add(s);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length();i++)&#123;</div><div class="line">            String tmp=s.substring(i);</div><div class="line">            <span class="keyword">if</span>(wordDict.contains(tmp))&#123;</div><div class="line">                List&lt;String&gt; former=wordBreak(s.substring(<span class="number">0</span>,i),wordDict);</div><div class="line">                <span class="keyword">if</span>(former.size()!=<span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">for</span>(Iterator&lt;String&gt; ite=former.iterator();ite.hasNext();)&#123;</div><div class="line">                        res.add(ite.next()+<span class="string">" "</span>+tmp);</div><div class="line">                    &#125;  </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        table.put(s,res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Dynamic Planning </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Rotate Function ]]></title>
      <url>/2016/10/24/2016-10-24--Rotate-Function%20/</url>
      <content type="html"><![CDATA[<h1 id="Rotate-Function"><a href="#Rotate-Function" class="headerlink" title="Rotate Function"></a>Rotate Function</h1><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Given an array of integers <code>A</code> and let <em>n</em> to be its length.</p>
<p>Assume <code>Bk</code> to be an array obtained by rotating the array <code>A</code> <em>k</em> positions clock-wise, we define a “rotation function” <code>F</code> on <code>A</code> as follow:</p>
<p><code>F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]</code>.</p>
<p>Calculate the maximum value of <code>F(0), F(1), ..., F(n-1)</code>.</p>
<p><strong>Note:</strong><br><em>n</em> is guaranteed to be less than 105.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">A = [4, 3, 2, 6]</div><div class="line"></div><div class="line">F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25</div><div class="line">F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16</div><div class="line">F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23</div><div class="line">F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26</div><div class="line"></div><div class="line">So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.</div></pre></td></tr></table></figure>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><blockquote>
<p><a href="https://discuss.leetcode.com/topic/58616/java-solution-o-n-with-non-mathametical-explaination" target="_blank" rel="external">Java Solution O(n) with non mathametical explaination</a></p>
<p><a href="https://discuss.leetcode.com/topic/58459/java-o-n-solution-with-explanation" target="_blank" rel="external">Java O(n) solution with explanation_Math</a></p>
</blockquote>
<p>一开始想排序后再求和，然后发现那样的话就变成乱序的了。</p>
<p>F(0) = (0<em>A) + (1</em>B) + (2<em>C) + (3</em>D) + (4E)</p>
<p>F(1) = (0B) + (1C) + (2D) + (3E) + (4A)</p>
<p>F(2) = (0C) + (1D) + (2E) + (3A) + (4B)</p>
<p><strong>将数组逆序移动后</strong>总结规律可以发现F(n)等于F(n-1)减去所有元素的求和，再加上nums长度个上次贡献为0的元素，这样只需每次对tmp操作，并与res比较大小，取其大的即可。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxRotateFunction</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> iteration=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> size=A.length;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</div><div class="line">            res+=i*A[i];</div><div class="line">            iteration+=A[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> tmp=res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size-<span class="number">1</span>;j++)&#123;</div><div class="line">            tmp=tmp-iteration+size*A[j];</div><div class="line">            res=Math.max(tmp,res);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[  Best Time to Buy and Sell Stock ]]></title>
      <url>/2016/10/18/2016-10-18--Best-Time-to-Buy-and-Sell-Stock%20/</url>
      <content type="html"><![CDATA[<h3 id="Best-Time-to-Buy-and-Sell-Stock"><a href="#Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="Best Time to Buy and Sell Stock"></a>Best Time to Buy and Sell Stock</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p>
<p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [7, 1, 5, 3, 6, 4]</div><div class="line">Output: 5</div><div class="line"></div><div class="line">max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [7, 6, 4, 3, 1]</div><div class="line">Output: 0</div><div class="line"></div><div class="line">In this case, no transaction is done, i.e. max profit = 0.</div></pre></td></tr></table></figure>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/5863/sharing-my-simple-and-clear-c-solution/6" target="_blank" rel="external">Sharing my simple and clear C++ solution</a></p>
</blockquote>
<p>循环过程中每次记录当前最小的min，并且在当前价格与min差值最大的时候更新max</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> min=Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(prices[i]&lt;min)</div><div class="line">                min=prices[i];</div><div class="line">            <span class="keyword">if</span>(prices[i]-min&gt;max)</div><div class="line">                max=prices[i]-min;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Best-Time-to-Buy-and-Sell-Stock-II"><a href="#Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="Best Time to Buy and Sell Stock II"></a>Best Time to Buy and Sell Stock II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>计算所有后者大于前者的元素对的差值并且求值即可</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.length-<span class="number">1</span>;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(prices[i+<span class="number">1</span>]&gt;prices[i])</div><div class="line">                res+=prices[i+<span class="number">1</span>]-prices[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Best-Time-to-Buy-and-Sell-Stock-III"><a href="#Best-Time-to-Buy-and-Sell-Stock-III" class="headerlink" title="Best Time to Buy and Sell Stock III"></a>Best Time to Buy and Sell Stock III</h3><h4 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h4><p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p>
<p>Design an algorithm to find the maximum profit. You may complete at most <em>two</em> transactions.</p>
<p><strong>Note:</strong><br>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/4766/a-clean-dp-solution-which-generalizes-to-k-transactions" target="_blank" rel="external">A clean DP solution which generalizes to k transactions</a></p>
</blockquote>
<h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> k=<span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> size=prices.length;</div><div class="line">        <span class="keyword">if</span>(size&lt;<span class="number">1</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[][] f=<span class="keyword">new</span> <span class="keyword">int</span>[k+<span class="number">1</span>][size];</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</div><div class="line">            <span class="keyword">int</span> maxtmp=f[i-<span class="number">1</span>][<span class="number">0</span>]-prices[<span class="number">0</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;size;j++)&#123;</div><div class="line">                f[i][j]=Math.max(maxtmp+prices[j],f[i][j-<span class="number">1</span>]);</div><div class="line">                maxtmp=Math.max(maxtmp,f[i-<span class="number">1</span>][j]-prices[j]);</div><div class="line">                res=Math.max(f[i][j],res);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Dynamic Planning </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Search a 2D Matrix || Search a 2D Matrix II]]></title>
      <url>/2016/10/16/2016-10-16--Search-a-2D-Matrix%20%7C%7C%20-Search-a-2D-Matrix-II/</url>
      <content type="html"><![CDATA[<h3 id="Search-a-2D-Matrix"><a href="#Search-a-2D-Matrix" class="headerlink" title="Search a 2D Matrix"></a>Search a 2D Matrix</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Write an efficient algorithm that searches for a value in an <em>m</em> x <em>n</em> matrix. This matrix has the following properties:</p>
<ul>
<li>Integers in each row are sorted from left to right.</li>
<li>The first integer of each row is greater than the last integer of the previous row.</li>
</ul>
<p>For example,</p>
<p>Consider the following matrix:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [1,   3,  5,  7],</div><div class="line">  [10, 11, 16, 20],</div><div class="line">  [23, 30, 34, 50]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>Given <strong>target</strong> = <code>3</code>, return <code>true</code>.</p>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><blockquote>
<p><a href="https://discuss.leetcode.com/topic/3227/don-t-treat-it-as-a-2d-matrix-just-treat-it-as-a-sorted-list" target="_blank" rel="external">Don’t treat it as a 2D matrix, just treat it as a sorted list</a></p>
</blockquote>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(matrix==<span class="keyword">null</span>||matrix.length==<span class="number">0</span>) </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">int</span> row=matrix.length;</div><div class="line">        <span class="keyword">int</span> col=matrix[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> right=row*col-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</div><div class="line">            <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">int</span> i=mid/col;</div><div class="line">            <span class="keyword">int</span> j=mid%col;</div><div class="line">            <span class="keyword">if</span>(target==matrix[i][j])    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;matrix[i][j])    left=mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> right=mid-<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Search-a-2D-Matrix-II"><a href="#Search-a-2D-Matrix-II" class="headerlink" title="Search a 2D Matrix II"></a>Search a 2D Matrix II</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Write an efficient algorithm that searches for a value in an <em>m</em> x <em>n</em> matrix. This matrix has the following properties:</p>
<ul>
<li>Integers in each row are sorted in ascending from left to right.</li>
<li>Integers in each column are sorted in ascending from top to bottom.</li>
</ul>
<p>For example,</p>
<p>Consider the following matrix:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [1,   4,  7, 11, 15],</div><div class="line">  [2,   5,  8, 12, 19],</div><div class="line">  [3,   6,  9, 16, 22],</div><div class="line">  [10, 13, 14, 17, 24],</div><div class="line">  [18, 21, 23, 26, 30]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>Given <strong>target</strong> = <code>5</code>, return <code>true</code>.</p>
<p>Given <strong>target</strong> = <code>20</code>, return <code>false</code>.</p>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><blockquote>
<p><a href="https://discuss.leetcode.com/topic/20064/my-concise-o-m-n-java-solution/13" target="_blank" rel="external">My concise O(m+n) Java solution</a></p>
</blockquote>
<p>从右上角的元素开始扫描，若当前元素小于target，说明整行元素都小于target，向下移动col；若大于target，则向左移动row，无嵌套循环</p>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(matrix==<span class="keyword">null</span>||matrix.length==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">int</span> row=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> col=matrix[<span class="number">0</span>].length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(row&lt;=matrix.length-<span class="number">1</span>&amp;&amp;col&gt;=<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(matrix[row][col]==target)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(matrix[row][col]&gt;target)</div><div class="line">                col--;</div><div class="line">            <span class="keyword">else</span> </div><div class="line">                row++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Binary Search </tag>
            
            <tag> Array </tag>
            
            <tag> Divide and Conquer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Find Minimum in Rotated Sorted Array || Search in Rotated Sorted Array || Search in Rotated Sorted Array II]]></title>
      <url>/2016/10/14/2016-10-14--Find-Minimum-in-Rotated-Sorted-Array%20%7C%7C%20-Search-in-Rotated-Sorted-Array%20%7C%7C%20-Search-in-Rotated-Sorted-Array-II/</url>
      <content type="html"><![CDATA[<h3 id="Find-Minimum-in-Rotated-Sorted-Array"><a href="#Find-Minimum-in-Rotated-Sorted-Array" class="headerlink" title="Find Minimum in Rotated Sorted Array"></a>Find Minimum in Rotated Sorted Array</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p>
<p>Find the minimum element.</p>
<p>You may assume no duplicate exists in the array.</p>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><blockquote>
<p><a href="https://discuss.leetcode.com/topic/4100/compact-and-clean-c-solution" target="_blank" rel="external">Compact and clean C++ solution</a></p>
</blockquote>
<ul>
<li>left&lt;right 当前left即最小值</li>
<li>否则一直二分，直至循环结束所得的left为结果</li>
<li>循环条件为left&lt;right，当left=right时进入循环，所得mid可能等于left，则数组越界 e.g.：[1]</li>
</ul>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> right=nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[left]&lt;nums[right])</div><div class="line">                <span class="keyword">return</span> nums[left];</div><div class="line">            <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[left]&lt;=nums[mid])</div><div class="line">                left=mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                right=mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums[left];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Search-in-Rotated-Sorted-Array"><a href="#Search-in-Rotated-Sorted-Array" class="headerlink" title="Search in Rotated Sorted Array"></a>Search in Rotated Sorted Array</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p>
<p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p>
<p>You may assume no duplicate exists in the array.</p>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><blockquote>
<p><a href="https://discuss.leetcode.com/topic/3538/concise-o-log-n-binary-search-solution" target="_blank" rel="external">Concise O(log N) Binary search solution</a></p>
</blockquote>
<ul>
<li>在找到位移后，虽然每次同realmid比值，但是在对left和right操作的过程中始终用的是mid的值</li>
</ul>
<blockquote>
<p><a href="https://discuss.leetcode.com/topic/7711/revised-binary-search" target="_blank" rel="external">Revised Binary Search</a></p>
</blockquote>
<ul>
<li>在最后循环结束且没有返回结果的时候，需要比较此时left的值是否等于target</li>
</ul>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> right=nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> shift=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[left]&lt;nums[right])  <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[left]&lt;=nums[mid])  left=mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span>    right=mid;</div><div class="line">        &#125;</div><div class="line">        shift=left;</div><div class="line">        </div><div class="line">        left=<span class="number">0</span>;</div><div class="line">        right=nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</div><div class="line">            <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">int</span> realmid=(mid+shift)%nums.length;</div><div class="line">            <span class="keyword">if</span>(target==nums[realmid])   <span class="keyword">return</span> realmid;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[realmid])   left=mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span>    right=mid-<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> right=nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</div><div class="line">            <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[mid]==target)</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            <span class="keyword">if</span>(nums[left]&lt;=nums[mid])&#123;</div><div class="line">                <span class="keyword">if</span>(target&lt;nums[mid]&amp;&amp;target&gt;=nums[left])</div><div class="line">                    right=mid-<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    left=mid+<span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(target&gt;nums[mid]&amp;&amp;target&lt;=nums[right])</div><div class="line">                    left=mid+<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    right=mid-<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(nums[left]==target)</div><div class="line">            <span class="keyword">return</span> left;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Search-in-Rotated-Sorted-Array-II"><a href="#Search-in-Rotated-Sorted-Array-II" class="headerlink" title="Search in Rotated Sorted Array II"></a>Search in Rotated Sorted Array II</h3><h5 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h5><p>Follow up for “Search in Rotated Sorted Array”:</p>
<p>What if <em>duplicates</em> are allowed?</p>
<p>Would this affect the run-time complexity? How and why?</p>
<p>Write a function to determine if a given target is in the array.</p>
<h5 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h5><blockquote>
<p><a href="https://discuss.leetcode.com/topic/310/when-there-are-duplicates-the-worst-case-is-o-n-could-we-do-better/2" target="_blank" rel="external">When there are duplicates, the worst case is O(n). Could we do better?</a></p>
</blockquote>
<ul>
<li>A[left]=A[mid]：可能从left到right所有的元素都是相同的；或者不同的数字（可能包含target）存在于left到right之间，但是无法判断是哪种情况，所以每次将left向右挪一位再继续</li>
<li>当A[left]&lt;A[mid]时，代表mid左侧是已经排好序的，反之右侧已经排好序</li>
<li>假如target位于当前排好序的区间内，则将mid值赋给left或right</li>
</ul>
<h5 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> right=nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</div><div class="line">            <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[mid]==target)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[left]&lt;nums[mid])&#123;</div><div class="line">                <span class="keyword">if</span>(target&lt;nums[mid]&amp;&amp;target&gt;=nums[left])</div><div class="line">                    right=mid-<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    left=mid+<span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[left]&gt;nums[mid])&#123;</div><div class="line">                <span class="keyword">if</span>(target&gt;nums[mid]&amp;&amp;target&lt;=nums[right])</div><div class="line">                    left=mid+<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    right=mid-<span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span></div><div class="line">                left++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Binary Search </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[  H-Index Series]]></title>
      <url>/2016/10/12/2016-10-12--H-Index-series/</url>
      <content type="html"><![CDATA[<h3 id="H-Index"><a href="#H-Index" class="headerlink" title="H-Index"></a>H-Index</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher’s h-index.</p>
<p>According to the <a href="https://en.wikipedia.org/wiki/H-index" target="_blank" rel="external">definition of h-index on Wikipedia</a>: “A scientist has index <em>h</em> if <em>h</em> of his/her <em>N</em> papers have <strong>at least</strong> <em>h</em> citations each, and the other <em>N − h</em> papers have <strong>no more than</strong> <em>h</em> citations each.”</p>
<p>For example, given <code>citations = [3, 0, 6, 1, 5]</code>, which means the researcher has <code>5</code> papers in total and each of them had received <code>3, 0, 6, 1, 5</code> citations respectively. Since the researcher has <code>3</code> papers with <strong>at least</strong> <code>3</code> citations each and the remaining two with <strong>no more than</strong> <code>3</code> citations each, his h-index is <code>3</code>.</p>
<p><strong>Note</strong>: If there are several possible values for <code>h</code>, the maximum one is taken as the h-index.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>采用类似于桶排序的方法</p>
<ul>
<li>count长度为数组长度len+1，用于记录不同引用次数的文章个数</li>
<li>引用次数大于等于len：count[len]++; 其余则是对应引用次数下标的位置++</li>
<li>从count最后一个元素开始遍历并加至hindex，当hindex&gt;=i时，代表已经至少有i篇文章的引用次数至少为i了。</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size=citations.length;</div><div class="line">        <span class="keyword">int</span>[] count=<span class="keyword">new</span> <span class="keyword">int</span>[size+<span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> item:citations)&#123;</div><div class="line">            <span class="keyword">if</span>(item&gt;=size)</div><div class="line">                count[size]++;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                count[item]++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> hindex=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=size;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">            hindex+=count[i];</div><div class="line">            <span class="keyword">if</span>(hindex&gt;=i)</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="H-Index-II"><a href="#H-Index-II" class="headerlink" title="H-Index II"></a>H-Index II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p><strong>Follow up</strong> for <a href="https://leetcode.com/problems/h-index/" target="_blank" rel="external">H-Index</a>: What if the <code>citations</code> array is sorted in ascending order? Could you optimize your algorithm?</p>
<p><strong>Hint:</strong></p>
<ol>
<li>Expected runtime complexity is in <em>O</em>(log <em>n</em>) and the input is sorted.</li>
</ol>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p><a href="https://discuss.leetcode.com/topic/23399/standard-binary-search" target="_blank" rel="external">https://discuss.leetcode.com/topic/23399/standard-binary-search</a></p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> len=citations.length;</div><div class="line">        <span class="keyword">int</span> end=len-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(start&lt;=end)&#123;</div><div class="line">            <span class="keyword">int</span> mid=(start+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(citations[mid]==len-mid) <span class="keyword">return</span> citations[mid];</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(citations[mid]&lt;len-mid) start=mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> end=mid-<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> len-(end+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Binary Search </tag>
            
            <tag> Bucket </tag>
            
            <tag> Sort </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Map && HashSet 操作 ]]></title>
      <url>/2016/10/11/2016-10-11--Map&amp;HashSet-%E6%93%8D%E4%BD%9C%20/</url>
      <content type="html"><![CDATA[<h2 id="HashMap与HashSet区别"><a href="#HashMap与HashSet区别" class="headerlink" title="HashMap与HashSet区别"></a>HashMap与HashSet区别</h2><p>collection框架有自己的接口和实现，主要分为Set接口，List接口和Queue接口。它们有各自的特点，Set的集合里不允许对象有重复的值，List允许有重复，它对集合中的对象进行索引，Queue的工作原理是FCFS算法(First Come, First Serve)。</p>
<h3 id="什么是HashSet"><a href="#什么是HashSet" class="headerlink" title="什么是HashSet"></a>什么是HashSet</h3><p>HashSet实现了Set接口，它不允许集合中有重复的值，当我们提到HashSet时，第一件事情就是在将对象存储在HashSet之前，要先确保对象重写equals()和hashCode()方法，这样才能比较对象的值是否相等，以确保set中没有储存相等的对象。如果我们没有重写这两个方法，将会使用这个方法的默认实现。</p>
<p>添加元素：<strong>public boolean add(Object o)</strong>方法用来在Set中添加元素，当元素值重复时则会立即返回false，如果成功添加的话会返回true。</p>
<h3 id="什么是HashMap"><a href="#什么是HashMap" class="headerlink" title="什么是HashMap"></a>什么是HashMap</h3><p>HashMap实现了Map接口，Map接口对键值对进行映射。Map中不允许重复的键。Map接口有两个基本的实现，HashMap和TreeMap。TreeMap保存了对象的排列次序，而HashMap则不能。HashMap允许键和值为null。HashMap是非synchronized的，但collection框架提供方法能保证HashMap synchronized，这样多个线程同时访问HashMap时，能保证只有一个线程更改Map。</p>
<p>添加元素：<strong>public Object put(Object Key,Object value)</strong>方法用来将元素添加到map中。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th>HashMap</th>
<th>HashSet</th>
</tr>
</thead>
<tbody>
<tr>
<td>HashMap实现了Map接口</td>
<td>HashSet实现了Set接口</td>
</tr>
<tr>
<td>HashMap储存键值对</td>
<td>HashSet仅仅存储对象</td>
</tr>
<tr>
<td>使用put()方法将元素放入map中</td>
<td>使用add()方法将元素放入set中</td>
</tr>
<tr>
<td>HashMap中使用键对象来计算hashcode值</td>
<td>HashSet使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以equals()方法用来判断对象的相等性，如果两个对象不同的话，那么返回false</td>
</tr>
<tr>
<td>HashMap比较快，因为是使用唯一的键来获取对象</td>
<td>HashSet较HashMap来说比较慢</td>
</tr>
<tr>
<td>HashMap比较快，因为是使用唯一的键来获取对象</td>
<td>HashSet较HashMap来说比较慢</td>
</tr>
</tbody>
</table>
<h2 id="HashSet基本操作"><a href="#HashSet基本操作" class="headerlink" title="HashSet基本操作"></a>HashSet基本操作</h2><blockquote>
<p><a href="http://www.52ij.com/jishu/java/99023.html" target="_blank" rel="external">http://www.52ij.com/jishu/java/99023.html</a></p>
</blockquote>
<p><strong>Set example=new HashSet&lt;&gt;()</strong> 新建一个set</p>
<p><strong>set.add(key)</strong> 添加元素</p>
<p><strong>set.isEmpty()</strong> 判断是否为空</p>
<p><strong>set.contains(key)</strong> 判断是否包含key值</p>
<p><strong>set.remove(key)</strong> 从set中删除key值</p>
<p><strong>set.clear()</strong> 删除set中的所有元素</p>
<h2 id="HashMap基本操作"><a href="#HashMap基本操作" class="headerlink" title="HashMap基本操作"></a>HashMap基本操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapDemo03</span></span>&#123; </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123; </div><div class="line">    Map&lt;String,String&gt; map = <span class="keyword">null</span>; <span class="comment">// 声明Map对象，其中key和value的类型为String </span></div><div class="line">    map = <span class="keyword">new</span> HashMap&lt;String,String&gt;() ; </div><div class="line">    map.put(<span class="string">"mldn"</span>,<span class="string">"www.mldn.cn"</span>) ;  <span class="comment">// 增加内容 </span></div><div class="line">    map.put(<span class="string">"zhinangtuan"</span>,<span class="string">"www.zhinangtuan.net.cn"</span>) ;  <span class="comment">// 增加内容 </span></div><div class="line">    map.put(<span class="string">"mldnjava"</span>,<span class="string">"www.mldnjava.cn"</span>) ;  <span class="comment">// 增加内容 </span></div><div class="line">    Set&lt;String&gt; keys = map.keySet() ;  <span class="comment">// 得到全部的key </span></div><div class="line">    Collection&lt;String&gt; values = map.values() ;  <span class="comment">// 得到全部的value </span></div><div class="line">    Iterator&lt;String&gt; iter = keys.iterator() ; </div><div class="line">    <span class="keyword">while</span>(iter.hasNext())&#123; </div><div class="line">      String str = iter.next() ; </div><div class="line">      System.out.print(str + <span class="string">"、"</span>) ; </div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>HashMap\<attribute1,attribute2> example=new HashMap\<a1,a2>()</a1,a2></attribute1,attribute2></strong> </p>
<p>新建map </p>
<p><strong>map.values()</strong> 得到map全部的value</p>
<p><strong>map.keySet()</strong> 得到map的全部key值</p>
<p><strong>map.put(key,value) </strong> 向map中插入键值对</p>
<p><strong>map.get(key)</strong> 从map中获取key对应的value</p>
<p><strong>map.containsKey(key)</strong> 是否包含key</p>
<p><strong>map.containsValue(value)</strong> 是否包含value</p>
<p><strong>map.isEmpty()</strong> map是否为空</p>
<p><strong>map.remove(key)</strong>  从map中删除键值为key的键值对</p>
<p><strong>map.size()</strong> 获得map的大小</p>
<p><strong>map.clear()</strong> 清除map内的所有数据</p>
<p><strong>map.getOrDefault(Object key,V defaultValue)</strong> 假如有key对应值就返回对应值，假如没有就返回default值</p>
<blockquote>
<p><a href="http://javatutorialhq.com/java/util/hashmap-class/getordefault-method-example/" target="_blank" rel="external">How to use getordefault</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Operation </tag>
            
            <tag> Java Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Group Anagrams || Super Pow]]></title>
      <url>/2016/10/10/2016-10-10--Group-Anagrams%20%7C%7C%20-Super-Pow/</url>
      <content type="html"><![CDATA[<h3 id="Group-Anagrams"><a href="#Group-Anagrams" class="headerlink" title="Group Anagrams"></a>Group Anagrams</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given an array of strings, group anagrams together.</p>
<p>For example, given: <code>[&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</code>,<br>Return:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [&quot;ate&quot;, &quot;eat&quot;,&quot;tea&quot;],</div><div class="line">  [&quot;nat&quot;,&quot;tan&quot;],</div><div class="line">  [&quot;bat&quot;]</div><div class="line">]</div></pre></td></tr></table></figure>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><p>将每个字符串排序后的值作为key。假如当前的table中不存在该key，则插入key值和新建List；假如存在的话，直接插入get得到的List中。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</div><div class="line">        <span class="keyword">if</span>(strs.length==<span class="number">0</span>)  <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</div><div class="line">        HashMap&lt;String,List&lt;String&gt;&gt; table=<span class="keyword">new</span> HashMap&lt;String,List&lt;String&gt;&gt;();</div><div class="line">        <span class="keyword">for</span>(String tmp:strs)&#123;</div><div class="line">            <span class="keyword">char</span>[] strarr=tmp.toCharArray();</div><div class="line">            Arrays.sort(strarr);</div><div class="line">            String str=String.valueOf(strarr);</div><div class="line">            <span class="keyword">if</span>(!table.containsKey(str)) table.put(str,<span class="keyword">new</span> ArrayList&lt;String&gt;());</div><div class="line">            table.get(str).add(tmp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;(table.values());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Super-Pow"><a href="#Super-Pow" class="headerlink" title="Super Pow"></a>Super Pow</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Your task is to calculate <em>a**b</em> mod 1337 where <em>a</em> is a positive integer and <em>b</em> is an extremely large positive integer given in the form of an array.</p>
<p><strong>Example1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = 2</div><div class="line">b = [3]</div><div class="line">Result: 8</div></pre></td></tr></table></figure>
<p><strong>Example2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = 2</div><div class="line">b = [1,0]</div><div class="line">Result: 1024</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/50489/c-clean-and-short-solution/7" target="_blank" rel="external">https://discuss.leetcode.com/topic/50489/c-clean-and-short-solution/7</a></p>
</blockquote>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> num=<span class="number">1337</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">superPow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>[] b)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(b.length==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> digit=b[b.length-<span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span>[] remain=Arrays.copyOf(b,b.length-<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> pow(superPow(a,remain),<span class="number">10</span>)*pow(a,digit)%num;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        a%=num;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</div><div class="line">            res=res*a%num;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Math </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Multiply Strings || Excel Sheet Column Title]]></title>
      <url>/2016/10/09/2016-10-09--Multiply-Strings%20%7C%7C%20-Excel-Sheet-Column-Title/</url>
      <content type="html"><![CDATA[<h3 id="Multiply-Strings"><a href="#Multiply-Strings" class="headerlink" title="Multiply Strings"></a>Multiply Strings</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given two numbers represented as strings, return multiplication of the numbers as a string.</p>
<p><strong>Note:</strong></p>
<ul>
<li>The numbers can be arbitrarily large and are non-negative.</li>
<li>Converting the input string to integer is <strong>NOT</strong> allowed.</li>
<li>You should <strong>NOT</strong> use internal library such as <strong>BigInteger</strong>.</li>
</ul>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/30508/easiest-java-solution-with-graph-explanation" target="_blank" rel="external">https://discuss.leetcode.com/topic/30508/easiest-java-solution-with-graph-explanation</a></p>
</blockquote>
<ul>
<li>​</li>
<li>​</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">multiply</span><span class="params">(String num1, String num2)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> m = num1.length(), n = num2.length();</div><div class="line">    <span class="keyword">int</span>[] pos = <span class="keyword">new</span> <span class="keyword">int</span>[m + n];</div><div class="line">   </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">int</span> mul = (num1.charAt(i) - <span class="string">'0'</span>) * (num2.charAt(j) - <span class="string">'0'</span>); </div><div class="line">            <span class="keyword">int</span> p1 = i + j, p2 = i + j + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> sum = mul + pos[p2];</div><div class="line"></div><div class="line">            pos[p1] += sum / <span class="number">10</span>;</div><div class="line">            pos[p2] = (sum) % <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p : pos) <span class="keyword">if</span>(!(sb.length() == <span class="number">0</span> &amp;&amp; p == <span class="number">0</span>)) sb.append(p);</div><div class="line">    <span class="keyword">return</span> sb.length() == <span class="number">0</span> ? <span class="string">"0"</span> : sb.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Excel-Sheet-Column-Title"><a href="#Excel-Sheet-Column-Title" class="headerlink" title="Excel Sheet Column Title"></a>Excel Sheet Column Title</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1 -&gt; A</div><div class="line">2 -&gt; B</div><div class="line">3 -&gt; C</div><div class="line">...</div><div class="line">26 -&gt; Z</div><div class="line">27 -&gt; AA</div><div class="line">28 -&gt; AB</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>26进制转10进制</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><p><strong>Mine</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        StringBuilder res=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">int</span> remain=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(n&gt;<span class="number">26</span>)&#123;</div><div class="line">            remain=n%<span class="number">26</span>;</div><div class="line">            <span class="keyword">if</span>(remain==<span class="number">0</span>)&#123;</div><div class="line">                res.insert(<span class="number">0</span>,<span class="string">'Z'</span>);</div><div class="line">                n--;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                res.insert(<span class="number">0</span>,(<span class="keyword">char</span>)(remain+<span class="number">64</span>));</div><div class="line">            &#125;</div><div class="line">            n/=<span class="number">26</span>;</div><div class="line">        &#125;</div><div class="line">        res.insert(<span class="number">0</span>,(<span class="keyword">char</span>)(n+<span class="number">64</span>));</div><div class="line">        <span class="keyword">return</span> res.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Better</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</div><div class="line">            n--;</div><div class="line">            result.insert(<span class="number">0</span>, (<span class="keyword">char</span>)(<span class="string">'A'</span> + n % <span class="number">26</span>));</div><div class="line">            n /= <span class="number">26</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>### </p>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Math </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Count and Say || Balanced Binary Tree]]></title>
      <url>/2016/10/08/2016-10-08--Count-and-Say%20%7C%7C%20-Balanced-Binary-Tree/</url>
      <content type="html"><![CDATA[<h3 id="Count-and-Say"><a href="#Count-and-Say" class="headerlink" title="Count and Say"></a>Count and Say</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>The count-and-say sequence is the sequence of integers beginning as follows:<br><strong>1, 11, 21, 1211, 111221, …</strong></p>
<p><strong>1</strong> is read off as <strong>“one 1”</strong> or <strong>11</strong>.<br><strong>11</strong> is read off as <strong>“two 1s”</strong> or <strong>21</strong>.<br><strong>21</strong> is read off as <strong>“one 2, then one 1”</strong> or <strong>1211</strong>.<br>Given an integer n, generate the nth sequence.</p>
<p>Note: The sequence of integers will be represented as a string.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>两个StringBuilder:pre/cur保存需要被描述的字符串和当前的字符串</p>
<ul>
<li>count每次计数应该从1开始，因为不可能出现0个的元素</li>
<li>在对一个字符串循环查数结束后，需要<code>current.append(count).append(tmp)</code>由于此时最后一个（一种）字符还没有加入字符串中</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        StringBuilder cur=<span class="keyword">new</span> StringBuilder(<span class="string">"1"</span>);</div><div class="line">        StringBuilder pre;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</div><div class="line">            <span class="keyword">int</span> count=<span class="number">1</span>;</div><div class="line">            pre=cur;</div><div class="line">            cur=<span class="keyword">new</span> StringBuilder();</div><div class="line">            <span class="keyword">char</span> tmp=pre.charAt(<span class="number">0</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,len=pre.length();j&lt;len;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(pre.charAt(j)!=tmp)&#123;</div><div class="line">                    cur.append(count).append(tmp);</div><div class="line">                    count=<span class="number">1</span>;</div><div class="line">                    tmp=pre.charAt(j);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    count++;</div><div class="line">            &#125;</div><div class="line">            cur.append(count).append(tmp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cur.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Balanced-Binary-Tree"><a href="#Balanced-Binary-Tree" class="headerlink" title="Balanced Binary Tree"></a>Balanced Binary Tree</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a binary tree, determine if it is height-balanced.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p><a href="https://discuss.leetcode.com/topic/7798/the-bottom-up-o-n-solution-would-be-better/2" target="_blank" rel="external">https://discuss.leetcode.com/topic/7798/the-bottom-up-o-n-solution-would-be-better/2</a></p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><h5 id="Original-Version"><a href="#Original-Version" class="headerlink" title="Original Version"></a><strong>Original Version</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> res=<span class="keyword">true</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        DFS(root);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(Math.abs(getheight(root.left)-getheight(root.right))&gt;<span class="number">1</span>)</div><div class="line">            res=<span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>)</div><div class="line">            DFS(root.left);</div><div class="line">        <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>)</div><div class="line">            DFS(root.right);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getheight</span><span class="params">(TreeNode node)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> Math.max(getheight(node.right),getheight(node.left))+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="Top-Down-Method"><a href="#Top-Down-Method" class="headerlink" title="Top-Down Method"></a>Top-Down Method</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">int</span> height=Math.abs(depth(root.left)-depth(root.right));</div><div class="line">        <span class="keyword">return</span> height&lt;=<span class="number">1</span>&amp;&amp;isBalanced(root.left)&amp;&amp;isBalanced(root.right);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode node)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> Math.max(depth(node.left),depth(node.right))+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="Down-Top-Method"><a href="#Down-Top-Method" class="headerlink" title="Down-Top Method"></a>Down-Top Method</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> DFS(root)!=-<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">DFS</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> lh=DFS(root.left);</div><div class="line">        <span class="keyword">if</span>(lh==-<span class="number">1</span>)   <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> rh=DFS(root.right);</div><div class="line">        <span class="keyword">if</span>(rh==-<span class="number">1</span>)   <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(Math.abs(lh-rh)&gt;<span class="number">1</span>)   <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> Math.max(DFS(root.left),DFS(root.right))+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> String </tag>
            
            <tag> BST </tag>
            
            <tag> AVL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Decode String || Surrounded Regions]]></title>
      <url>/2016/10/06/2016-10-06--Decode-String%20%7C%7C%20-Surrounded-Regions/</url>
      <content type="html"><![CDATA[<h3 id="Decode-String"><a href="#Decode-String" class="headerlink" title="Decode String"></a>Decode String</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given an encoded string, return it’s decoded string.</p>
<p>The encoding rule is: <strong>k[encoded_string]</strong>, where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p>
<p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>
<p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like <strong>3a</strong> or <strong>2[4]</strong>.</p>
<p><strong>Examples:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s = &quot;3[a]2[bc]&quot;, return &quot;aaabcbc&quot;.</div><div class="line">s = &quot;3[a2[c]]&quot;, return &quot;accaccacc&quot;.</div><div class="line">s = &quot;2[abc]3[cd]ef&quot;, return &quot;abcabccdcdcdef&quot;.</div></pre></td></tr></table></figure>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><ul>
<li>遇到数字压入栈count中，注意数字可能<strong>不止一位</strong></li>
<li>遇到字母衔接到结果字符串res后</li>
<li>遇到[，将当前的结果字符串res压入栈中保存，并且将res置空，方便后续重复字符串的赋值</li>
<li>遇到]，弹出count与str栈顶元素，在str栈顶元素后衔接count个当前的res，最后将所得字符串赋值给res</li>
<li>直接在结果字符串处理，可以方便只有一个的字符串直接衔接在res后</li>
</ul>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        String res=<span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        Stack&lt;Integer&gt; cnt=<span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        Stack&lt;String&gt; str=<span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        <span class="keyword">char</span>[] strarr=s.toCharArray();</div><div class="line">        <span class="keyword">while</span>(i&lt;s.length())&#123;</div><div class="line">            <span class="keyword">if</span>(Character.isDigit(strarr[i]))&#123;</div><div class="line">                <span class="keyword">int</span> num=<span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span>(Character.isDigit(strarr[i]))&#123;</div><div class="line">                    num=num*<span class="number">10</span>+(strarr[i]-<span class="string">'0'</span>);</div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line">                cnt.push(num);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(strarr[i]==<span class="string">'['</span>)&#123;</div><div class="line">                str.push(res);</div><div class="line">                res=<span class="string">""</span>;</div><div class="line">                i++;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(strarr[i]==<span class="string">']'</span>)&#123;</div><div class="line">                <span class="keyword">int</span> count=cnt.pop();</div><div class="line">                StringBuilder strpop=<span class="keyword">new</span> StringBuilder(str.pop());</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;count;j++)&#123;</div><div class="line">                    strpop.append(res);</div><div class="line">                &#125;</div><div class="line">                res=strpop.toString();</div><div class="line">                i++;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                res+=strarr[i];</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Surrounded-Regions"><a href="#Surrounded-Regions" class="headerlink" title="Surrounded Regions"></a>Surrounded Regions</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Given a 2D board containing <code>&#39;X&#39;</code> and <code>&#39;O&#39;</code> (the <strong>letter</strong> O), capture all regions surrounded by <code>&#39;X&#39;</code>.</p>
<p>A region is captured by flipping all <code>&#39;O&#39;</code>s into <code>&#39;X&#39;</code>s in that surrounded region.</p>
<p>For example,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">X X X X</div><div class="line">X O O X</div><div class="line">X X O X</div><div class="line">X O X X</div></pre></td></tr></table></figure>
<p>After running your function, the board should be:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">X X X X</div><div class="line">X X X X</div><div class="line">X X X X</div><div class="line">X O X X</div></pre></td></tr></table></figure>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><p>找到位于最外四条边的O，由其出发进行BFS，将该过程中所有遇到的O均改变为#，最后遍历整个方阵。将其中的#改为O，其余的都变为X</p>
<ul>
<li>用visited实现的方法很蠢，没有意义- -</li>
<li>BFS中需要控制边界的条件，首先判断i/j的加一或减一操作后是否会有越界，再分四种状况进行BFS</li>
</ul>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> row=board.length;</div><div class="line">        <span class="keyword">if</span>(row&lt;<span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> col=board[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">if</span>(col&lt;<span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">boolean</span>[][] visited=<span class="keyword">new</span> <span class="keyword">boolean</span>[row][col];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)</div><div class="line">            Arrays.fill(visited[i],<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(board[i][<span class="number">0</span>]==<span class="string">'O'</span>)&#123;</div><div class="line">                visited[i][<span class="number">0</span>]=<span class="keyword">true</span>;</div><div class="line">                BFS(board,visited,i,<span class="number">0</span>,row,col);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(board[i][col-<span class="number">1</span>]==<span class="string">'O'</span>)&#123;</div><div class="line">                visited[i][col-<span class="number">1</span>]=<span class="keyword">true</span>;</div><div class="line">                BFS(board,visited,i,col-<span class="number">1</span>,row,col);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;col;j++)&#123;</div><div class="line">            <span class="keyword">if</span>(board[<span class="number">0</span>][j]==<span class="string">'O'</span>)&#123;</div><div class="line">                visited[<span class="number">0</span>][j]=<span class="keyword">true</span>;</div><div class="line">                BFS(board,visited,<span class="number">0</span>,j,row,col);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(board[row-<span class="number">1</span>][j]==<span class="string">'O'</span>)&#123;</div><div class="line">                visited[row-<span class="number">1</span>][j]=<span class="keyword">true</span>;</div><div class="line">                BFS(board,visited,row-<span class="number">1</span>,j,row,col);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;col;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(!visited[i][j])</div><div class="line">                    board[i][j]=<span class="string">'X'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">boolean</span>[][] visited, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;<span class="number">1</span>&amp;&amp;board[i-<span class="number">1</span>][j]==<span class="string">'O'</span>&amp;&amp;!visited[i-<span class="number">1</span>][j])&#123;</div><div class="line">            visited[i-<span class="number">1</span>][j]=<span class="keyword">true</span>;</div><div class="line">            BFS(board,visited,i-<span class="number">1</span>,j,row,col);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(i&lt;row-<span class="number">1</span>&amp;&amp;board[i+<span class="number">1</span>][j]==<span class="string">'O'</span>&amp;&amp;!visited[i+<span class="number">1</span>][j])&#123;</div><div class="line">            visited[i+<span class="number">1</span>][j]=<span class="keyword">true</span>;</div><div class="line">            BFS(board,visited,i+<span class="number">1</span>,j,row,col);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(j&gt;<span class="number">1</span>&amp;&amp;board[i][j-<span class="number">1</span>]==<span class="string">'O'</span>&amp;&amp;!visited[i][j-<span class="number">1</span>])&#123;</div><div class="line">            visited[i][j-<span class="number">1</span>]=<span class="keyword">true</span>;</div><div class="line">            BFS(board,visited,i,j-<span class="number">1</span>,row,col);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(j&lt;col-<span class="number">1</span>&amp;&amp;board[i][j+<span class="number">1</span>]==<span class="string">'O'</span>&amp;&amp;!visited[i][j+<span class="number">1</span>])&#123;</div><div class="line">            visited[i][j+<span class="number">1</span>]=<span class="keyword">true</span>;</div><div class="line">            BFS(board,visited,i,j+<span class="number">1</span>,row,col);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> BFS </tag>
            
            <tag> Stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Same Tree || Symmetric Tree]]></title>
      <url>/2016/10/05/2016-10-05--Same-Tree%20%7C%7C%20-Symmetric-Tree/</url>
      <content type="html"><![CDATA[<h3 id="Same-Tree"><a href="#Same-Tree" class="headerlink" title="Same Tree"></a>Same Tree</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given two binary trees, write a function to check if they are equal or not.</p>
<p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(p==<span class="keyword">null</span>&amp;&amp;q==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>((p==<span class="keyword">null</span>&amp;&amp;q!=<span class="keyword">null</span>)||(p!=<span class="keyword">null</span>&amp;&amp;q==<span class="keyword">null</span>)||(p.val!=q.val))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> isSameTree(p.left,q.left)&amp;&amp;isSameTree(p.right,q.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Symmetric-Tree"><a href="#Symmetric-Tree" class="headerlink" title="Symmetric Tree"></a>Symmetric Tree</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
<p>For example, this binary tree [1,2,2,3,4,4,3] is symmetric:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    1</div><div class="line">   / \</div><div class="line">  2   2</div><div class="line"> / \ / \</div><div class="line">3  4 4  3</div></pre></td></tr></table></figure>
<p>But the following [1,2,2,null,3,null,3] is not:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  1</div><div class="line"> / \</div><div class="line">2   2</div><div class="line"> \   \</div><div class="line"> 3    3</div></pre></td></tr></table></figure></p>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> helper(root.left,root.right);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode lt, TreeNode rt)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(lt==<span class="keyword">null</span>&amp;&amp;rt==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>((lt==<span class="keyword">null</span>&amp;&amp;rt!=<span class="keyword">null</span>)||(lt!=<span class="keyword">null</span>&amp;&amp;rt==<span class="keyword">null</span>)||(lt.val!=rt.val))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> helper(lt.left,rt.right)&amp;&amp;helper(lt.right,rt.left);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Tree </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Linked List Random Node || Random Pick Index]]></title>
      <url>/2016/10/03/2016-10-03--Linked-List-Random-Node%20%7C%7C%20-Random-Pick-Index/</url>
      <content type="html"><![CDATA[<h3 id="Linked-List-Random-Node"><a href="#Linked-List-Random-Node" class="headerlink" title="Linked List Random Node"></a>Linked List Random Node</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given a singly linked list, return a random node’s value from the linked list. Each node must have the same probability of being chosen.</p>
<p><strong>Follow up:</strong><br>What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// Init a singly linked list [1,2,3].</div><div class="line">ListNode head = new ListNode(1);</div><div class="line">head.next = new ListNode(2);</div><div class="line">head.next.next = new ListNode(3);</div><div class="line">Solution solution = new Solution(head);</div><div class="line">// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.</div><div class="line">solution.getRandom();</div></pre></td></tr></table></figure>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><p>朴素做法是遍历数组得到len后，根据len生成随机数从中任取一个，即每个节点被选择的概率都相同。但是follow up中提示链表的长度未知，可能很长，所以利用<a href="https://zh.wikipedia.org/wiki/水塘抽樣" target="_blank" rel="external">水塘抽样</a>即可在遍历的同时以均等的概率选取节点。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/** <span class="doctag">@param</span> head The linked list's head.</span></div><div class="line">        Note that the head is guaranteed to be not null, so it contains at least one node. */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.head=head;</div><div class="line">            <span class="keyword">this</span>.rand=<span class="keyword">new</span> Random();</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Returns a random node's value. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> res=head.val;</div><div class="line">        ListNode p=head.next;</div><div class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(rand.nextInt(i)==<span class="number">0</span>)</div><div class="line">                res=p.val;</div><div class="line">            i++;</div><div class="line">            p=p.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ListNode head;</div><div class="line">    <span class="keyword">private</span> Random rand;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your Solution object will be instantiated and called as such:</div><div class="line"> * Solution obj = new Solution(head);</div><div class="line"> * int param_1 = obj.getRandom();</div><div class="line"> */</div></pre></td></tr></table></figure>
<h3 id="Random-Pick-Index"><a href="#Random-Pick-Index" class="headerlink" title="Random Pick Index"></a>Random Pick Index</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.</p>
<p><strong>Note:</strong><br>The array size can be very large. Solution that uses too much extra space will not pass the judge.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int[] nums = new int[] &#123;1,2,3,3,3&#125;;</div><div class="line">Solution solution = new Solution(nums);</div><div class="line">// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.</div><div class="line">solution.pick(3);</div><div class="line">// pick(1) should return 0. Since in the array only nums[0] is equal to 1.</div><div class="line">solution.pick(1);</div></pre></td></tr></table></figure>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.rand=<span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">this</span>.number=nums;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pick</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> count=<span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;number.length)&#123;</div><div class="line">            <span class="keyword">if</span>(number[i]==target&amp;&amp;flag)&#123;</div><div class="line">                res=i;</div><div class="line">                flag=<span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(number[i]==target)&#123;</div><div class="line">                <span class="keyword">if</span>(rand.nextInt(count)==<span class="number">0</span>)</div><div class="line">                    res=i;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Random rand;</div><div class="line">    <span class="keyword">int</span>[] number;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your Solution object will be instantiated and called as such:</div><div class="line"> * Solution obj = new Solution(nums);</div><div class="line"> * int param_1 = obj.pick(target);</div><div class="line"> */</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Reservoir Sampling </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Pascal's Triangle || Pascal's Triangle II]]></title>
      <url>/2016/10/02/2016-10-02--Pascals-Triangle%20%7C%7C%20-Pascals-Triangle-II/</url>
      <content type="html"><![CDATA[<h3 id="Pascal’s-Triangle"><a href="#Pascal’s-Triangle" class="headerlink" title="Pascal’s Triangle"></a>Pascal’s Triangle</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given numRows, generate the first numRows of Pascal’s triangle.</p>
<p>For example, given numRows = 5,<br>Return</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">     [1],</div><div class="line">    [1,1],</div><div class="line">   [1,2,1],</div><div class="line">  [1,3,3,1],</div><div class="line"> [1,4,6,4,1]</div><div class="line">]</div></pre></td></tr></table></figure>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><p>利用pre保存上一行的数据，注意循环边界条件的设定</p>
<ul>
<li>外层循环，i从2开始，由于第一行是从1开始而非0，即此循环应从第二行开始</li>
<li>内层循环，j从1开始，由于每次是j-1与j相加</li>
</ul>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span>(numRows&lt;=<span class="number">0</span>)  </div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        List&lt;Integer&gt; pre=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        pre.add(<span class="number">1</span>);</div><div class="line">        result.add(pre);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=numRows;i++)&#123;</div><div class="line">            List&lt;Integer&gt; cur=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            cur.add(<span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=pre.size()-<span class="number">1</span>;j++)</div><div class="line">                cur.add(pre.get(j-<span class="number">1</span>)+pre.get(j));</div><div class="line">            cur.add(<span class="number">1</span>);</div><div class="line">            result.add(cur);</div><div class="line">            pre=cur;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Pascal’s-Triangle-II"><a href="#Pascal’s-Triangle-II" class="headerlink" title="Pascal’s Triangle II"></a>Pascal’s Triangle II</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Given an index k, return the kth row of the Pascal’s triangle.</p>
<p>For example, given k = 3,<br>Return [1,3,3,1].</p>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><p>同I，只不过可以采用同一个List保存结果，为了防止上一行的数据被提前覆盖，故从后向前填充当前行的数据</p>
<ul>
<li>j循环从倒数第一个元素也就是i-1开始，而每次填充到当前j的元素是上一行位于j与j-1的元素和</li>
</ul>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; result=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">if</span>(rowIndex&lt;<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        result.add(<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=rowIndex;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i-<span class="number">1</span>;j&gt;<span class="number">0</span>;j--)</div><div class="line">                result.set(j,result.get(j)+result.get(j-<span class="number">1</span>));</div><div class="line">            result.add(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Sort Colors || Simplify Path]]></title>
      <url>/2016/09/30/Sort%20Colors/</url>
      <content type="html"><![CDATA[<h3 id="Sort-Colors"><a href="#Sort-Colors" class="headerlink" title="Sort Colors"></a>Sort Colors</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>
<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><p>若是采用遍历统计各颜色个数的方法，需要遍历一次，填充数组一次。所以采用两个指针，代表当前red、blue颜色的位置，当i指针扫描到这两种颜色的时候与其交换，最终通过one pass得到有序的数组。</p>
<ul>
<li>i所扫描过的都是有序的，而且start(red的指针)永远小于等于i，所以在交换完red颜色后i++，当前交换得来的元素无需再次判断。</li>
<li>但在与end(blue的指针)交换的时候，i不动，因为可能交换来的也是一个blue</li>
<li>在既不是red又不是blue的时候i直接移动</li>
</ul>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> size=nums.length;</div><div class="line">       <span class="keyword">int</span> start=<span class="number">0</span>,end=size-<span class="number">1</span>;</div><div class="line">       <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">       <span class="keyword">while</span>(i&lt;end+<span class="number">1</span>)&#123;</div><div class="line">           <span class="keyword">if</span>(nums[i]==<span class="number">0</span>)&#123;</div><div class="line">               swap(nums,i,start);</div><div class="line">               start++;</div><div class="line">               i++;</div><div class="line">               <span class="keyword">continue</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]==<span class="number">2</span>)&#123;</div><div class="line">               swap(nums,i,end);</div><div class="line">               end--;</div><div class="line">               <span class="keyword">continue</span>;</div><div class="line">           &#125;</div><div class="line">           i++;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[]nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> tmp=nums[a];</div><div class="line">        nums[a]=nums[b];</div><div class="line">        nums[b]=tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Simplify-Path"><a href="#Simplify-Path" class="headerlink" title="Simplify Path"></a>Simplify Path</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Given an absolute path for a file (Unix-style), simplify it.</p>
<p>For example,<br><code>path = &quot;/home/&quot;, =&gt; &quot;/home&quot;</code><br><code>path = &quot;/a/./b/../../c/&quot;, =&gt; &quot;/c&quot;</code></p>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><p>利用split将字符串分隔开，判断每个子串后决定下一步操作</p>
<ul>
<li>split内可利用正则表达式</li>
<li>res需要有初值”/“，用以应对输入为”/“的用例</li>
<li>size&gt;0与str[i].equals(“..”)不可用&amp;&amp;连接后加入同一个if，这样会在size&lt;=0的时候跳转到下一个if，并将<strong>..</strong>假如到结果中</li>
<li>最后截去结果的最后一个字符，因为会多一个’/‘</li>
<li>!str[i].equals(“”)用以处理两个’/‘连续的情况</li>
</ul>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">simplifyPath</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">        String[] str=path.split(<span class="string">"/+"</span>);</div><div class="line">        String res=<span class="string">"/"</span>;</div><div class="line">        ArrayList&lt;String&gt; result=<span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</div><div class="line">            <span class="keyword">int</span> size=result.size();</div><div class="line">            <span class="keyword">if</span>(str[i].equals(<span class="string">".."</span>))&#123;</div><div class="line">                <span class="keyword">if</span>(size&gt;<span class="number">0</span>)</div><div class="line">                    result.remove(size-<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!str[i].equals(<span class="string">"."</span>)&amp;&amp;!str[i].equals(<span class="string">""</span>))</div><div class="line">                result.add(str[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(String s:result)&#123;</div><div class="line">            res+=s+<span class="string">'/'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(res.length()&gt;<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> res.substring(<span class="number">0</span>,res.length()-<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Array </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Integer to Roman || Integer to English Words]]></title>
      <url>/2016/09/21/2016-09-21--Integer-to-Roman%20%7C%7C%20-Integer-to-English-Words/</url>
      <content type="html"><![CDATA[<h3 id="Integer-to-Roman"><a href="#Integer-to-Roman" class="headerlink" title="Integer to Roman"></a>Integer to Roman</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given an integer, convert it to a roman numeral.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><p>罗马数字的构成方法在之前的<strong>Roman to Integer</strong>整理了</p>
<ul>
<li>由于数字大小控制在了4000以下，所以可能包含的数字组合情况较少，可以直接用数组进行枚举，能放在左侧且被减去的罗马字母只有<strong>X、I、C</strong></li>
<li>贪心策略，每次选取最大的可选数字从num中减去，并且加相应的罗马数字加入字符串中</li>
</ul>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        String[] roman=<span class="keyword">new</span> String[]&#123;<span class="string">"M"</span>,<span class="string">"CM"</span>,<span class="string">"D"</span>,<span class="string">"CD"</span>,<span class="string">"C"</span>,<span class="string">"XC"</span>,<span class="string">"L"</span>,<span class="string">"XL"</span>,<span class="string">"X"</span>,<span class="string">"IX"</span>,<span class="string">"V"</span>,<span class="string">"IV"</span>,<span class="string">"I"</span>&#125;;</div><div class="line">        <span class="keyword">int</span>[] number=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1000</span>,<span class="number">900</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</div><div class="line">        StringBuilder result=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;number.length;i++)&#123;</div><div class="line">            <span class="keyword">while</span>(num&gt;=number[i])&#123;</div><div class="line">                num-=number[i];</div><div class="line">                result.append(roman[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Integer-to-English-Words"><a href="#Integer-to-English-Words" class="headerlink" title="Integer to English Words"></a>Integer to English Words</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 231 - 1.</p>
<p>For example,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">123 -&gt; &quot;One Hundred Twenty Three&quot;</div><div class="line">12345 -&gt; &quot;Twelve Thousand Three Hundred Forty Five&quot;</div><div class="line">1234567 -&gt; &quot;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&quot;</div></pre></td></tr></table></figure>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><p>Hint中已经给出提示将相应的数字三个一组分组后再进行考虑，故在对数字分组后调用辅助函数<strong>process</strong>处理将所得返回串加至result</p>
<ul>
<li>为了方便在数字的枚举数组中找到对应的数字，在<strong>num1</strong>中补一个空位代表0，在<strong>num2</strong>中补两个空位分别代表0，10</li>
<li>对于每个单词间的空格，1000以上的数字统一末尾不加空格，而process中的数字统一在字符串首部加空格</li>
<li>process函数分为三种情况<ul>
<li>num&gt;=100: 百位hundred，由于thousand的个数也会存在上百个的情况，所以必须放在process内,且<strong>注意需要有等号</strong></li>
<li>num\<100&&num>=20: 此时需要将十位与个位数分离，分别到num1、num2中找到加入字符串value中，同样需要<strong>注意边界条件num&gt;=20</strong></100&&num></li>
<li>num&lt;20: 直接到num1中找到加入字符串即可</li>
</ul>
</li>
</ul>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">numberToWords</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        StringBuilder result=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">if</span>(num==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">"Zero"</span>;</div><div class="line">        <span class="keyword">if</span>(num&gt;=<span class="number">1000000000</span>)&#123;</div><div class="line">            result.append(process(num/<span class="number">1000000000</span>)+<span class="string">" "</span>+<span class="string">"Billion"</span>);</div><div class="line">            num=num%<span class="number">1000000000</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(num&gt;=<span class="number">1000000</span>)&#123;</div><div class="line">            result.append(process(num/<span class="number">1000000</span>)+<span class="string">" "</span>+<span class="string">"Million"</span>);</div><div class="line">            num=num%<span class="number">1000000</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(num&gt;=<span class="number">1000</span>)&#123;</div><div class="line">            result.append(process(num/<span class="number">1000</span>)+<span class="string">" "</span>+<span class="string">"Thousand"</span>);</div><div class="line">            num=num%<span class="number">1000</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</div><div class="line">            result.append(process(num));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result.toString().trim();</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">process</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        String[] num1=<span class="keyword">new</span> String[]&#123;<span class="string">" "</span>,<span class="string">"One"</span>, <span class="string">"Two"</span>, <span class="string">"Three"</span>, <span class="string">"Four"</span>, <span class="string">"Five"</span>, <span class="string">"Six"</span>, <span class="string">"Seven"</span>, <span class="string">"Eight"</span>, <span class="string">"Nine"</span>, <span class="string">"Ten"</span>, <span class="string">"Eleven"</span>, <span class="string">"Twelve"</span>, <span class="string">"Thirteen"</span>, <span class="string">"Fourteen"</span>, <span class="string">"Fifteen"</span>, <span class="string">"Sixteen"</span>, <span class="string">"Seventeen"</span>, <span class="string">"Eighteen"</span>, <span class="string">"Nineteen"</span>&#125;;</div><div class="line">        String[] num2=<span class="keyword">new</span> String[]&#123;<span class="string">" "</span>,<span class="string">" "</span>,<span class="string">"Twenty"</span>, <span class="string">"Thirty"</span>, <span class="string">"Forty"</span>, <span class="string">"Fifty"</span>, <span class="string">"Sixty"</span>, <span class="string">"Seventy"</span>, <span class="string">"Eighty"</span>, <span class="string">"Ninety"</span>&#125;;</div><div class="line">        StringBuilder value=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">if</span>(num&gt;=<span class="number">100</span>)&#123;</div><div class="line">            <span class="keyword">int</span> hundred=num/<span class="number">100</span>;</div><div class="line">            value.append(<span class="string">" "</span>+num1[hundred]+<span class="string">" "</span>+<span class="string">"Hundred"</span>);</div><div class="line">            num=num%<span class="number">100</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(num&gt;=<span class="number">20</span>&amp;&amp;num&lt;<span class="number">100</span>)&#123;</div><div class="line">            <span class="keyword">int</span> single=num%<span class="number">10</span>;</div><div class="line">            <span class="keyword">int</span> doubledigit=num/<span class="number">10</span>;</div><div class="line">            <span class="keyword">if</span>(single!=<span class="number">0</span>)</div><div class="line">                value.append(<span class="string">" "</span>+num2[doubledigit]+<span class="string">" "</span>+num1[single]);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                value.append(<span class="string">" "</span>+num2[doubledigit]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(num&lt;<span class="number">20</span>&amp;&amp;num&gt;<span class="number">0</span>)</div><div class="line">            value.append(<span class="string">" "</span>+num1[num]);</div><div class="line">        <span class="keyword">return</span> value.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Fraction to Recurring Decimal || 3Sum Closest]]></title>
      <url>/2016/09/20/2016-09-20--Fraction-to-Recurring-Decimal-%20%7C%7C%20-3Sum-Closest/</url>
      <content type="html"><![CDATA[<h3 id="Fraction-to-Recurring-Decimal"><a href="#Fraction-to-Recurring-Decimal" class="headerlink" title="Fraction to Recurring Decimal"></a>Fraction to Recurring Decimal</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.</p>
<p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>
<p>For example,</p>
<p>Given numerator = 1, denominator = 2, return “0.5”.<br>Given numerator = 2, denominator = 1, return “2”.<br>Given numerator = 2, denominator = 3, return “0.(6)”.</p>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><p>主要难点在于如何找到小数点后的循环部分，并将其以正确的形式写出。</p>
<ul>
<li>利用hashmap记录已有的小数点后数字及其对应下标</li>
<li>将原本的输入变量转换为<strong>long</strong>型，以免后续操作中出现溢出的状况。</li>
<li>通过<strong>异或(^)</strong>判断最终结果是否为负</li>
<li>每次求得余数remain，在下一次处理remain/denom的时候需要*10，已保证每次进行操作的被除数都包含整数部分。</li>
<li>当在<strong>hashmap</strong>中发现已存的小数时，找到第一个重复<strong>remain</strong>的下标tmp。则substring(0,tmp)为重复小数部分之前的部分，而substring(tmp,len(result))则为剩余应该包含在括号内的部分。</li>
</ul>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fractionToDecimal</span><span class="params">(<span class="keyword">int</span> numerator, <span class="keyword">int</span> denominator)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(numerator==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</div><div class="line">        <span class="keyword">if</span>(denominator==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">            </div><div class="line">        <span class="keyword">long</span> num=numerator,denom=denominator;</div><div class="line">        num=Math.abs(num);</div><div class="line">        denom=Math.abs(denom);</div><div class="line">        HashMap&lt;Long,Integer&gt; flag=<span class="keyword">new</span> HashMap&lt;Long,Integer&gt;();</div><div class="line">        </div><div class="line">        StringBuilder result=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">if</span>((numerator&lt;<span class="number">0</span>)^(denominator&lt;<span class="number">0</span>))</div><div class="line">            result.append(<span class="string">"-"</span>);</div><div class="line">        result.append(num/denom);</div><div class="line">      </div><div class="line">        </div><div class="line">        <span class="keyword">long</span> remain=(num%denom)*<span class="number">10</span>;</div><div class="line">        <span class="keyword">if</span>(remain==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> result.toString();</div><div class="line">        result.append(<span class="string">"."</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(remain!=<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(flag.containsKey(remain))&#123;</div><div class="line">                String tmp1=result.toString().substring(<span class="number">0</span>,flag.get(remain));</div><div class="line">                String tmp2=result.toString().substring(flag.get(remain),result.length());</div><div class="line">                result.delete(<span class="number">0</span>,result.length());</div><div class="line">                result.append(tmp1+<span class="string">"("</span>+tmp2+<span class="string">")"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            flag.put(remain,result.length());</div><div class="line">            result.append(remain/denom);</div><div class="line">            remain=(remain%denom)*<span class="number">10</span>;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3Sum-Closest"><a href="#3Sum-Closest" class="headerlink" title="3Sum Closest"></a>3Sum Closest</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>
<pre><code>For example, given array S = {-1 2 1 -4}, and target = 1.
The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
</code></pre><h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><ul>
<li>最后返回加和，不需要保存下标，故只需保存与target差距最小的值max</li>
<li>对数组排序后，在low&lt;high的条件下，判断当前和值与target的差值是否小于max，是则赋值，否则若sum&lt;target，移动low下标，否则移动high下表</li>
</ul>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size=nums.length;</div><div class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span>||size&lt;<span class="number">3</span>)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> sum=nums[<span class="number">0</span>]+nums[<span class="number">1</span>]+nums[<span class="number">2</span>];</div><div class="line">        <span class="keyword">int</span> max=sum;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</div><div class="line">            <span class="keyword">int</span> low=i+<span class="number">1</span>,high=size-<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(low&lt;high)&#123;</div><div class="line">                sum=nums[i]+nums[low]+nums[high];</div><div class="line">                <span class="keyword">if</span>(Math.abs(sum-target)&lt;Math.abs(max-target))&#123;</div><div class="line">                    max=sum;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;target)&#123;</div><div class="line">                    low++;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    high--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Two Pointer </tag>
            
            <tag> HashTable </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Range Sum Query - Immutable || Range Sum Query 2D - Immutable]]></title>
      <url>/2016/09/19/2016-09-19--Range-Sum-Query---Immutable%20%7C%7C%20-Range-Sum-Query-2D---Immutable/</url>
      <content type="html"><![CDATA[<h3 id="Range-Sum-Query-Immutable"><a href="#Range-Sum-Query-Immutable" class="headerlink" title="Range Sum Query - Immutable"></a>Range Sum Query - Immutable</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Given nums = [-2, 0, 3, -5, 2, -1]</div><div class="line">sumRange(0, 2) -&gt; 1</div><div class="line">sumRange(2, 5) -&gt; -1</div><div class="line">sumRange(0, 5) -&gt; -3</div></pre></td></tr></table></figure>
<p><strong>Note:</strong><br>You may assume that the array does not change.<br>There are many calls to sumRange function.</p>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><ul>
<li>假如每次调用sumRange的时候相加会导致TLE，所以采用动态规划</li>
<li>sum数组为当前脚标到脚标0的所有数字的加和，则<strong>SumRange=sum[j]-sum[i-1]</strong>,<code>注意是i-1，因为需要包含脚标i的值</code></li>
</ul>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] sum;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size=nums.length;</div><div class="line">        sum=<span class="keyword">new</span> <span class="keyword">int</span>[size];</div><div class="line">        <span class="keyword">int</span> tmp=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</div><div class="line">            tmp+=nums[i];</div><div class="line">            sum[i]=tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> i==<span class="number">0</span>?sum[j]:sum[j]-sum[i-<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Your NumArray object will be instantiated and called as such:</span></div><div class="line"><span class="comment">// NumArray numArray = new NumArray(nums);</span></div><div class="line"><span class="comment">// numArray.sumRange(0, 1);</span></div><div class="line"><span class="comment">// numArray.sumRange(1, 2);</span></div></pre></td></tr></table></figure>
<h3 id="Range-Sum-Query-2D-Immutable"><a href="#Range-Sum-Query-2D-Immutable" class="headerlink" title="Range Sum Query 2D - Immutable"></a>Range Sum Query 2D - Immutable</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Given a 2D matrix matrix, <img src="/../img/post/range_sum_2d.png" alt="pic">find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).</p>
<p>Range Sum Query 2D<br>The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">Given matrix = [</div><div class="line">  [3, 0, 1, 4, 2],</div><div class="line">  [5, 6, 3, 2, 1],</div><div class="line">  [1, 2, 0, 1, 5],</div><div class="line">  [4, 1, 0, 1, 7],</div><div class="line">  [1, 0, 3, 0, 5]</div><div class="line">]</div><div class="line">sumRegion(2, 1, 4, 3) -&gt; 8</div><div class="line">sumRegion(1, 1, 2, 2) -&gt; 11</div><div class="line">sumRegion(1, 2, 2, 4) -&gt; 12</div></pre></td></tr></table></figure>
<p><strong>Note:</strong><br>You may assume that the matrix does not change.<br>There are many calls to sumRegion function.<br>You may assume that row1 ≤ row2 and col1 ≤ col2.</p>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><ul>
<li>二维数组dp记录当前坐标与坐标(0,0)所包含的全部的数字加和</li>
<li>cal数组需要考虑到第一行与第一列的情况，从而进行计算</li>
<li>在计算sumRegion的时候需要注意最后的求和中，需要对脚标进行-1操作，不可直接通过计算面积的方式考量得出公式。</li>
</ul>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumMatrix</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span>[][] dp;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> rowsize=matrix.length;</div><div class="line">        <span class="keyword">int</span> colsize=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(rowsize!=<span class="number">0</span>)</div><div class="line">            colsize=matrix[<span class="number">0</span>].length;</div><div class="line">        dp=<span class="keyword">new</span> <span class="keyword">int</span>[rowsize][colsize];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rowsize;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;colsize;j++)&#123;</div><div class="line">                cal(matrix,i,j);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>&amp;&amp;j==<span class="number">0</span>)</div><div class="line">            dp[i][j]=matrix[i][j];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>&amp;&amp;j!=<span class="number">0</span>)</div><div class="line">            dp[i][j]=dp[i][j-<span class="number">1</span>]+matrix[i][j];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i!=<span class="number">0</span>&amp;&amp;j==<span class="number">0</span>)</div><div class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j]+matrix[i][j];</div><div class="line">        <span class="keyword">else</span></div><div class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j]+dp[i][j-<span class="number">1</span>]+matrix[i][j]-dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRegion</span><span class="params">(<span class="keyword">int</span> row1, <span class="keyword">int</span> col1, <span class="keyword">int</span> row2, <span class="keyword">int</span> col2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> right_top = row1 &gt; <span class="number">0</span> ? dp[row1-<span class="number">1</span>][col2] : <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> left_bottom = col1 &gt; <span class="number">0</span> ? dp[row2][col1 - <span class="number">1</span>]:<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> left_top = row1 &gt; <span class="number">0</span> &amp;&amp; col1 &gt; <span class="number">0</span> ? dp[row1 - <span class="number">1</span>][col1 - <span class="number">1</span>] : <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> dp[row2][col2] - right_top - left_bottom + left_top;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Your NumMatrix object will be instantiated and called as such:</span></div><div class="line"><span class="comment">// NumMatrix numMatrix = new NumMatrix(matrix);</span></div><div class="line"><span class="comment">// numMatrix.sumRegion(0, 1, 2, 3);</span></div><div class="line"><span class="comment">// numMatrix.sumRegion(1, 2, 3, 4);</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Remove Duplicates from Sorted List || Remove Duplicates from Sorted List II]]></title>
      <url>/2016/09/18/2016-09-18--Remove-Duplicates-from-Sorted-List%20%7C%7C%20-Remove-Duplicates-from-Sorted-List-II/</url>
      <content type="html"><![CDATA[<h3 id="Remove-Duplicates-from-Sorted-List"><a href="#Remove-Duplicates-from-Sorted-List" class="headerlink" title="Remove Duplicates from Sorted List"></a>Remove Duplicates from Sorted List</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given a sorted linked list, delete all duplicates such that each element appear only once.</p>
<p>For example,<br>Given <code>1-&gt;1-&gt;2</code>, return <code>1-&gt;2</code>.<br>Given <code>1-&gt;1-&gt;2-&gt;3-&gt;3</code>, return <code>1-&gt;2-&gt;3</code>.</p>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><ul>
<li>在头节点前加result用以保存原本的头节点</li>
<li>将current指针指到存在重复值的最后一个节点，且在循环过程中，须注意current.next不能为空，因为在循环最后的时候还会挪动current</li>
<li>在循环末尾移动<strong>pre</strong>与current指针</li>
<li>在找到最后一个重复点并赋给current之后，需要将<strong>pre.next</strong>指向它</li>
</ul>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        ListNode result=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">        result.next=head;</div><div class="line">        ListNode pre=result;</div><div class="line">        ListNode cur=head;</div><div class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">while</span>(cur.next!=<span class="keyword">null</span>&amp;&amp;pre.next.val==cur.next.val)&#123;</div><div class="line">                cur=cur.next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(pre.next!=cur)</div><div class="line">                pre.next=cur;</div><div class="line">            pre=pre.next;</div><div class="line">            cur=cur.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Remove-Duplicates-from-Sorted-List-II"><a href="#Remove-Duplicates-from-Sorted-List-II" class="headerlink" title="Remove Duplicates from Sorted List II"></a>Remove Duplicates from Sorted List II</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.</p>
<p>For example,<br>Given <code>1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</code>, return <code>1-&gt;2-&gt;5</code>.<br>Given <code>1-&gt;1-&gt;1-&gt;2-&gt;3</code>, return <code>2-&gt;3</code>.</p>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><ul>
<li>与I不同的是需要删除所有的重复元素，而非只留一个</li>
<li>步骤均同I，唯一不同的是当找到最后一个重复元素并赋值给current后，<strong>pre.next</strong>指向的是<strong>current.next</strong>，除此之外，在pre.next变动之后无需变动pre，因为<strong>pre.next</strong>已经指向了<strong>current.next</strong></li>
</ul>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        ListNode result=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">        result.next=head;</div><div class="line">        ListNode pre=result;</div><div class="line">        ListNode cur=head;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">while</span>(cur.next!=<span class="keyword">null</span>&amp;&amp;pre.next.val==cur.next.val)&#123;</div><div class="line">                cur=cur.next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(pre.next==cur)&#123;  <span class="comment">//没有重复，pre后移</span></div><div class="line">                pre=pre.next;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;              <span class="comment">//有重复，pre不动，中间删除，pre.next指向新的节点</span></div><div class="line">                pre.next=cur.next;</div><div class="line">            &#125;</div><div class="line">            cur=cur.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Linked List </tag>
            
            <tag> Duplicates </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Swap Nodes in Pairs || Palindrome Partitioning II]]></title>
      <url>/2016/09/17/2016-09-17--Swap-Nodes-in-Pairs%20%7C%7C%20-Palindrome-Partitioning-II/</url>
      <content type="html"><![CDATA[<h3 id="Swap-Nodes-in-Pairs"><a href="#Swap-Nodes-in-Pairs" class="headerlink" title="Swap Nodes in Pairs"></a>Swap Nodes in Pairs</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given a linked list, swap every two adjacent nodes and return its head.</p>
<p>For example,<br>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</p>
<p>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><ul>
<li>设置pre指针，指向每次颠倒前的前置指针，在两个变量交换位置后，需要将每对中的第二个变量的next更改为下一对的第二个</li>
<li>tmpnext标记为下一对待交换节点的第一个（起点）</li>
<li>返回结果返回pre的下一个节点开始的链表</li>
</ul>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        ListNode pre=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">        pre.next=head;</div><div class="line">        ListNode tmp1=head;</div><div class="line">        ListNode result=pre;</div><div class="line">        <span class="keyword">while</span>(tmp1!=<span class="keyword">null</span>&amp;&amp;tmp1.next!=<span class="keyword">null</span>)&#123;</div><div class="line">            ListNode tmp2=tmp1.next;</div><div class="line">            ListNode tmpnext=tmp2.next;</div><div class="line">            tmp1.next=tmp2.next;</div><div class="line">            tmp2.next=tmp1;</div><div class="line">            pre.next=tmp2;</div><div class="line">            pre=tmp1;</div><div class="line">            tmp1=tmpnext;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Palindrome-Partitioning-II"><a href="#Palindrome-Partitioning-II" class="headerlink" title="Palindrome Partitioning II"></a>Palindrome Partitioning II</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Given a string s, partition s such that every substring of the partition is a palindrome.</p>
<p>Return the minimum cuts needed for a palindrome partitioning of s.</p>
<p>For example, given s = <code>&quot;aab&quot;</code>,<br>Return <code>1</code> since the palindrome partitioning <code>[&quot;aa&quot;,&quot;b&quot;]</code> could be produced using 1 cut.</p>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><p>题目即找到一个字符串每个子串都是回文的最小划分数。</p>
<ul>
<li>采取<strong>Palindrome Partitioning</strong>题目的解法（循环+DFS）会超时</li>
<li>利用动态规划，一个字符串为回文的条件有两种：1、 脚标为i+1到j-1的子串为回文且s[i]=s[j].      2、s[i]==s[j] 且i、j相邻（j-i&lt;2）</li>
<li>设置dp变量 cuts[len+1]用以记录从脚标i到最后的字符串的最小划分数。当每次判断得s[i][j]为回文是，判断cut[i]与cut[j+1]+1的大小，并取其中较小者。cuts[i]表示从第i位置到第len位置（包含，即[i, len])的切割数（第len位置为空）。 初始时，是len-i。比如给的例子aab，cuts[0]=3，就是最坏情况每一个字符都得切割：a|a|b|’ ‘。cuts[1] = 2, 即从i=1位置开始，a|b|’ ‘。 cuts[2] = 1 b|’ ‘。cuts[3]=0,即第len位置，为空字符，不需要切割。</li>
<li>当字符串[i,j]是回文后，说明从第i个位置到字符串第len位置的最小cut数可以被更新了， 那么就是从j+1位置开始到第len位置的最小cut数加上[i,j]|[j+1,len - 1]中间的这一cut。 即 <strong>Math.min(cuts[i], cuts[j+1]+1)</strong> 。最后返回cuts[0]-1。把多余加的那个对于第len位置的切割去掉，即为最终结果。</li>
</ul>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCut</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size=s.length();</div><div class="line">        <span class="keyword">if</span>(size==<span class="number">1</span>||s==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span>[][] isPalindrome=<span class="keyword">new</span> <span class="keyword">boolean</span>[size][size];</div><div class="line">        <span class="keyword">int</span>[] cut=<span class="keyword">new</span> <span class="keyword">int</span>[size+<span class="number">1</span>];</div><div class="line">        <span class="keyword">char</span>[] stmp=s.toCharArray();</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=size; ++i)&#123;  </div><div class="line">            cut[i] = size-i;  <span class="comment">//cut nums from i to len [i,len]</span></div><div class="line">        &#125;  </div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=size-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;size;j++)&#123;</div><div class="line">                <span class="keyword">if</span>((stmp[i]==stmp[j]&amp;&amp;j-i&lt;<span class="number">2</span>)||(stmp[i]==stmp[j]&amp;&amp;isPalindrome[i+<span class="number">1</span>][j-<span class="number">1</span>]==<span class="keyword">true</span>))&#123;</div><div class="line">                    isPalindrome[i][j]=<span class="keyword">true</span>;</div><div class="line">                    cut[i]=Math.min(cut[j+<span class="number">1</span>]+<span class="number">1</span>,cut[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> cut[<span class="number">0</span>]-<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Palindrome </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Palindrome Linked List || Valid Palindrome || Palindrome Partitioning]]></title>
      <url>/2016/09/13/2016-09-13-Swap-Nodes-in-Pairs%20%7C%7C%20Palindrome-Linked-List/</url>
      <content type="html"><![CDATA[<h3 id="Palindrome-Linked-List"><a href="#Palindrome-Linked-List" class="headerlink" title="Palindrome Linked List"></a>Palindrome Linked List</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given a singly linked list, determine if it is a palindrome.</p>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><p>判断一个链表是否为回文数</p>
<ul>
<li>判断链表节点个数是奇数还是偶数</li>
<li>偶数的情况下，两个指针，p1一次走一步，并将路过的元素都压栈，p2一次走两步，当p2为null时，p1刚好指向链表中点，此时p1接着向下，元素与依次弹栈的元素进行对比，假如不等，则返回false，否则返回true</li>
<li>奇数的情况下，先将p2先后挪一位，其余相同</li>
</ul>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        ListNode onestep=head;</div><div class="line">        ListNode twostep=head;</div><div class="line">        ListNode tmp=head;</div><div class="line">        <span class="keyword">int</span> size=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(tmp!=<span class="keyword">null</span>)&#123;</div><div class="line">            size++;</div><div class="line">            tmp=tmp.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">boolean</span> result=Findmidnode(onestep,twostep,size);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">Findmidnode</span><span class="params">(ListNode tmp1,ListNode tmp2,<span class="keyword">int</span> size)</span></span>&#123;</div><div class="line">        Stack&lt;Integer&gt; stack=<span class="keyword">new</span> Stack();</div><div class="line">        <span class="keyword">if</span>(size%<span class="number">2</span>==<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">while</span>(tmp2!=<span class="keyword">null</span>)&#123;</div><div class="line">                stack.push(tmp1.val);</div><div class="line">                tmp1=tmp1.next;</div><div class="line">                tmp2=tmp2.next.next;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            tmp2=tmp2.next;</div><div class="line">            <span class="keyword">while</span>(tmp2!=<span class="keyword">null</span>)&#123;</div><div class="line">                stack.push(tmp1.val);</div><div class="line">                tmp1=tmp1.next;</div><div class="line">                tmp2=tmp2.next.next;</div><div class="line">            &#125;</div><div class="line">            tmp1=tmp1.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(stack.isEmpty()!=<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(stack.pop()!=tmp1.val)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            tmp1=tmp1.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Valid-Palindrome"><a href="#Valid-Palindrome" class="headerlink" title="Valid Palindrome"></a>Valid Palindrome</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p>For example,<br><code>&quot;A man, a plan, a canal: Panama&quot;</code> is a palindrome.<br><code>&quot;race a car&quot;</code> is not a palindrome.</p>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><p>利用StringBuilder将所有符合条件的字符复制至salpha，之后判断salpha大小，利用<code>toUpperCase</code>将所有的字符转换为大写后判断字符是否相等。</p>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        StringBuilder salpha=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</div><div class="line">            <span class="keyword">if</span>((s.charAt(i)&gt;=<span class="string">'a'</span>&amp;&amp;s.charAt(i)&lt;=<span class="string">'z'</span>)||(s.charAt(i)&gt;=<span class="string">'A'</span>&amp;&amp;s.charAt(i)&lt;=<span class="string">'Z'</span>)||(s.charAt(i)&gt;=<span class="string">'0'</span>&amp;&amp;s.charAt(i)&lt;=<span class="string">'9'</span>))</div><div class="line">                salpha.append(s.charAt(i));</div><div class="line">        &#125;</div><div class="line">        String str=salpha.toString();</div><div class="line">        <span class="keyword">int</span> size_str=str.length();</div><div class="line">        String strupper=str.toUpperCase();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size_str/<span class="number">2</span>;j++)&#123;</div><div class="line">            <span class="keyword">if</span>(strupper.charAt(j)!=strupper.charAt(size_str-j-<span class="number">1</span>))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Palindrome-Partitioning"><a href="#Palindrome-Partitioning" class="headerlink" title="Palindrome Partitioning"></a>Palindrome Partitioning</h3><h5 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h5><p>Given a string s, partition s such that every substring of the partition is a palindrome.</p>
<p>Return all possible palindrome partitioning of s.</p>
<p>For example, given s = “aab”,<br>Return</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [&quot;aa&quot;,&quot;b&quot;],</div><div class="line">  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]</div><div class="line">]</div></pre></td></tr></table></figure>
<h5 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h5><p>DFS</p>
<ul>
<li>从头开始遍历字符串，利用i循环截取不同长度的子串，当截取字符串为回文串时将其加入item，以当前为起点进入下一次调用。</li>
<li>当start等于字符串长度的时候，将item加入result，并且调用结束后逐步将item清空。</li>
<li>List初始化方法：<strong>List<list<string>&gt; res = new ArrayList&lt;&gt;()</list<string></strong></li>
</ul>
<h5 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;String&gt;&gt; partition(String s) &#123;</div><div class="line">        ArrayList&lt;String&gt; item = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>||s.length()==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">        dfs(s,<span class="number">0</span>,item,res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String s, <span class="keyword">int</span> start, ArrayList&lt;String&gt; item, ArrayList&lt;ArrayList&lt;String&gt;&gt; res)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (start == s.length())&#123;</div><div class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;String&gt;(item));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; s.length(); i++) &#123;</div><div class="line">            String str = s.substring(start, i+<span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (isPalindrome(str)) &#123;</div><div class="line">                item.add(str);</div><div class="line">                dfs(s, i+<span class="number">1</span>, item, res);</div><div class="line">                item.remove(item.size() - <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span></span>&#123;</div><div class="line">         <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">         <span class="keyword">int</span> high = s.length()-<span class="number">1</span>;</div><div class="line">         <span class="keyword">while</span>(low &lt; high)&#123;</div><div class="line">             <span class="keyword">if</span>(s.charAt(low) != s.charAt(high))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">             low++;</div><div class="line">             high--;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Palindrome </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Longest Substring Without Repeating Characters || Longest Palindromic Substring]]></title>
      <url>/2016/09/09/2016-09-09-Longest-Substring-Without-Repeating-Characters%20%7C%7C%20Longest-Palindromic-Substring/</url>
      <content type="html"><![CDATA[<h3 id="Longest-Substring-Without-Repeating-Characters"><a href="#Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Longest Substring Without Repeating Characters"></a>Longest Substring Without Repeating Characters</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given a string, find the length of the longest substring without repeating characters.</p>
<p>Examples:</p>
<p>Given “abcabcbb”, the answer is “abc”, which the length is 3.</p>
<p>Given “bbbbb”, the answer is “b”, with the length of 1.</p>
<p>Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><p>该题要求的是返回最长不含重复字符的子串的长度，所以没有必要保存各个符合条件的子串，只需设置变量<strong>maxlength</strong>记录子串的最大长度即可。同时设置<strong>hashset</strong>用以判断是否遇到重复字符。</p>
<p>从第一个字符开始遍历，不重复字符加入<strong>hashset</strong>，当遇到重复字符时，首先通过对比<strong>hashset</strong>和<strong>maxlength</strong>的大小来确定是否需要更新，然后从start开始清除<strong>hashset</strong>中无用的字符直到遇到第一个重复的字符停止，注意这时候需要多清除一位，因为重复的字符还没有被清除。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size=s.length();</div><div class="line">        <span class="keyword">if</span>(size==<span class="number">0</span>||size==<span class="number">1</span>||s==<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> s.length();</div><div class="line">        &#125;</div><div class="line">        HashSet&lt;Character&gt; test=<span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line">        StringBuilder result=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(!test.contains(s.charAt(i)))&#123;</div><div class="line">                test.add(s.charAt(i));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                max=Math.max(test.size(),max);</div><div class="line">                <span class="keyword">while</span>(s.charAt(start)!=s.charAt(i))&#123;</div><div class="line">                    test.remove(s.charAt(start));</div><div class="line">                    start++;</div><div class="line">                &#125;</div><div class="line">                start++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        max = Math.max(max, test.size());</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Longest-Palindromic-Substring"><a href="#Longest-Palindromic-Substring" class="headerlink" title="Longest Palindromic Substring"></a>Longest Palindromic Substring</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.</p>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><p>除了暴力解决找出所有子串再判断是否为回文子串之外，可以以每一个字符为中心，同时向左右挪动指针，知道两遍的字符不相同，不是回文为止。当发现不是回文的时候，记录当前<strong>字符串长度(end-begin+1)</strong>并与<strong>maxlength</strong>比较查看是否需要更新。最后返回从<strong>begin</strong>到<strong>begin+maxlength</strong>的字符串即可。</p>
<blockquote>
<ul>
<li>查看回文字符串的时候有两种情况，字符个数分为偶数和奇数。</li>
</ul>
<ul>
<li>循环中begin需要从0开始，&gt;=</li>
</ul>
</blockquote>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size=s.length();</div><div class="line">        <span class="keyword">int</span> maxlength=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(size==<span class="number">1</span>||size==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> s;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;<span class="comment">//odd</span></div><div class="line">             <span class="keyword">int</span> begin=i-<span class="number">1</span>,end=i+<span class="number">1</span>;</div><div class="line">             <span class="keyword">while</span>(begin&gt;=<span class="number">0</span>&amp;&amp;end&lt;size&amp;&amp;s.charAt(begin)==s.charAt(end))&#123;</div><div class="line">                 <span class="keyword">if</span>(end-begin+<span class="number">1</span>&gt;maxlength)&#123;</div><div class="line">                     maxlength=end-begin+<span class="number">1</span>;</div><div class="line">                     start=begin;</div><div class="line">                 &#125;</div><div class="line">                 begin--;</div><div class="line">                 end++;</div><div class="line">             &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;<span class="comment">//even</span></div><div class="line">            <span class="keyword">int</span> begin=j,end=j+<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(begin&gt;=<span class="number">0</span>&amp;&amp;end&lt;size&amp;&amp;s.charAt(begin)==s.charAt(end))&#123;</div><div class="line">                <span class="keyword">if</span>(end-begin+<span class="number">1</span>&gt;maxlength)&#123;</div><div class="line">                     maxlength=end-begin+<span class="number">1</span>;</div><div class="line">                     start=begin;</div><div class="line">                 &#125;</div><div class="line">                begin--;</div><div class="line">                end++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(maxlength&gt;<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> s.substring(start,start+maxlength);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZigZag Conversion || Roman to Integer || Longest Common Prefix]]></title>
      <url>/2016/09/08/2016-09-08-ZigZag-Conversion%20%7C%7C%20Roman-to-Integer%20%7C%7C%20Longest-Common-Prefix/</url>
      <content type="html"><![CDATA[<h3 id="ZigZag-Conversion"><a href="#ZigZag-Conversion" class="headerlink" title="ZigZag Conversion"></a>ZigZag Conversion</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><blockquote>
<p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; P   A   H   N</div><div class="line">&gt;</div><div class="line">&gt; A P L S I I G</div><div class="line">&gt;</div><div class="line">&gt; Y   I   R`</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>And then read line by line: “PAHNAPLSIIGYIR”<br>Write the code that will take a string and make this conversion given a number of rows:</p>
<p><code>string convert(string text, int nRows);</code><br>convert(“PAYPALISHIRING”, 3) should return “PAHNAPLSIIGYIR”.</p>
</blockquote>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><p>利用数组的下标排列后可以发现每行中脚标的间隔规律，其中第一行和最后一行的间隔为<strong>interval=2*numrows-2</strong>，中间行的规律与每行的行号有关系，间隔大小是<strong>interval-2i与2i</strong>的交替重复，所以可以取当前行号<strong>i</strong>为<strong>baseindex</strong>,对baseindex交替与两个间隔加和并判断是否超过了最大脚标。<strong>行号循环时由于可能出现numrows&gt;size的情况出现，所以需要对两个条件进行判断</strong></p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size=s.length();</div><div class="line">        <span class="keyword">if</span>(size==<span class="number">0</span>||numRows==<span class="number">1</span>||size==<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> s;</div><div class="line">        StringBuilder result=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">int</span> interval=numRows*<span class="number">2</span>-<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i+=interval)&#123;</div><div class="line">           result.append(s.charAt(i));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;numRows-<span class="number">1</span>&amp;&amp;j&lt;size;j++)&#123;</div><div class="line">            <span class="keyword">int</span> inteven=interval-<span class="number">2</span>*j;</div><div class="line">            <span class="keyword">int</span> intodd=<span class="number">2</span>*j;</div><div class="line">            result.append(s.charAt(j));</div><div class="line">            <span class="keyword">int</span> index=j;</div><div class="line">            <span class="keyword">while</span>(index&lt;size)&#123;</div><div class="line">                index+=inteven;</div><div class="line">                <span class="keyword">if</span>(index&lt;size)&#123;</div><div class="line">                    result.append(s.charAt(index));</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                index+=intodd;</div><div class="line">                <span class="keyword">if</span>(index&lt;size)&#123;</div><div class="line">                    result.append(s.charAt(index));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m=numRows-<span class="number">1</span>;m&lt;size;m+=interval)&#123;</div><div class="line">            result.append(s.charAt(m));</div><div class="line">        &#125;</div><div class="line">        String finalres=result.toString();</div><div class="line">        <span class="keyword">return</span> finalres;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Roman-to-Integer"><a href="#Roman-to-Integer" class="headerlink" title="Roman to Integer"></a>Roman to Integer</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><p><strong>罗马数字规则</strong></p>
<table>
<thead>
<tr>
<th>I</th>
<th>V</th>
<th>X</th>
<th>L</th>
<th>C</th>
<th>D</th>
<th>M</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>5</td>
<td>10</td>
<td>50</td>
<td>100</td>
<td>500</td>
<td>1000</td>
</tr>
</tbody>
</table>
<ul>
<li>在较大的罗马数字的右边记上较小的罗马数字，表示大数字加小数字。</li>
</ul>
<ul>
<li>在较大的罗马数字的左边记上较小的罗马数字，表示大数字减小数字。</li>
</ul>
<ul>
<li>左减的数字有限制，仅限于I、X、C。比如45不可以写成VL，只能是XLV，但是，左减时不可跨越一个位值。比如，99不可以用IC（100-1）表示，而是用XCIX（[100-10]+[10-1]）表示。（等同于阿拉伯数字每位数字分别表示。）</li>
</ul>
<ul>
<li>左减数字必须为一位，比如8写成VIII，而非IIX。</li>
</ul>
<ul>
<li>右加数字不可连续超过三位，比如14写成XIV，而非XIIII。（见下方“数码限制”一项。）</li>
</ul>
<p><strong>思路</strong></p>
<p>一开始打算设置subflag和addflag控制加减，发现好蠢- -，可以每次都默认是加，当发现右侧的数字大于左侧的时候则将右侧的加上，减去2倍的左侧数字。而最好是从第二位开始，这样每次都与前面previous比较也不用考虑数组下标超出的问题。在用case的时候注意return就已经跳出了switch，不需要再加入break。</p>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size=s.length();</div><div class="line">        <span class="keyword">int</span> result=renum(s.charAt(<span class="number">0</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;size;i++)&#123;</div><div class="line">            <span class="keyword">int</span> current=renum(s.charAt(i));</div><div class="line">            <span class="keyword">int</span> previous=renum(s.charAt(i-<span class="number">1</span>));</div><div class="line">            <span class="keyword">if</span>(current&lt;=previous)&#123;</div><div class="line">                result+=current;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                result-=<span class="number">2</span>*previous-current;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">renum</span><span class="params">(Character c)</span></span>&#123;</div><div class="line">        <span class="keyword">switch</span>(c)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'I'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'V'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'X'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'C'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'L'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">50</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'D'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">500</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'M'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">1000</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Longest-Common-Prefix"><a href="#Longest-Common-Prefix" class="headerlink" title="Longest Common Prefix"></a>Longest Common Prefix</h3><h5 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h5><blockquote>
<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
</blockquote>
<h5 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h5><p>利用strs中的第一个字符串（<u>将其设定为prefix</u>）开始与之后的每个字符串进行比对，记录每次第一个不同的位置j，对原有的prefix进行剪切后再利用剪切后的prefix依次向下比对。需要注意对为空或者长度为1的数组的处理。</p>
<h5 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size=strs.length;</div><div class="line">        <span class="keyword">if</span>(strs==<span class="keyword">null</span>||size==<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        String prefix=strs[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;size;i++)&#123;</div><div class="line">            <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(j&lt;prefix.length()&amp;&amp;j&lt;strs[i].length()&amp;&amp;prefix.charAt(j)==strs[i].charAt(j))&#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(j==<span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">            prefix=prefix.substring(<span class="number">0</span>,j);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> prefix;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Two Sum || 3 Sum]]></title>
      <url>/2016/09/06/2016-09-06-Two-Sum%20%7C%7C%203-Sum/</url>
      <content type="html"><![CDATA[<h3 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><blockquote>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution.</p>
<p>Example:</p>
<p>Given nums = [2, 7, 11, 15], target = 9,</p>
<p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>
</blockquote>
<h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>第二个脚标注意从+1开始，部分用例的target等于某个值的双倍</li>
<li>在找到合适的一对数时break跳出，无需继续进行循环</li>
</ul>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="keyword">int</span>[] result=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            result[<span class="number">0</span>]=i;</div><div class="line">            result[<span class="number">1</span>]=-<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> remain=target-nums[i];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(nums[j]==remain)&#123;</div><div class="line">                    result[<span class="number">1</span>]=j;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(result[<span class="number">1</span>]!=-<span class="number">1</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-Sum"><a href="#3-Sum" class="headerlink" title="3 Sum"></a>3 Sum</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>Given an array <em>S</em> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <em>S</em> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p>
<p><strong>Note:</strong> The solution set must not contain duplicate triplets.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">For example, given array S = [-1, 0, 1, 2, -1, -4],</div><div class="line"></div><div class="line">A solution set is:</div><div class="line">[</div><div class="line">  [-1, 0, 1],</div><div class="line">  [-1, -1, 2]</div><div class="line">]</div></pre></td></tr></table></figure>
<h5 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>对数组排序后，两个指针low，high从两侧向中间移动，循环条件为low&lt;high</li>
<li>求当前点已经low、high的和并判断是否符合条件，符合条件即加入集合中，并且利用hashtable判断是否有重复出现再决定插入与否</li>
<li>该方法也可用于 2 sum</li>
</ul>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        HashSet&lt;ArrayList&lt;Integer&gt;&gt; test=<span class="keyword">new</span> HashSet&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">        </div><div class="line">        Arrays.sort(nums);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">2</span>;i++)&#123;</div><div class="line">            <span class="keyword">int</span> low=i+<span class="number">1</span>,high=nums.length-<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(low&lt;high)&#123;</div><div class="line">                <span class="keyword">int</span> sum=nums[i]+nums[low]+nums[high];</div><div class="line">                <span class="keyword">if</span>(sum==<span class="number">0</span>)&#123;</div><div class="line">                    ArrayList&lt;Integer&gt; item=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">                    item.add(nums[i]);</div><div class="line">                    item.add(nums[low]);</div><div class="line">                    item.add(nums[high]);</div><div class="line">                    </div><div class="line">                    <span class="keyword">if</span>(!test.contains(item))&#123;</div><div class="line">                        test.add(item);</div><div class="line">                        result.add(item);</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    low++;</div><div class="line">                    high--;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;<span class="number">0</span>)&#123;</div><div class="line">                    low++;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    high--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>3 Sum 的原题目对duplicate有要求</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] num) &#123;</div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">        <span class="keyword">if</span>(num.length&lt;<span class="number">3</span>||num == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">        Arrays.sort(num);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= num.length-<span class="number">3</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>||num[i]!=num[i-<span class="number">1</span>])&#123;<span class="comment">//remove dupicate</span></div><div class="line">                <span class="keyword">int</span> low = i+<span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> high = num.length-<span class="number">1</span>;</div><div class="line">                <span class="keyword">while</span>(low&lt;high)&#123;</div><div class="line">                    <span class="keyword">int</span> sum = num[i]+num[low]+num[high];</div><div class="line">                    <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</div><div class="line">                        ArrayList&lt;Integer&gt; unit = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">                        unit.add(num[i]);</div><div class="line">                        unit.add(num[low]);</div><div class="line">                        unit.add(num[high]);</div><div class="line">                        </div><div class="line">                        res.add(unit);</div><div class="line">                        </div><div class="line">                        low++;</div><div class="line">                        high--;</div><div class="line">                        </div><div class="line">                        <span class="keyword">while</span>(low&lt;high&amp;&amp;num[low]==num[low-<span class="number">1</span>])<span class="comment">//remove dupicate</span></div><div class="line">                            low++;</div><div class="line">                        <span class="keyword">while</span>(low&lt;high&amp;&amp;num[high]==num[high+<span class="number">1</span>])<span class="comment">//remove dupicate</span></div><div class="line">                            high--;</div><div class="line">                            </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; <span class="number">0</span>)</div><div class="line">                        high --;</div><div class="line">                     <span class="keyword">else</span></div><div class="line">                        low ++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="Java-length-size用法"><a href="#Java-length-size用法" class="headerlink" title="Java: length/size用法"></a>Java: length/size用法</h3><ul>
<li>java中的length属性是针对数组说的,比如说你声明了一个数组,想知道这个数组的长度则用到了length这个属性.</li>
</ul>
<ul>
<li>java中的length()方法是针对字符串String说的,如果想看这个字符串的长度则用到length()这个方法.</li>
</ul>
<ul>
<li>java中的size()方法是针对泛型集合说的,如果想看这个泛型有多少个元素,就调用此方法来查看!</li>
</ul>
<h3 id="List与ListArray"><a href="#List与ListArray" class="headerlink" title="List与ListArray"></a>List与ListArray</h3><p><strong>综述</strong></p>
<p>List是一个接口，而ListArray是一个类。<br>ListArray继承并实现了List。<br>所以List不能被构造，但可以向上面那样为List创建一个引用，而ListArray就可以被构造。<br>List list;     //正确   list=null;<br>List list=new List();    //   是错误的用法</p>
<p>List list = new ArrayList();这句创建了一个ArrayList的对象后把上溯到了List。此时它是一个List对象了，有些ArrayList有但是List没有的属性和方法，它就不能再用了。<br>而ArrayList list=new ArrayList();创建一对象则保留了ArrayList的所有属性。<br>这是一个例子： </p>
<blockquote>
<p>import java.util.*;</p>
<p>public class TestList{<br>​    public static void main(String[] args){<br>​        List list = new ArrayList();<br>​        ArrayList arrayList = new ArrayList();</p>
<p>​        list.trimToSize(); //错误，没有该方法。<br>​        arrayList.trimToSize();   //ArrayList里有该方法。<br>​    }<br>}</p>
</blockquote>
<p><strong>问题的关键</strong><br>为什么要用 List list = new ArrayList() ,而不用 ArrayList alist = new ArrayList()呢？<br>问题就在于List有多个实现类，现在你用的是ArrayList，也许哪一天你需要换成其它的实现类，如 LinkedList或者Vector等等，这时你只要改变这一行就行了：<br>List list = new LinkedList(); 其它使用了list地方的代码根本不需要改动。<br>假设你开始用 ArrayList alist = new ArrayList(), 这下你有的改了，特别是如果你使用了 ArrayList特有的方法和属性。</p>
<p>另外的例子就是,在类的方法中,如下声明:<br>private void doMyAction(List list){}<br>这样这个方法能处理所有实现了List接口的类,一定程度上实现了泛型函数.</p>
<p>如果开发的时候觉得ArrayList,HashMap的性能不能满足你的需要,可以通过实现List,Map(或者Collection)来定制你的自定义类.</p>
<p><strong>Tips</strong></p>
<p>List 的初始化定义方式应为List<list<integer>&gt; list = new ArrayList<list<integer>&gt;(); / List<list<integer>&gt; list = new ArrayList&lt;&gt;(); 不应为 <code>List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</code></list<integer></list<integer></list<integer></p>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Add Binary || Add Two Numbers]]></title>
      <url>/2016/09/05/2016-09-03-Add-Binary/</url>
      <content type="html"><![CDATA[<h3 id="Add-Binary"><a href="#Add-Binary" class="headerlink" title="Add Binary"></a>Add Binary</h3><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><p>Given two binary strings, return their sum (also a binary string).</p>
<p>For example,<br>a = “11”<br>b = “1”<br>Return “100”.</p>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><p>加数的过程是从最低位开始加，假如两个数字位数不同的话高位以0补齐。首先在其中一个数字为0的情况下返回另外一个数字。在经过所有的判断之后，两个指向最高位的游标同时像低位扫描，判断为0/1，同时给temp赋值，取得两个temp与flag的和后判断是否需要进位。在全部扫描过后再看flag是否为1，决定是否需要在加1位。stringbuilder 的 append 可以提高空间利用率，最后将整个字符串倒转即可。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addBinary</span><span class="params">(String a, String b)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(a.length()==<span class="number">0</span>||a==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> b;</div><div class="line">        <span class="keyword">if</span>(b.length()==<span class="number">0</span>||b==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> a;</div><div class="line">       </div><div class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>; </div><div class="line">        <span class="keyword">int</span> pa=a.length()-<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> pb=b.length()-<span class="number">1</span>;</div><div class="line">        StringBuilder num=<span class="keyword">new</span> StringBuilder();</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(pa&gt;=<span class="number">0</span>||pb&gt;=<span class="number">0</span>)&#123;<span class="comment">//pa,pb为最低位下标</span></div><div class="line">            <span class="keyword">int</span> tmpa=<span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> tmpb=<span class="number">0</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(pa&gt;=<span class="number">0</span>)&#123;</div><div class="line">                tmpa=(a.charAt(pa)==<span class="string">'0'</span>)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">                pa--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(pb&gt;=<span class="number">0</span>)&#123;</div><div class="line">                tmpb=(b.charAt(pb)==<span class="string">'0'</span>)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">                pb--;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">int</span> sum=tmpa+tmpb+flag;</div><div class="line">            <span class="keyword">if</span>(sum&gt;=<span class="number">2</span>)&#123;</div><div class="line">                flag=<span class="number">1</span>;</div><div class="line">                num.append(String.valueOf(sum-<span class="number">2</span>));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                num.append(String.valueOf(sum));</div><div class="line">                flag=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)</div><div class="line">            num.append(<span class="string">'1'</span>);</div><div class="line">            </div><div class="line">        String reverse=num.reverse().toString();</div><div class="line">        <span class="keyword">return</span> reverse;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a>Add Two Numbers</h3><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h5><p>You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8</p>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><p>思路跟上面的类似，不过处理的方式变成链表的指针移动。除此之外，还有进位的问题，假如对进位和所录入数字的计算变为求余和求除数的话，就不用假如if来判断sum是否超过10了。</p>
<p><strong>ListNode每次有新节点的时候都需要new，否则会造成 <code>java.lang.NullPointerException</code></strong></p>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> l2;</div><div class="line">        <span class="keyword">if</span>(l2==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> l1;</div><div class="line">            </div><div class="line">        ListNode result=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode p1=l1,p2=l2,p3=result;</div><div class="line">        <span class="keyword">int</span> carry=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(p1!=<span class="keyword">null</span>||p2!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">int</span> tmp1=<span class="number">0</span>,tmp2=<span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(p1!=<span class="keyword">null</span>)&#123;</div><div class="line">                tmp1=p1.val;</div><div class="line">                p1=p1.next;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(p2!=<span class="keyword">null</span>)&#123;</div><div class="line">                tmp2=p2.val;</div><div class="line">                p2=p2.next;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">int</span> sum=tmp1+tmp2+carry;</div><div class="line">            p3.next=<span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</div><div class="line">            carry=sum/<span class="number">10</span>;</div><div class="line">            p3=p3.next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(carry==<span class="number">1</span>)</div><div class="line">            p3.next=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">            </div><div class="line">        <span class="keyword">return</span> result.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Reverse Linked List]]></title>
      <url>/2016/09/03/2016-09-03-Reverse-Linked-List/</url>
      <content type="html"><![CDATA[<h3 id="非递归（迭代）"><a href="#非递归（迭代）" class="headerlink" title="非递归（迭代）"></a>非递归（迭代）</h3><h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><p>由于链表不具有数组可以根据下标随机访问的特性，所以只能从头节点开始逐个的交换到最后一个节点，并且在每次交换过程中需要用两个变量：previous来保存原本处于current节点的前一个节点，previous在交换过程中变为current.next。除此之外，循环的条件是在current不为空的时候，当其为空时，它的previous是新的head。需记住将原头结点的后继设为空。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        ListNode previous=<span class="keyword">null</span>;</div><div class="line">        ListNode current=head;</div><div class="line">        <span class="keyword">while</span>(current!=<span class="keyword">null</span>)&#123;</div><div class="line">            ListNode temp=current.next;</div><div class="line">            current.next=previous;</div><div class="line">            previous=current;</div><div class="line">            current=temp;</div><div class="line">        &#125;</div><div class="line">        head=previous;</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> head: The head of linked list.</div><div class="line">     * <span class="doctag">@return</span>: The new head of reversed linked list.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        ListNode prev = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</div><div class="line">            ListNode temp = head.next;</div><div class="line">            head.next = prev;</div><div class="line">            prev = head;</div><div class="line">            head = temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> prev;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><p>它利用递归走到链表的末端，然后再更新每一个node的next 值 (代码倒数第二句)。 在上面的代码中， reverseRest 的值没有改变，为该链表的最后一个node，所以，反转后，我们可以得到新链表的head。</p>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    ListNode* reverseList(ListNode* head)&#123;</div><div class="line">        <span class="comment">//此处的条件不能写成if(head == NULL)</span></div><div class="line">        <span class="keyword">if</span> (head == NULL || head-&gt;next == NULL) <span class="keyword">return</span> head;</div><div class="line">        ListNode *newhead = reverseList(head-&gt;next);</div><div class="line">        head-&gt;next-&gt;next = head;</div><div class="line">        head-&gt;next = NULL;</div><div class="line">    </div><div class="line">        <span class="keyword">return</span> newhead;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Contains Duplicate]]></title>
      <url>/2016/08/27/2016-08-27-Contains-Duplicate/</url>
      <content type="html"><![CDATA[<h3 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h3><h4 id="Contains-Duplicate"><a href="#Contains-Duplicate" class="headerlink" title="Contains Duplicate"></a>Contains Duplicate</h4><p><strong>Question</strong></p>
<p>Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p>
<p><strong>Analysis</strong></p>
<p>利用hash表，将数组中的元素逐个插入hash表中，当遇到第一个重复不可插入的时候返回false，否则返回true</p>
<p><strong>Code</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">		Set&lt;Integer&gt; s=<span class="keyword">new</span> HashSet&lt;Integer&gt;();</div><div class="line">		<span class="keyword">if</span> (nums.length==<span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> size=nums.length;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span> (!s.add(nums[i]))</div><div class="line">			&#123;</div><div class="line">			    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Summary</strong></p>
<p>一开始很蠢的先查看s内是否contain再插入，这样的话会报<code>exceed time limits</code>的错误，所以直接看是否能add即可</p>
<h4 id="Contains-Duplicate-II"><a href="#Contains-Duplicate-II" class="headerlink" title="Contains Duplicate II"></a>Contains Duplicate II</h4><p><strong>Question</strong></p>
<p>Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k.</p>
<p><strong>Analysis</strong></p>
<p>由于java中的<strong>set</strong>中没有脚标，故没有办法进行脚标的对比，所以选择hash中的map对脚标进行记录</p>
<p><strong>Code</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        Map&lt;Integer,Integer&gt; s=<span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</div><div class="line">        <span class="keyword">int</span> size=nums.length;</div><div class="line">        <span class="keyword">if</span>(size==<span class="number">0</span>||size&lt;<span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(s.containsKey(nums[i]))&#123;</div><div class="line">                <span class="keyword">int</span> j=s.get(nums[i]);</div><div class="line">                <span class="keyword">if</span>(i-j&lt;=k) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            s.put(nums[i],i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Contains-Duplicate-III"><a href="#Contains-Duplicate-III" class="headerlink" title="Contains Duplicate III"></a>Contains Duplicate III</h4><p><strong>Question</strong></p>
<p>Given an array of integers, find out whether there are two distinct indices i and j in the array such that the difference between nums[i] and nums[j] is at most t and the difference between i and j is at most k.</p>
<p><strong>Analysis</strong></p>
<p>维持一个长度为k的窗口，每次检查新加入的值与窗口内其他的值是否差值有小于等于t的。但是如果嵌套的两个for循环，则会超时。利用Java中的Treeset、subSet查看是否有处于范围大小内的记录即可，复杂度为 O(n logk)</p>
<p><strong>Code</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">        SortedSet&lt;Long&gt; set=<span class="keyword">new</span> TreeSet&lt;Long&gt;();</div><div class="line">        <span class="keyword">int</span> size=nums.length;</div><div class="line">        <span class="keyword">if</span>(size==<span class="number">0</span>||size&lt;<span class="number">2</span>||k&lt;<span class="number">1</span>||t&lt;<span class="number">0</span>)</div><div class="line">        <span class="comment">// k&lt;1而非k&lt;0，eg：(1，0) k=0 t=1 k为0会一直移除当前的数字</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</div><div class="line">            SortedSet&lt;Long&gt; subset=set.subSet((<span class="keyword">long</span>)nums[i]-t,(<span class="keyword">long</span>)nums[i]+t+<span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(!subset.isEmpty())</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(i&gt;=k)&#123;</div><div class="line">              <span class="comment">//必须有=，因为下一次循环的时候直接是从第i+1个开始比较；若不删除第i-k个，则此时即使间隔为k+1，也会有比较；eg：(1,3,1) k=1 t=1</span></div><div class="line">                set.remove((<span class="keyword">long</span>)nums[i-k]);</div><div class="line">            &#125;</div><div class="line">            set.add((<span class="keyword">long</span>)nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="TreeSet-SubSet"><a href="#TreeSet-SubSet" class="headerlink" title="TreeSet/SubSet"></a>TreeSet/SubSet</h3><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><p>TreeSet是集合，是用来存数据的，就像数组一样，但TreeSet是动态的。<br>TreeSet存的数据是无序号的，你不能通过get的方法获得里面的数据。<br>TreeSet存数据是有顺序的，这个顺序是你规定的，规定方法就是通过实现Comparator接口.</p>
<h4 id="SubSet"><a href="#SubSet" class="headerlink" title="SubSet"></a>SubSet</h4><p><strong>Code</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.java2novice.treeset;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.TreeSet;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySetSublist</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String a[])</span></span>&#123;</div><div class="line">		</div><div class="line">		TreeSet&lt;String&gt; ts = <span class="keyword">new</span> TreeSet&lt;String&gt;(<span class="keyword">new</span> MyStrComp());</div><div class="line">		ts.add(<span class="string">"RED"</span>);</div><div class="line">		ts.add(<span class="string">"ORANGE"</span>);</div><div class="line">		ts.add(<span class="string">"BLUE"</span>);</div><div class="line">		ts.add(<span class="string">"GREEN"</span>);</div><div class="line">		ts.add(<span class="string">"WHITE"</span>);</div><div class="line">		ts.add(<span class="string">"BROWN"</span>);</div><div class="line">		ts.add(<span class="string">"YELLOW"</span>);</div><div class="line">		ts.add(<span class="string">"BLACK"</span>);</div><div class="line">		System.out.println(ts);</div><div class="line">		Set&lt;String&gt; subSet = ts.subSet(<span class="string">"GREEN"</span>, <span class="string">"WHITE"</span>);</div><div class="line">		System.out.println(<span class="string">"sub set: "</span>+subSet);</div><div class="line">		subSet = ts.subSet(<span class="string">"GREEN"</span>, <span class="keyword">true</span>, <span class="string">"WHITE"</span>, <span class="keyword">true</span>);</div><div class="line">		System.out.println(<span class="string">"sub set: "</span>+subSet);</div><div class="line">		subSet = ts.subSet(<span class="string">"GREEN"</span>, <span class="keyword">false</span>, <span class="string">"WHITE"</span>, <span class="keyword">true</span>);</div><div class="line">		System.out.println(<span class="string">"sub set: "</span>+subSet);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStrComp</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String str1, String str2)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> str1.compareTo(str2);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Output</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[BLACK, BLUE, BROWN, GREEN, ORANGE, RED, WHITE, YELLOW]</div><div class="line">sub set: [GREEN, ORANGE, RED]</div><div class="line">sub set: [GREEN, ORANGE, RED, WHITE]</div><div class="line">sub set: [ORANGE, RED, WHITE]</div></pre></td></tr></table></figure>
<p><strong>Code</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.SortedSet;</div><div class="line"><span class="keyword">import</span> java.util.TreeSet;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetDemo05</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        SortedSet&lt;String&gt; allSet = <span class="keyword">new</span> TreeSet&lt;String&gt;();    </div><div class="line">        allSet.add(<span class="string">"A"</span>);</div><div class="line">        allSet.add(<span class="string">"B"</span>);</div><div class="line">        allSet.add(<span class="string">"C"</span>);</div><div class="line">        allSet.add(<span class="string">"D"</span>);</div><div class="line">        allSet.add(<span class="string">"E"</span>);</div><div class="line">        System.out.println(<span class="string">"第一个元素："</span>+allSet.first());</div><div class="line">        System.out.println(<span class="string">"最后一个元素"</span>+allSet.last());</div><div class="line">        System.out.println(<span class="string">"headSet元素"</span>+allSet.headSet(<span class="string">"C"</span>));</div><div class="line">        System.out.println(<span class="string">"tailSet元素"</span>+allSet.tailSet(<span class="string">"C"</span>));</div><div class="line">        System.out.println(<span class="string">"subSet元素:"</span>+allSet.subSet(<span class="string">"B"</span>,<span class="string">"D"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Output</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">第一个元素：A</div><div class="line">最后一个元素E</div><div class="line">headSet元素[A, B]</div><div class="line">tailSet元素[C, D, E]</div><div class="line">subSet元素:[B, C]</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Excel Sheet Column Number]]></title>
      <url>/2016/08/24/2016-08-24-Excel-Sheet-Column-Number/</url>
      <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote>
<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>
<p>For example:</p>
<p>A -&gt; 1<br>B -&gt; 2<br>C -&gt; 3<br>…<br>Z -&gt; 26<br>AA -&gt; 27<br>AB -&gt; 28</p>
</blockquote>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>26进制转换为10进制，秦九韶算法？</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(string s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;s.length();i++)</div><div class="line">        &#123;</div><div class="line">            temp = s[i] - <span class="string">'A'</span> + <span class="number">1</span>;</div><div class="line">            number = number * <span class="number">26</span> + temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> number;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>for(;;i++)和for(;;++i)<strong>功能完全一样</strong>，没有任何区别，我在另外有帖子说明过。</p>
<p>i++与++i<strong>只有在表达式（包括逗号表达式、赋值表达式）中才有区别</strong>，在独立的语句（分号分隔）中没有任何区别。</p>
<p>++i和i++的区别是，++i是i先以当前值参加表达式计算然后再增加1，i++是i先增加1然后再以新值参加表达式计算。</p>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Github .gitignore 配置]]></title>
      <url>/2016/08/22/2016-08-22-Github-.gitignore-%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="Gitignore"><a href="#Gitignore" class="headerlink" title="Gitignore"></a>Gitignore</h2><p>​    在代码管理的过程中，常常会有一部分代码是不希望被push到远端的github的，它们可能是临时文件、配置文件，或者像是Jekyll中出现的<code>_site</code>文件夹中的生成文件一样。而将他们都在commit之前记录在<strong>.gitignore</strong>中就可以成功地避免将它们push到远端Git上了。</p>
<h4 id="gitignore的创建"><a href="#gitignore的创建" class="headerlink" title=".gitignore的创建"></a>.gitignore的创建</h4><p>​    在mac OSX下在相应的repo文件下 <code>touch .gitignore</code> 即可创建相应文件，而通过vim .gitignore即可对其进行编辑。</p>
<h4 id="gitignore内容规则"><a href="#gitignore内容规则" class="headerlink" title=".gitignore内容规则"></a>.gitignore内容规则</h4><blockquote>
<p>gitignore分为两种模式，分别为开放模式与保守模式，其中开放模式是记录不希望push的内容，而保守模式是记录希望被push的文件，保守模式下的记录规则是<strong>！+ 开放模式下的语句</strong></p>
</blockquote>
<p><strong>忽略指定文件夹</strong></p>
<p><code>/foldername</code></p>
<p><strong>忽略某种类型文件</strong></p>
<p><code>*.filetype</code></p>
<p><strong>忽略某个文件</strong></p>
<p><code>/filepath</code></p>
<p>​    但是当文件已被git追踪后应该将其移除后再加入<code>.gitignore</code> </p>
<p><code>git rm --cached ignore_file</code>  或者</p>
<p><code>git rm -r --cached ignore_file</code></p>
<p>​    而对于很多已经语言的生成文件已经有编辑好的文件，只需将其加入即可 <a href="https://github.com/github/gitignore" target="_blank" rel="external">Gitignore Collection</a></p>
<h2 id="Vim-命令行编辑"><a href="#Vim-命令行编辑" class="headerlink" title="Vim 命令行编辑"></a>Vim 命令行编辑</h2><p>​    Vim通常被分为两种模式：命令行模式与插入模式，而只有在插入模式下才可以进行文字的输入。</p>
<h4 id="文字的输入"><a href="#文字的输入" class="headerlink" title="文字的输入"></a>文字的输入</h4><p>　在「命令行模式（command mode）」下</p>
<ol>
<li>按一下字母<strong>「i」</strong>就可以进入「插入模式（Insert mode）」，这时候你就可以开始输入文字了。 </li>
<li>按<strong>「a」</strong>进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字。</li>
<li>按<strong>「o」</strong>进入插入模式后，是插入新的一行，从行首开始输入文字。</li>
</ol>
<h4 id="文字的删除"><a href="#文字的删除" class="headerlink" title="文字的删除"></a>文字的删除</h4><p>​     您目前处于「插入模式（Insert mode）」，您就只能一直输入文字，如果您发现输错了字！想用光标键往回移动，将该字删除，就要先按一下<strong>「ESC」键转到「命令行模式（command mode）」</strong>再删除文字。</p>
<h4 id="退出vi及保存文件"><a href="#退出vi及保存文件" class="headerlink" title="退出vi及保存文件"></a>退出vi及保存文件</h4><p>　在「命令行模式（command mode）」下，按一下「：」冒号键进入「Last line mode」，例如： </p>
<p><strong>: w filename</strong> （输入 「w filename」将文章以指定的文件名filename保存） </p>
<p><strong>: wq</strong> (输入「wq」，存盘并退出vi) </p>
<p><strong>: q!</strong> (输入q!， 不存盘强制退出vi) </p>
<h4 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h4><p>按<strong>「ctrl」+「b」</strong>：屏幕往“后”移动一页。 </p>
<p>按<strong>「ctrl」+「f」</strong>：屏幕往“前”移动一页。 </p>
<p>按<strong>「ctrl」+「u」</strong>：屏幕往“后”移动半页。 </p>
<p>按<strong>「ctrl」+「d」</strong>：屏幕往“前”移动半页。 </p>
<p>按<strong>「$」</strong>：移动到光标所在行的“行尾”。 </p>
<p>按<strong>「^」</strong>：移动到光标所在行的“行首” </p>
<h4 id="删除文字"><a href="#删除文字" class="headerlink" title="删除文字"></a>删除文字</h4><p><strong>「x」</strong>：每按一次，删除光标所在位置的“后面”一个字符。 </p>
<p><strong>「#x」</strong>：例如，「6x」表示删除光标所在位置的“后面”6个字符。</p>
<p><strong>「X」</strong>：大写的X，每按一次，删除光标所在位置的“前面”一个字符。 </p>
<p><strong>「#X」</strong>：例如，「20X」表示删除光标所在位置的“前面”20个字符。 </p>
<p><strong>「dd」</strong>：删除光标所在行。 </p>
<p><strong>「#dd」</strong>：从光标所在行开始删除#行 </p>
<h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p><strong>「yw」</strong>：将光标所在之处到字尾的字符复制到缓冲区中。 </p>
<p><strong>「#yw」</strong>：复制#个字到缓冲区 </p>
<p><strong>「yy」</strong>：复制光标所在行到缓冲区。 </p>
<p><strong>「#yy」</strong>：例如，「6yy」表示拷贝从光标所在的该行“往下数”6行文字。 </p>
<p><strong>「p」</strong>：将缓冲区内的字符贴到光标所在位置。注意：所有与“y”有关的复制命令都必须与“p”配合才能完成复制与粘贴功能。 </p>
<blockquote>
<p><a href="http://linux.chinaunix.net/doc/office/2005-01-24/898.shtml" target="_blank" rel="external">http://linux.chinaunix.net/doc/office/2005-01-24/898.shtml</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Github Pages+Jekyll搭建博客注意事项]]></title>
      <url>/2016/08/20/2016-08-20-Github-Pages+Jekyll%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<blockquote>
<p>不管怎么样也终于有个大概的样子了，虽然在不懂<code>CSS</code> <code>HTML</code> 等知识的情况下改模板简直难得哭晕在厕所，但总算也是有了雏形，希望在日后能够尽快地提高码力，写出自己真正喜欢的模板。</p>
</blockquote>
<p>​    在整个搭建过程中，参考了好多个教程，但是还是碰到了一些旧版教程中无法解决的问题。</p>
<h3 id="RubyGems镜像"><a href="#RubyGems镜像" class="headerlink" title="RubyGems镜像"></a>RubyGems镜像</h3><p>​    大部分教程中的淘宝镜像现在已经不好用了，但是RubyChina更新了新的镜像<a href="https://gems.ruby-china.org/" target="_blank" rel="external">RubyGems镜像</a></p>
<h3 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h3><p>​    “响应式设计（Responsive Design）”是一种让网站针对不同的浏览器和设备“响应”不同显示效果的策略，这样可以让网站在任何情况下显示的很棒！</p>
<p>​    媒体查询是做此事所需的最强大的工具。让我们使用百分比宽度来布局，然后在浏览器变窄到无法容纳侧边栏中的菜单时，把布局显示成一列：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">600px</span>) &#123;</div><div class="line">  <span class="selector-tag">nav</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">section</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">599px</span>) &#123;</div><div class="line">  <span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Jekyll </tag>
            
            <tag> Github </tag>
            
            <tag> Tips </tag>
            
            <tag> Summary 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Maximum Square || Maximum Rectangle]]></title>
      <url>/2016/01/04/2016-01-04--Maximum-Square-%7C%7C-Maximum-Rectangle/</url>
      <content type="html"><![CDATA[<h3 id="Maximal-Square"><a href="#Maximal-Square" class="headerlink" title="Maximal Square"></a>Maximal Square</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p>
<p>For example, given the following matrix:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1 0 1 0 0</div><div class="line">1 0 <span class="strong">**1 1**</span> 1</div><div class="line">1 1 <span class="strong">**1 1**</span> 1</div><div class="line">1 0 0 1 0</div></pre></td></tr></table></figure>
<p>Return 4.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/20801/extremely-simple-java-solution/13" target="_blank" rel="external">LeetCode Discuss</a></p>
</blockquote>
<ul>
<li>定义dp数组的维数(m+1)*(n+1)可以控制边界问题</li>
<li>dp[i][j]用于记录以当前点为正方形右下角顶点的正方形的最长边长</li>
<li>当我们判断以某个点为正方形右下角时最大的正方形时，那它的上方，左方和左上方三个点也一定是某个正方形的右下角，否则该点为右下角的正方形最大就是它自己了。这是定性的判断，那具体的最大正方形边长呢？我们知道，该点为右下角的正方形的最大边长，最多比它的上方，左方和左上方为右下角的正方形的边长多1，最好的情况是是它的上方，左方和左上方为右下角的正方形的大小都一样的，这样加上该点就可以构成一个更大的正方形。但如果它的上方，左方和左上方为右下角的正方形的大小不一样，合起来就会缺了某个角落，这时候只能取那三个正方形中最小的正方形的边长加1了。</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(matrix==<span class="keyword">null</span>||matrix.length==<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> m=matrix.length,n=matrix[<span class="number">0</span>].length,result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(matrix[i-<span class="number">1</span>][j-<span class="number">1</span>]==<span class="string">'1'</span>)&#123;</div><div class="line">                    dp[i][j]=Math.min(Math.min(dp[i-<span class="number">1</span>][j],dp[i-<span class="number">1</span>][j-<span class="number">1</span>]),dp[i][j-<span class="number">1</span>])+<span class="number">1</span>;</div><div class="line">                    result=Math.max(dp[i][j],result);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result*result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Maximal-Rectangle"><a href="#Maximal-Rectangle" class="headerlink" title="Maximal Rectangle"></a>Maximal Rectangle</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle containing only 1’s and return its area.</p>
<p>For example, given the following matrix:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1 0 1 0 0</div><div class="line">1 0 <span class="strong">**1 1 1**</span></div><div class="line">1 1 <span class="strong">**1 1 1**</span></div><div class="line">1 0 0 1 0</div></pre></td></tr></table></figure>
<p>Return 6</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/6650/share-my-dp-solution" target="_blank" rel="external">LeetCode Discuss</a></p>
<p><a href="https://siddontang.gitbooks.io/leetcode-solution/content/array/maximal_rectangle.html" target="_blank" rel="external">Another Method</a></p>
</blockquote>
<p>利用height,left,right三个数组来记录当前行内可形成最大矩形的高度、左边界和右边界。</p>
<ul>
<li>height表示当前列内连续的1的个数，即高度</li>
<li>right和left注意需要在赋值的时候righttmp-1或者lefttmp+1， 这样能保证在计算的时候right-left正好是矩形的边长</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalRectangle</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(matrix==<span class="keyword">null</span>||matrix.length==<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> m=matrix.length,n=matrix[<span class="number">0</span>].length,res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] left=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">        <span class="keyword">int</span>[] right=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">        Arrays.fill(right,n);</div><div class="line">        <span class="keyword">int</span>[] height=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">            <span class="keyword">int</span> lefttmp=<span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> righttmp=n;</div><div class="line">            <span class="comment">//Compute height</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(matrix[i][j]==<span class="string">'1'</span>)   height[j]+=<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span>    height[j]=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//From left to right compute left</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(matrix[i][j]==<span class="string">'1'</span>)   left[j]=Math.max(left[j],lefttmp);</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    left[j]=<span class="number">0</span>;</div><div class="line">                    lefttmp=j+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//From right to left compute right</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=n-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</div><div class="line">                <span class="keyword">if</span>(matrix[i][j]==<span class="string">'1'</span>)   right[j]=Math.min(right[j],righttmp);</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    right[j]=n;</div><div class="line">                    righttmp=j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</div><div class="line">                res=Math.max(res,(right[j]-left[j])*height[j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Scramble String/ Distinct Subsequences ]]></title>
      <url>/2016/01/04/2016-01-04--Scramble-String:-Distinct-Subsequences%20/</url>
      <content type="html"><![CDATA[<h3 id="Scramble-String"><a href="#Scramble-String" class="headerlink" title="Scramble String"></a>Scramble String</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a string <em>s1</em>, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.</p>
<p>Below is one possible representation of <em>s1</em> = <code>&quot;great&quot;</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    great</div><div class="line">   /    \</div><div class="line">  gr    eat</div><div class="line"> / \    /  \</div><div class="line">g   r  e   at</div><div class="line">           / \</div><div class="line">          a   t</div></pre></td></tr></table></figure>
<p>To scramble the string, we may choose any non-leaf node and swap its two children.</p>
<p>For example, if we choose the node <code>&quot;gr&quot;</code> and swap its two children, it produces a scrambled string <code>&quot;rgeat&quot;</code>.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/19158/accepted-java-solution" target="_blank" rel="external">LeetCode Discuss</a></p>
</blockquote>
<p>验证两个串是否为Scramble的方式即判断他们是否具有相同的字母数，由此递归的划分字符串进行判断</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isScramble</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s1.length()!=s2.length())    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(s1.equals(s2))   <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">int</span>[] cnt=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</div><div class="line">            cnt[s1.charAt(i)-<span class="string">'a'</span>]++;</div><div class="line">            cnt[s2.charAt(i)-<span class="string">'a'</span>]--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> tmp:cnt)&#123;</div><div class="line">            <span class="keyword">if</span>(tmp!=<span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s1.length();i++)&#123;</div><div class="line">            <span class="keyword">if</span>(isScramble(s1.substring(<span class="number">0</span>,i),s2.substring(<span class="number">0</span>,i))&amp;&amp;isScramble(s1.substring(i),s2.substring(i))) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">if</span>(isScramble(s1.substring(<span class="number">0</span>,i),s2.substring(s2.length()-i))&amp;&amp;isScramble(s1.substring(i),s2.substring(<span class="number">0</span>,s2.length()-i))) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ Convert Sorted LinkedList(or Array) to BST]]></title>
      <url>/2016/01/02/2016-01-02--Convert-Sorted-LinkedList(or-Array)-to-BST/</url>
      <content type="html"><![CDATA[<h3 id="Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="Convert Sorted Array to Binary Search Tree"></a>Convert Sorted Array to Binary Search Tree</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>这题需要将一个排好序的链表转成一个平衡二叉树，我们知道，对于一个二叉树来说，左子树一定小于根节点，而右子树大于根节点。所以我们需要找到链表的中间节点，这个就是根节点，链表的左半部分就是左子树，而右半部分则是右子树，我们继续递归处理相应的左右部分，就能够构造出对应的二叉树了。</p>
<p>故每次只需要找到数组的中间节点，在递归的对中点左右两部分的数组进行同样的convert操作赋给左右子树即可。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=nums.length;</div><div class="line">        <span class="keyword">return</span> convert(nums,start,end);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">convert</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(start==end)  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> mid=start+(end-start)/<span class="number">2</span>;</div><div class="line">        TreeNode root=<span class="keyword">new</span> TreeNode(nums[mid]);</div><div class="line">        root.left=convert(nums,start,mid);</div><div class="line">        root.right=convert(nums,mid+<span class="number">1</span>,end);</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Convert-Sorted-List-to-Binary-Search-Tree"><a href="#Convert-Sorted-List-to-Binary-Search-Tree" class="headerlink" title="Convert Sorted List to Binary Search Tree"></a>Convert Sorted List to Binary Search Tree</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>这题的难点在于如何找到链表的中间节点，我们可以通过fast，slow指针来解决，fast每次走两步，slow每次走一步，fast走到结尾，那么slow就是中间节点了。</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><ol>
<li>Un-height-balanced</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">private ListNode p;</div><div class="line"></div><div class="line"> private TreeNode root;</div><div class="line"></div><div class="line"> public TreeNode sortedListToBST(ListNode head) &#123;</div><div class="line"></div><div class="line">     if(head==null)  return null;</div><div class="line">     p=head;</div><div class="line">     root=null;</div><div class="line">     while(p!=null)&#123;</div><div class="line">         int val=p.val;</div><div class="line">         Insert(val);</div><div class="line">         p=p.next;</div><div class="line">     &#125;</div><div class="line">     return root;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> private void Insert(int val)&#123;</div><div class="line">     TreeNode tmp=this.root;</div><div class="line">     if(root==null)&#123;</div><div class="line">         root=new TreeNode(val);</div><div class="line">     &#125;else&#123;</div><div class="line">         while(true)&#123;</div><div class="line">             if(tmp.val&gt;val)&#123;            //Insert to left</div><div class="line">                 if(tmp.left==null)&#123;</div><div class="line">                     tmp.left=new TreeNode(val);</div><div class="line">                     break;</div><div class="line">                 &#125;else&#123;</div><div class="line">                     tmp=tmp.left;</div><div class="line">                 &#125;</div><div class="line">             &#125;else&#123;                      //Insert to right</div><div class="line">                 if(tmp.right==null)&#123;</div><div class="line">                     tmp.right=new TreeNode(val);</div><div class="line">                     break;</div><div class="line">                 &#125;else&#123;</div><div class="line">                     tmp=tmp.right;</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ol>
<li>Height- Balanced Ver</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedListToBST</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> convert(head,<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">convert</span><span class="params">(ListNode start, ListNode end)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(start==end)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        ListNode slow=start;</div><div class="line">        ListNode fast=start;</div><div class="line">        <span class="keyword">while</span>(fast!=end&amp;&amp;fast.next!=end)&#123;</div><div class="line">            slow=slow.next;</div><div class="line">            fast=fast.next.next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        TreeNode root=<span class="keyword">new</span> TreeNode(slow.val);</div><div class="line">        root.left=convert(start,slow);</div><div class="line">        root.right=convert(slow.next,end);</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
