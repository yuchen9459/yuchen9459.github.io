<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coding Rabbit</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-07T21:46:24.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Coding Rabbit</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title> Divide Two Integers || Find Minimum in Rotated Sorted Array II</title>
    <link href="http://yoursite.com/2017/07/08/--Divide-Two-Integers-%7C%7C-Find-Minimum-in-Rotated-Sorted-Array-II/"/>
    <id>http://yoursite.com/2017/07/08/--Divide-Two-Integers-||-Find-Minimum-in-Rotated-Sorted-Array-II/</id>
    <published>2017-07-07T21:46:24.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Divide-Two-Integers"><a href="#Divide-Two-Integers" class="headerlink" title="Divide Two Integers"></a>Divide Two Integers</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Divide two integers without using multiplication, division and mod operator.</p>
<p>If it is overflow, return MAX_INT.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>事先确定结果的正负号，操作过程中保证除数与被除数都为正</li>
<li>由于无法使用乘法，所以最初想法为被除数不断地减去被除数，直到值=0，减去被除数的次数即结果</li>
<li>对被除数进行位操作，左移k位相当于divisor的2^k倍，首先减去最大的k值下的divisor</li>
<li>shift++操作后的结果需-1是实际的结果</li>
<li>dividend - divisor移位后的结果，res + 1移位后的结果</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> isNeg=(dividend&gt;<span class="number">0</span>&amp;&amp;divisor&lt;<span class="number">0</span>)||(dividend&lt;<span class="number">0</span>&amp;&amp;divisor&gt;<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(dividend==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(divisor==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (dividend == Integer.MIN_VALUE &amp;&amp; divisor == -<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">long</span> up=Math.abs((<span class="keyword">long</span>)dividend);</div><div class="line">        <span class="keyword">long</span> down=Math.abs((<span class="keyword">long</span>)divisor);</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(up&gt;=down)&#123;</div><div class="line">            <span class="keyword">int</span> shift=<span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(up&gt;=(down&lt;&lt;shift))&#123;</div><div class="line">                shift++;</div><div class="line">            &#125;</div><div class="line">            res+=<span class="number">1</span>&lt;&lt;(shift-<span class="number">1</span>);</div><div class="line">            up-=down&lt;&lt;(shift-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(isNeg)   <span class="keyword">return</span> -res;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Find-Minimum-in-Rotated-Sorted-Array-II"><a href="#Find-Minimum-in-Rotated-Sorted-Array-II" class="headerlink" title="Find Minimum in Rotated Sorted Array II"></a>Find Minimum in Rotated Sorted Array II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).</p>
<p>Find the minimum element.</p>
<p>You may assume no duplicate exists in the array.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="http://www.jiuzhang.com/solutions/find-minimum-in-rotated-sorted-array-ii/" target="_blank" rel="external">九章算法</a></p>
</blockquote>
<p>同样当A[mid] = A[end]时，无法判断min究竟在左边还是右边。</p>
<p><strong>3</strong> 1 2 <strong>3</strong> 3 3 <strong>3</strong><br><strong>3</strong> 3 3 <strong>3</strong> 1 2 <strong>3</strong></p>
<p>但可以肯定的是可以排除A[end]：因为即使min = A[end]，由于A[end] = A[mid]，排除A[end]并没有让min丢失。所以增加的条件是：</p>
<p>A[mid] = A[end]：搜索A[start : end-1]</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(begin&lt;end)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[begin]&lt;nums[end])</div><div class="line">                <span class="keyword">return</span> nums[begin];</div><div class="line">            <span class="keyword">int</span> mid=begin/<span class="number">2</span>+end/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[mid]&gt;=nums[begin])</div><div class="line">                begin=mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                end=mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums[begin];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Divide-Two-Integers&quot;&gt;&lt;a href=&quot;#Divide-Two-Integers&quot; class=&quot;headerlink&quot; title=&quot;Divide Two Integers&quot;&gt;&lt;/a&gt;Divide Two Integers&lt;/h3&gt;&lt;h4 i
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title> Number of Digit One || Integer Replacement</title>
    <link href="http://yoursite.com/2017/07/08/--Number-of-Digit-One-%7C%7C-Integer-Replacement/"/>
    <id>http://yoursite.com/2017/07/08/--Number-of-Digit-One-||-Integer-Replacement/</id>
    <published>2017-07-07T21:46:24.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Number-of-Digit-One"><a href="#Number-of-Digit-One" class="headerlink" title="Number of Digit One"></a>Number of Digit One</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.</p>
<p>For example:</p>
<p>Given n = 13,</p>
<p>Return 6, because digit 1 occurred in the following numbers: 1, 10, 11, 12, 13.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>每10个数, 有一个个位是1, 每100个数, 有10个十位是1, 每1000个数, 有100个百位是1.  做一个循环, 每次计算单个位上1得总个数(个位,十位, 百位).  </p>
<p>例子:</p>
<p>以算百位上1为例子:   假设百位上是0, 1, 和 &gt;=2 三种情况: </p>
<pre><code>case 1: n=3141092, a= 31410, b=92. 计算百位上1的个数应该为 3141 *100 次.

case 2: n=3141192, a= 31411, b=92. 计算百位上1的个数应该为 3141 *100 + (92+1) 次. 

case 3: n=3141592, a= 31415, b=92. 计算百位上1的个数应该为 (3141+1) *100 次. 
</code></pre><p>以上三种情况可以用 一个公式概括:</p>
<p>(a + 8) / 10 <em> m + (a % 10 == 1) </em> (b + 1);</p>
<p><strong>考虑到m可能会导致overflow，<u>a,b,m</u>均用long型</strong></p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countDigitOne</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ones=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> m=<span class="number">1</span>;m&lt;=n;m*=<span class="number">10</span>)&#123;</div><div class="line">            <span class="keyword">long</span> a=n/m,b=n%m;</div><div class="line">            ones+=(a+<span class="number">8</span>)/<span class="number">10</span>*m;</div><div class="line">            <span class="keyword">if</span>(a%<span class="number">10</span>==<span class="number">1</span>) ones+=b+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ones;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Integer-Replacement"><a href="#Integer-Replacement" class="headerlink" title="Integer Replacement"></a>Integer Replacement</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a positive integer <em>n</em> and you can do operations as follow:</p>
<ol>
<li>If <em>n</em> is even, replace <em>n</em> with <em>n</em>/2.</li>
<li>If <em>n</em> is odd, you can replace <em>n</em> with either <em>n</em> + 1 or <em>n</em> - 1.</li>
</ol>
<p>What is the minimum number of replacements needed for <em>n</em> to become 1?</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">8</div><div class="line"></div><div class="line">Output:</div><div class="line">3</div><div class="line"></div><div class="line">Explanation:</div><div class="line">8 -&gt; 4 -&gt; 2 -&gt; 1</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">7</div><div class="line"></div><div class="line">Output:</div><div class="line">4</div><div class="line"></div><div class="line">Explanation:</div><div class="line">7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1</div><div class="line">or</div><div class="line">7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/58334/a-couple-of-java-solutions-with-explanations" target="_blank" rel="external">LeetCode Discussion</a></p>
</blockquote>
<p>判断多少次操作后可以变1，显然应该通过位操作，分为两种情况，偶数/奇数</p>
<ol>
<li><p>偶数</p>
<p>偶数只需数字n无符号右移1位即可，注意判断的时候可以通过&amp;1判断是否为偶数 </p>
</li>
<li><p>奇数</p>
<p>通过以下示例可知，应该尽量将二进制n中的1的个数变少，有两种方法</p>
<ul>
<li>利用Integer.bitCount() 统计n+1与n-1后二进制数内1的个数，取少的那种做法</li>
<li>只需判断后两位数字即可，由于此时数为奇数，故末尾数一定为1<ul>
<li>假如倒数第二位数字为1，即<code>11</code>，此时+1操作所得数含1个数不多于-1操作，100/010</li>
<li>假如倒数第二位数字为0，即<code>01</code>，此时显然-1操作优于+1操作 </li>
</ul>
</li>
</ul>
<p>操作一：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">111011 -&gt; 111010 -&gt; 11101 -&gt; 11100 -&gt; 1110 -&gt; 111 -&gt; 1000 -&gt; 100 -&gt; 10 -&gt; 1</div></pre></td></tr></table></figure>
<p>操作二：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">111011 -&gt; 111100 -&gt; 11110 -&gt; 1111 -&gt; 10000 -&gt; 1000 -&gt; 100 -&gt; 10 -&gt; 1</div></pre></td></tr></table></figure>
<p>操作二的次数显然少于操作一</p>
</li>
</ol>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerReplacement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(n!=<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span>((n&amp;<span class="number">1</span>)==<span class="number">0</span>)</div><div class="line">                n&gt;&gt;&gt;=<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(n==<span class="number">3</span>||((n&gt;&gt;&gt;<span class="number">1</span>)&amp;<span class="number">1</span>)==<span class="number">0</span>)</div><div class="line">                    n--;</div><div class="line">                <span class="keyword">else</span> </div><div class="line">                    n++;</div><div class="line">            &#125;</div><div class="line">            cnt++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Number-of-Digit-One&quot;&gt;&lt;a href=&quot;#Number-of-Digit-One&quot; class=&quot;headerlink&quot; title=&quot;Number of Digit One&quot;&gt;&lt;/a&gt;Number of Digit One&lt;/h3&gt;&lt;h4 i
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title> Java 多线程整理 </title>
    <link href="http://yoursite.com/2017/03/14/2017-03-14--Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%B4%E7%90%86%20/"/>
    <id>http://yoursite.com/2017/03/14/2017-03-14--Java-多线程整理 /</id>
    <published>2017-03-13T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h3><ol>
<li>一个程序可能包含多个并发运行的任务，线程是指一个任务从头到尾的执行流。</li>
<li>多个线程共享CPU时间成为<strong>时间共享</strong>，而操作系统负责调度及分配资源给它们。</li>
<li>多线程可以使程序反应更快，交互性更强，执行效率更高。</li>
</ol>
<h3 id="创建任务和线程"><a href="#创建任务和线程" class="headerlink" title="创建任务和线程"></a>创建任务和线程</h3><ol>
<li>首选需要创建任务，为任务定义一个类。<strong>任务类必须实现Runnable接口</strong>，<strong>它只包含了一个run方法</strong>，这个方法用来告诉系统线程如何运行。</li>
<li>任务必须在线程中进行，故需要利用Thread创建任务的线程。</li>
<li>调用start() 方法告诉Java虚拟机该线程准备运行。</li>
<li>Java虚拟机通过调用任务的run()方法执行任务，Java虚拟机会自动调用该方法，无需特意调用。<strong>直接调用run()只是在同一个线程中执行该方法，而没有新线程被启动。</strong></li>
</ol>
<p><strong>例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> thread;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThread</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//Create Tasks</span></div><div class="line">		Runnable printA=<span class="keyword">new</span> printchar(<span class="string">'A'</span>,<span class="number">100</span>);</div><div class="line">		Runnable printB=<span class="keyword">new</span> printchar(<span class="string">'B'</span>,<span class="number">100</span>);</div><div class="line">		Runnable print100=<span class="keyword">new</span> printnum(<span class="number">100</span>);</div><div class="line">		<span class="comment">//Create Thread</span></div><div class="line">		Thread thread1=<span class="keyword">new</span> Thread(printA);</div><div class="line">		Thread thread2=<span class="keyword">new</span> Thread(printB);</div><div class="line">		Thread thread3=<span class="keyword">new</span> Thread(print100);</div><div class="line">		<span class="comment">//Run Thread</span></div><div class="line">		thread1.start();</div><div class="line">		thread2.start();</div><div class="line">		thread3.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">printchar</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">char</span> chartoprint;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> times;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">printchar</span><span class="params">(<span class="keyword">char</span> chartoprint, <span class="keyword">int</span> times)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.chartoprint = chartoprint;</div><div class="line">		<span class="keyword">this</span>.times = times;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</div><div class="line">			System.out.print(<span class="string">" "</span> + chartoprint);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">printnum</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> num;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">printnum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.num = num;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">			System.out.print(<span class="string">" "</span> + i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><p>Thread类包含的方法：</p>
<ul>
<li>Thread() 创建一个空的线程</li>
<li>Thread(Task: Runnable) 为指定任务创建一个线程</li>
<li>start() <strong>启动线程使得方法run() 被JVM调用</strong></li>
<li>isAlive() 测试线程当前是否正在运行</li>
<li>setPriority(p:int) 设置线程的优先级p(范围从1到10)</li>
<li>join() <strong>等待当前线程的结束，用于插入其他线程执行的过程中</strong></li>
<li>sleep(millis: long) <strong>使当前线程睡眠指定的数</strong></li>
<li>yield() <strong>使当前线程暂停并允许执行其他线程</strong></li>
<li>interrupt() 中断线程</li>
</ul>
<ol>
<li><p>Tread类还包含方法stop(), suspend(), resume() 但是由于这些方法具有内在的不安全因素，故被停用。<strong>可以通过给Thread赋值null表明停止以代替stop()。</strong></p>
</li>
<li><p>sleep方法可能跑出一个InterruptedException，这是一个<strong>必检异常</strong>。当一个休眠线程的interrupt()方法被调用时，就会发生这样的异常。<strong>必须将他放在try-catch块中。如果在一个循环中调用了sleep方法，应该将其放入块内，如果循环在块外，即使线程中断，也可能继续执行。</strong></p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Right</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">      	<span class="keyword">while</span>(...)&#123;</div><div class="line">          	...</div><div class="line">          	Thread.sleep(<span class="number">1000</span>);</div><div class="line">      	&#125;</div><div class="line">	&#125;</div><div class="line">  	<span class="keyword">catch</span>(InterruptedException ex)&#123;</div><div class="line">      	ex.printStackTrace();</div><div class="line">  	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Wrong</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">  	<span class="keyword">while</span>(...)&#123;</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">          	...</div><div class="line">          	Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125;</div><div class="line">  		<span class="keyword">catch</span>(InterruptedException ex)&#123;</div><div class="line">      		ex.printStackTrace();</div><div class="line">  		&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果总有一个优先级较高的线程在运行，或者有一个相同优先级的线程不退出，那么这个线程可能永远没有运行的机会。<strong>这种情况成为资源竞争或缺乏状态。</strong>为避免竞争现象，<strong>高优先级的线程必须定时地调用sleep方法或者yield方法，来给其他线程运行的机会。</strong></p>
</li>
</ol>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>由于为每个任务创建一个线程，对大量任务而言是不够高效的。为每个任务开始一个新线程<strong>可能会限制流量并且造成性能降低。</strong>线程池是管理并发执行任务个数的理想方法。</p>
<p><strong>Executor执行线程，而ExecutorService管理线程</strong></p>
<ol>
<li>Executors包含方法：<ul>
<li>newFixedThreadPool(numberOfThreads: int) 创建一个线程池，<strong>该线程池可并发执行的线程数量固定不变</strong>。当前任务结束后，它可以被重用以执行另一个任务。</li>
<li>newCachedThreadPool() 创建一个线程池，可以按需创建新线程，<strong>但当前面创建的线程可用时，重用它们。</strong></li>
</ul>
</li>
<li>ExecutorService包含方法：<ul>
<li>shutdown() 关闭执行器，但<strong>允许完成执行器中的任务</strong>。一旦关闭，不再接受新的任务。</li>
<li>shutdownNow() 即使当前线程池中还有未完成的线程，也立即关闭。<strong>返回未完成任务的清单。</strong></li>
<li>isShutdown() 已经关闭则返回true。</li>
<li>isTerminated() <strong>如果线程中所有任务都被终止，则返回true。</strong></li>
</ul>
</li>
<li>Executor包含方法：<ul>
<li>execute(Runnable object) 运行任务</li>
</ul>
</li>
</ol>
<p><strong>例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> thread;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThread</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ExecutorService executor=Executors.newFixedThreadPool(<span class="number">1</span>);</div><div class="line">		</div><div class="line">		executor.execute(<span class="keyword">new</span> printchar(<span class="string">'A'</span>,<span class="number">100</span>));</div><div class="line">		executor.execute(<span class="keyword">new</span> printchar(<span class="string">'B'</span>,<span class="number">100</span>));</div><div class="line">		executor.execute(<span class="keyword">new</span> printnum(<span class="number">100</span>));</div><div class="line">		</div><div class="line">		executor.shutdown();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上例中三个任务将交替执行</li>
<li>假如newFixedThreadPool(1) 则三个任务顺次执行</li>
<li>假如newCachedThreadPool() 则三个任务并行(交替执行)</li>
</ul>
<h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>任务之间以冲突的方式访问一个公共资源，这是多线程程序的普遍问题，称为<strong>竞争状态</strong>。 如果一个类的对象在多线程程序中没有导致竞争状态，则称这样的类为<strong>线程安全</strong>的。</p>
<ol>
<li><p>synchronized关键字</p>
<p>public synchronized void method(…)</p>
<p>一个执同步方法在执行之前需要加锁。<strong>对于实例方法，需给调用该方法的对象加锁；对于静态方法，要给这个类加锁。</strong>如果一个线程调用一个对象上的同步实例（静态）方法，首先给该对象(类)加锁，然后执行该方法，最后解锁。</p>
</li>
<li><p>同步语句</p>
<p>以下两种方法效果相同：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">xMethod</span><span class="params">()</span></span>&#123;</div><div class="line">  	<span class="comment">//Method Body</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xMethod</span><span class="params">()</span></span>&#123;</div><div class="line">  	<span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</div><div class="line">      	<span class="comment">//Method Body</span></div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同步语句允许设置同步方法中的部分代码，而不必是整个方法。这大大增强了程序的并发能力。</p>
</li>
</ol>
<h3 id="利用加锁同步"><a href="#利用加锁同步" class="headerlink" title="利用加锁同步"></a>利用加锁同步</h3><p>除了同步方法隐式加锁之外，还可以显示地加锁。</p>
<ol>
<li>java.util.concurrent.locks.Lock<ul>
<li>lock() 加锁</li>
<li>unlock() 释放锁</li>
<li><strong>newCondition() 返回绑定到Lock实例的新的Condition实例</strong></li>
</ul>
</li>
<li>java.util.concurrent.locks.ReentrantLock<ul>
<li>ReentrantLock() 等价于ReentrantLock(false)，假公平策略，将锁给任意一个正在等待的线程。</li>
<li>ReentrantLock(fair:boolean) 设定fair:true后为真的公平策略，将锁会分给等待时间最长的线程。</li>
</ul>
</li>
</ol>
<p><strong>使用：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Lock lock=<span class="keyword">new</span> ReentrantLock(); 		<span class="comment">//Create a lock</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span><span class="params">(...)</span></span>&#123;</div><div class="line">  lock.lock();		<span class="comment">//Acquire the lock</span></div><div class="line">  ....</div><div class="line">  <span class="keyword">try</span>()&#123;</div><div class="line">    ...</div><div class="line">  &#125;<span class="keyword">catch</span>()&#123;</div><div class="line">    ...</div><div class="line">  &#125;<span class="keyword">finally</span>&#123;</div><div class="line">    lock.unlock();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="线程间的协作"><a href="#线程间的协作" class="headerlink" title="线程间的协作"></a>线程间的协作</h3><p>使用条件(Condition)可以实现线程间的通信。条件是通过Lock对象的newCondition()方法创建的对象。创建条件之后，可以使用await(),signal(),signalAll()方法来实现线程间的相互通信。</p>
<p>一旦线程调用条件上的await()，线程就进入等待状态，等待恢复的信号。如果忘记对状态调用signal()或者signalAll()那么线程会永远等待下去。</p>
<p>条件由Lock对象创建，为了调用任意的方法，必须先拥有锁<code>lock.lock()</code>，如果没有获取锁就调用这些方法，会抛出异常。</p>
<p><strong>Condition包含的方法</strong>：</p>
<ul>
<li>await() 当前线程等待直到发生某个条件</li>
<li>signal() 唤醒一个等待线程</li>
<li>signalAll(): Condition 唤醒所有等待线程</li>
</ul>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.*;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCooperation</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Account account = <span class="keyword">new</span> Account();</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="comment">// Create a thread pool with two threads</span></div><div class="line">    ExecutorService executor = Executors.newFixedThreadPool(<span class="number">2</span>);</div><div class="line">    executor.execute(<span class="keyword">new</span> DepositTask());</div><div class="line">    executor.execute(<span class="keyword">new</span> WithdrawTask());</div><div class="line">    executor.shutdown();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Thread 1\t\tThread 2\t\tBalance"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// A task for adding an amount to the account</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DepositTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123; <span class="comment">// Purposely delay it to let the withdraw method proceed</span></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">          account.deposit((<span class="keyword">int</span>)(Math.random() * <span class="number">10</span>) + <span class="number">1</span>);</div><div class="line">          Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">        ex.printStackTrace();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// A task for subtracting an amount from the account</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WithdrawTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        account.withdraw((<span class="keyword">int</span>)(Math.random() * <span class="number">10</span>) + <span class="number">1</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// An inner class for account</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</div><div class="line">    <span class="comment">// Create a new lock</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">    <span class="comment">// Create a condition</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Condition newDeposit = lock.newCondition();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> balance = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> balance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</div><div class="line">      lock.lock(); <span class="comment">// Acquire the lock</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">while</span> (balance &lt; amount) &#123;</div><div class="line">          System.out.println(<span class="string">"\t\t\tWait for a deposit"</span>);</div><div class="line">          newDeposit.await();</div><div class="line">        &#125;</div><div class="line">        balance -= amount;</div><div class="line">        System.out.println(<span class="string">"\t\t\tWithdraw "</span> + amount +</div><div class="line">          <span class="string">"\t\t"</span> + getBalance());</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">        ex.printStackTrace();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">finally</span> &#123;</div><div class="line">        lock.unlock(); <span class="comment">// Release the lock</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</div><div class="line">      lock.lock(); <span class="comment">// Acquire the lock</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        balance += amount;</div><div class="line">        System.out.println(<span class="string">"Deposit "</span> + amount +</div><div class="line">          <span class="string">"\t\t\t\t\t"</span> + getBalance());</div><div class="line"></div><div class="line">        <span class="comment">// Signal thread waiting on the condition</span></div><div class="line">        newDeposit.signalAll();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">finally</span> &#123;</div><div class="line">        lock.unlock(); <span class="comment">// Release the lock</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="阻塞队列-Blocking-Queue"><a href="#阻塞队列-Blocking-Queue" class="headerlink" title="阻塞队列(Blocking Queue)"></a>阻塞队列(Blocking Queue)</h3><p>该接口继承于Queue接口，分为ArrayBlockingQueue, LinkedBlockingQueue, PriorityBlockingQueue。假如创建不受限的Linked,Priority，put方法永远不会阻塞。而Array通过数组实现阻塞队列，必须制定一个容量或者可选的公平性，在试图向满队列中插入或者空队列删除时会导致阻塞。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerProducerUsingBlockingQueue</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ArrayBlockingQueue&lt;Integer&gt; buffer =</div><div class="line">    <span class="keyword">new</span> ArrayBlockingQueue&lt;Integer&gt;(<span class="number">2</span>);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="comment">// Create a thread pool with two threads</span></div><div class="line">    ExecutorService executor = Executors.newFixedThreadPool(<span class="number">2</span>);</div><div class="line">    executor.execute(<span class="keyword">new</span> ProducerTask());</div><div class="line">    executor.execute(<span class="keyword">new</span> ConsumerTask());</div><div class="line">    executor.shutdown();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// A task for adding an int to the buffer</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">          System.out.println(<span class="string">"Producer writes "</span> + i);</div><div class="line">          buffer.put(i++); <span class="comment">// Add any value to the buffer, say, 1</span></div><div class="line">          <span class="comment">// Put the thread into sleep</span></div><div class="line">          Thread.sleep((<span class="keyword">int</span>)(Math.random() * <span class="number">10000</span>));</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">        ex.printStackTrace();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// A task for reading and deleting an int from the buffer</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">          System.out.println(<span class="string">"\t\t\tConsumer reads "</span> + buffer.take());</div><div class="line">          <span class="comment">// Put the thread into sleep</span></div><div class="line">          Thread.sleep((<span class="keyword">int</span>)(Math.random() * <span class="number">10000</span>));</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">        ex.printStackTrace();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>总是将release()方法放到finally子句中可以确保即使发生异常也能最终释放许可。</p>
<p>只有一个许可的信号量可以模拟一个相互排斥的锁。</p>
<p><strong>java.util.concurrent.Semaphore</strong></p>
<ul>
<li>Semaphore(numberOfPermits:int) 创建一个带指定书目许可的信号量，公平策略为false</li>
<li>Semaphore(numberOfPermits:int, fair: boolean) 同上述的区别为可设置fair</li>
<li>acquire() void 获取信号量的许可，如果无许可可用，线程将被锁住直到有许可可用</li>
<li>release() void 释放一个许可给该信号量</li>
</ul>
<p>例(新的Account内部类)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</div><div class="line">	<span class="comment">// Create a semaphore</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> balance = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> balance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			semaphore.acquire(); <span class="comment">// Acquire a permit</span></div><div class="line">			<span class="keyword">int</span> newBalance = balance + amount;</div><div class="line"></div><div class="line">			<span class="comment">// This delay is deliberately added to magnify the data-corruption</span></div><div class="line">			<span class="comment">// problem and make it easy to see</span></div><div class="line">			Thread.sleep(<span class="number">5</span>);</div><div class="line">			balance = newBalance;</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			semaphore.release(); <span class="comment">// Release a permit</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h3><p>当两个或多个线程需要在几个共享对象上获取锁时，可能会导致死锁。每个线程都在等待另外一个线程释放它所需要的锁。</p>
<p>此时，可以通过<strong>资源排序技术</strong>避免死锁的发生。给每个需要锁的对象都指定一个顺序，确保每个线程都按这个顺序来获取锁。</p>
<h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>任务在线程执行的过程中，可以是如下五个状态之一：<strong>新建、就绪、运行、阻塞或结束</strong>。</p>
<ol>
<li>新建一个线程，进入<strong>新建状态(New)</strong>。</li>
<li>调用线程的start()方法启动线程后，进入<strong>就绪状态(Ready)</strong>。是可运行的，但是可能还没有开始运行，操作系统必须分配CPU时间。</li>
<li>当开始运行时，进去<strong>运行状态(Running)</strong>，当发生以下两件事会进入<strong>就绪状态</strong>：<ul>
<li>给定的CPU时间用完</li>
<li>调用了线程的yield()方法</li>
</ul>
</li>
<li>有一下几个方法来使得线程进入<strong>阻塞状态</strong>(Blocked)：<ul>
<li>join() 等待目标程序的结束进入就绪状态</li>
<li>sleep() 等到睡眠时间到进入就绪装填</li>
<li>wait() 等待时间到进入就绪状态</li>
</ul>
</li>
<li>如果一个线程执行完了它的run()方法， 这个线程就结束了。</li>
<li>isAlive() 判断线程的状态，如果是就绪、阻塞或运行状态，返回true。若是新建没启动或者结束，返回false。</li>
</ol>
<p>​</p>
<p>​</p>
<p>​</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;线程的概念&quot;&gt;&lt;a href=&quot;#线程的概念&quot; class=&quot;headerlink&quot; title=&quot;线程的概念&quot;&gt;&lt;/a&gt;线程的概念&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;一个程序可能包含多个并发运行的任务，线程是指一个任务从头到尾的执行流。&lt;/li&gt;
&lt;li&gt;多个线程共享C
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java Basic" scheme="http://yoursite.com/tags/Java-Basic/"/>
    
  </entry>
  
  <entry>
    <title> Java基础知识(四)</title>
    <link href="http://yoursite.com/2017/02/28/2017-02-28--Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E5%9B%9B)/"/>
    <id>http://yoursite.com/2017/02/28/2017-02-28--Java基础知识(四)/</id>
    <published>2017-02-27T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单的泛型类"><a href="#简单的泛型类" class="headerlink" title="简单的泛型类"></a>简单的泛型类</h3><ol>
<li><p>泛型程序设计意味着编写的代码可以被很多不同类型的对象所重用。</p>
</li>
<li><p>一个泛型类(generic class) 就是具有一个或者多个类型变量的类，且泛型类中可以有多个类型变量，类定义中的类型变量指定方法的返回类型以及域和局部变量的类型。</p>
<p>如：public class Pair\<t,u>{…}</t,u></p>
<p>​    private T first;</p>
</li>
<li><p>在Java库中，使用变量<strong>E</strong>表示结合的元素类型，<strong>K和V</strong>分别表示表的关键字与值得类型，<strong>T(U,S)</strong> 表示任意类型。</p>
</li>
</ol>
<h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><ol>
<li><p>定义泛型方法时，类型变量放在修饰符(如public，static等)的后面，返回类型的前面。</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayAlg</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getMiddle</span><span class="params">(T... a)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a[a.length/<span class="number">2</span>];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>泛型方法可以定义在普通类中，也可以定义在泛型类中，当调用一个泛型方法时，在方法名前的尖括号放入具体的类型也可以省略。</p>
<p>如： String middle= ArrayAlg.\<string>getMiddle();</string></p>
<p>该调用中的<code>&lt;String&gt;</code>即可省略。</p>
</li>
</ol>
<h3 id="类型变量的限定"><a href="#类型变量的限定" class="headerlink" title="类型变量的限定"></a>类型变量的限定</h3><p>\<t extends="" boundingtype=""></t></p>
<ul>
<li>表示T应该是绑定类型(BoundingType)的子类型，T和绑定类型可以是类，也可以是接口。</li>
<li>限定类型用”&amp;”分隔，类型变量用”,”分隔</li>
<li>在Java的继承中，可以根据需要拥有多个接口超类型，但限定至多只有一个类；<strong>如果用一个类作为限定</strong>，他必须是限定列表中的第一个。</li>
</ul>
<h3 id="泛型代码和虚拟机"><a href="#泛型代码和虚拟机" class="headerlink" title="泛型代码和虚拟机"></a>泛型代码和虚拟机</h3><ol>
<li>虚拟机没有泛型类型对象，所有对象都属于普通类。</li>
<li>无论何时定义一个泛型类型，都自动提供了一个相应的原始类型。<strong>原始类型的名字就是删除类型参数后的泛型类型名。</strong> 擦除类型变量，并替换为限定类型（<strong>无限定用Object</strong>）。</li>
<li>类型擦除可能与多态发生冲突，可以利用<strong>桥方法</strong>来保持多态。</li>
<li>所有的类型参数都用他们的限定类型替换。</li>
</ol>
<h3 id="约束与局限性"><a href="#约束与局限性" class="headerlink" title="约束与局限性"></a>约束与局限性</h3><ol>
<li><p>类型参数不能使用基本类型，原因是<strong>类型擦除</strong>后，泛型类含有Object类型的域，而其不能存储基本类型(如double)的值。</p>
</li>
<li><p>所有的类型查询只产生原始类型</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Pair&lt;String&gt; stringPair=...;</div><div class="line">Pair&lt;Employee&gt; employeePair=...;</div><div class="line"><span class="keyword">if</span>(StringPair.getClass()==employeePair.getClass())	</div><div class="line"><span class="comment">//they are equal,与类型变量无关</span></div></pre></td></tr></table></figure>
</li>
<li><p>不能创建参数化类型的数组，但是生命类型为Pair\<string>[]的变量仍为合法的，不过不能用new Pair\<sting>[10]初始化。</sting></string></p>
<p>如果需要手机参数化类型对象，唯一安全有效的方法时使用ArrayList: <code>ArrayList&lt;Pair&lt;String&gt;&gt;</code></p>
</li>
<li><p>不能构造一个泛型数组，如果数组仅仅作为一个类的私有实力域，就可以将这个数组声明为Object[]，并且在获取元素时进行类型转换。P541</p>
</li>
<li><p>不能在静态域或者方法中引用类型变量</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> T singleInstance;		<span class="comment">//ERROR</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">getSingleInstance</span><span class="params">()</span>	<span class="comment">//ERROR</span></span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span>(ssingleInstance==<span class="keyword">null</span>)	construct <span class="keyword">new</span> instance of T</div><div class="line">    <span class="keyword">return</span> singleInstance;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>类型擦除</strong>之后，T失效，只剩下Singleton类。</p>
</li>
</ol>
<h3 id="泛型类型的继承规则"><a href="#泛型类型的继承规则" class="headerlink" title="泛型类型的继承规则"></a>泛型类型的继承规则</h3><ol>
<li>无论S与T有什么联系，通常，Pair\<s>与Pair\<t>没什么联系。</t></s></li>
<li>泛型类可以扩展或实现其他的泛型类。例如：ArrayList\<t>类实现了List\<t>接口。</t></t></li>
</ol>
<h3 id="通配符类型"><a href="#通配符类型" class="headerlink" title="通配符类型"></a>通配符类型</h3><blockquote>
<p><a href="http://www.v5cn.cn/?p=229" target="_blank" rel="external">通配符?与类型变量T的区别及使用</a></p>
<p><a href="http://www.jianshu.com/p/95f349258afb" target="_blank" rel="external">JAVA泛型通配符T，E，K，V区别，T以及Class\<t>，Class&lt;?&gt;的区别</t></a></p>
</blockquote>
<ol>
<li><p>通配符的超类型限定(例)</p>
<p>? super Manager</p>
<p>这个通配符限制为Manager的所有超类型，带有超类型限定的通配符<strong>可以为方法提供参数，但不能使用返回值</strong>。</p>
</li>
<li><p>通配符的子类型限定(例)</p>
<p>? extends Employee    </p>
<p>这个通配符限制为Employee的所有子类型，<strong>可以接受方法的返回值，但不能提供参数。</strong>即可以使用get()方法，但是无法使用set()方法。</p>
</li>
<li><p><strong>带有超类型限定的通配符可以向泛型对象写入，带有子类型限定的通配符可以从泛型对象读取。</strong></p>
</li>
<li><p>无限定通配符</p>
<p>Pair&lt;?&gt;</p>
<p>Pair&lt;?&gt;与Pair的本质不同在于：可以用任意Object对象调用原始的Pair类的setObject方法。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简单的泛型类&quot;&gt;&lt;a href=&quot;#简单的泛型类&quot; class=&quot;headerlink&quot; title=&quot;简单的泛型类&quot;&gt;&lt;/a&gt;简单的泛型类&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;泛型程序设计意味着编写的代码可以被很多不同类型的对象所重用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
    
      <category term="Java Basic" scheme="http://yoursite.com/tags/Java-Basic/"/>
    
  </entry>
  
  <entry>
    <title> Java基础知识(三) </title>
    <link href="http://yoursite.com/2017/02/26/2017-02-26--Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%B8%89)%20/"/>
    <id>http://yoursite.com/2017/02/26/2017-02-26--Java基础知识(三) /</id>
    <published>2017-02-25T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ol>
<li>接口用来描述类具有什么功能，而并不给出每个功能的具体实现。</li>
<li>接口中的所有<strong>方法</strong>自动地属于<strong>public</strong>，所以在接口中声明方法的时候，<strong>不必提供</strong>关键字public。而在实现接口的时候，必须将方法声明为public。</li>
<li>接口绝对不能含有实例域，也不能在接口中实现方法。</li>
<li>任何实现Comparable接口的类都需要包含compareTo方法，并且这个方法的参数必须是一个Object对象，返回一个整型数值。</li>
<li>不能构造接口的对象（x = new Comparable(…) //ERROR），但是可以声明接口的变量（Comparable x； //OK）；接口变量必须引用实现了接口的类对象。</li>
<li>接口中虽然<strong>不能包含实例域与或者静态方法</strong>，但却可以包含常量，与接口中的方法都自动地被设置为public一样，接口中的<strong>域将被自动设为public static final</strong>。</li>
<li>尽管每个类只能拥有一个超类，但是却可以实现多个接口，使用逗号将实现的各个接口分隔开。</li>
<li>之所以同时存在接口与抽象类，是因为7所述。同时，Java不支持多继承，接口可以提供多重继承的大多数好处。</li>
</ol>
<h3 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h3><ol>
<li><p>到拷贝一个变量时，原始变量与拷贝变量引用同一个对象。</p>
</li>
<li><p>假如想创建一个对象的copy，且最初状态与original一样，而以后也可以<strong>各自改变状态</strong>的话，就需要使用<strong>clone方法</strong>。</p>
</li>
<li><p>clone方法是Object类的一个protected方法。</p>
</li>
<li><p>若原始对象与浅克隆对象共享的子对象是不可变的，<strong>浅拷贝</strong>不会产生任何问题。（如：子对象属于String类这种不允许改变的类）同时，假如子对象在生命周期内不发生变化也没问题。</p>
</li>
<li><p>即使clone的默认实现(浅拷贝)能够满足需求，也应该实现Cloneable接口，将clone<strong>重定义为public</strong>，并调用super.clone();</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span></div><div class="line">&#123;</div><div class="line"> 	<span class="function"><span class="keyword">public</span> Employee <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> (Employee)<span class="keyword">super</span>.clone();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;接口用来描述类具有什么功能，而并不给出每个功能的具体实现。&lt;/li&gt;
&lt;li&gt;接口中的所有&lt;strong&gt;方法&lt;/strong&gt;
    
    </summary>
    
    
      <category term="Java Basic" scheme="http://yoursite.com/tags/Java-Basic/"/>
    
  </entry>
  
  <entry>
    <title> Java基础知识(二)</title>
    <link href="http://yoursite.com/2017/02/25/2017-02-25--Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2017/02/25/2017-02-25--Java基础知识(二)/</id>
    <published>2017-02-24T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类、超类、子类"><a href="#类、超类、子类" class="headerlink" title="类、超类、子类"></a>类、超类、子类</h3><ol>
<li>Java中所有的继承都是公有继承</li>
<li>若希望调用超类（父类）中的方法，而不是当前类中的某个方法，可以使用特定的关键字<strong>super</strong>调用。但super与<strong>this</strong>不同，super不是一个对象的引用，它只是一个指示编译器调用超类方法的特殊关键字。</li>
<li>由于子类不能对父类的私有域初始化，所以可以通过super实现对超类构造器（含有参数的）的调用，使用super调用构造器的语句必须是子类构造器的第一句。若没有调用，则会默认调用无参数的构造器。</li>
<li>一个对象变量可以指示多种实际类型的现象被称为<strong>多态</strong>。 在运行时能够自动地选择调用哪个方法的现象叫<strong>动态绑定</strong>。</li>
<li>对象方法的调用过程中：<ul>
<li>假如调用的方法是private、final、static方法，则编译器准确知道调用哪个方法，这种即<strong>静态绑定</strong>。</li>
<li>虚拟机预先会为每个类创建一个<strong>方法表</strong>，其中列出所有方法的签名和实际调用方法， 则在调用过程中查表即可。</li>
</ul>
</li>
<li>在覆盖一个方法的时候，子类方法不能低于超类方法的可见性。即假如超类中的方法是public，子类中覆盖该方法的时候也要定义为public。</li>
<li>定义为<strong>final</strong>的类或方法无法被继承或者覆盖。一个类被定义为final，只有其中的方法自动成为final，不包括域。</li>
<li>强制类型转换：<ul>
<li>只能在继承层次内进行类型转换</li>
<li>在将超类转换成子类之前，应该使用instanceof进行检查（当x=null时，x istanceof C 返回值是false，而非报错）</li>
</ul>
</li>
<li>包含一个或多个抽象方法的类本身必须被声明为抽象类；抽象方法充当着占位的角色，它们的具体实现在子类中；抽象类不能被实例化。</li>
<li><strong>Java中用于控制可见性的4个访问修饰符</strong>：</li>
</ol>
<ul>
<li>仅对本类可见：private</li>
<li>对所有类可见：public<ul>
<li>对本包和所有子类可见：protected</li>
<li>对本包可见：默认，无需修饰符</li>
</ul>
</li>
</ul>
<h3 id="Object：所有类的超类"><a href="#Object：所有类的超类" class="headerlink" title="Object：所有类的超类"></a>Object：所有类的超类</h3><ol>
<li><p>hashCode方法：</p>
<ul>
<li>字符串的散列码是由内容导出的，所以只要字符串内容一致，他们的hashcode也相同</li>
<li>若类中未定义hashCode方法，则由Object类默认的hashCode方法导出对象的存储地址</li>
</ul>
</li>
<li><p>equals方法：</p>
<p>在Object类中，这个方法将判断两个对象是否具有相同的引用。</p>
</li>
</ol>
<h3 id="泛型数组列表"><a href="#泛型数组列表" class="headerlink" title="泛型数组列表"></a>泛型数组列表</h3><ol>
<li>ArrayList是一个采用<strong>类型参数</strong>的<strong>泛型类</strong>，使用起来有点像数组，具有自动调节数组容量的功能。</li>
<li>ensureCapacity(n) 该方法将分配一个包含n个对象的内部数组，然后调用n次add，而不用重新分配空间。</li>
<li>trimToSize() 一旦能够确认数组列表的大小不再发生变化时，调用该方法会将存储区域的大小调整为当前元素数量所需的存储空间数目。垃圾回收站将回收多余的存储空间。<strong>应该在确认不会再添加任何元素时，调用trimToSize()</strong>。</li>
<li>数组列表自动扩展容量的便利增加了访问元素语法的复杂程度。<strong>set(i,x)方法</strong>只能替换数组中已经存在的元素内容，要添加新的元素需要使用<strong>add方法</strong>。</li>
<li>若要灵活地扩展数组，又要方便地访问数组元素，可采用以下方式：<ul>
<li>先利用ArrayList创建数组list，并添加所有的元素</li>
<li>执行完以上操作，new一个同样大小的数组a，利用<strong>list.toArray(a)</strong>转换为正常数组</li>
</ul>
</li>
<li>remove(n) 可以从数组中删除位于位置n的元素，而位于该位置后的所有元素将向前移动一个位置，并且数组的大小减1。</li>
</ol>
<h3 id="对象包装器与自动装箱"><a href="#对象包装器与自动装箱" class="headerlink" title="对象包装器与自动装箱"></a>对象包装器与自动装箱</h3><ol>
<li>所有的基本类型都有一个与之对应的类，如int对应的Integer等等，这些类被称作<strong>包装器(wrapper)</strong>。</li>
<li><strong>对象包装器类是不可变的</strong>，即一旦构造了包装器，就不允许更改包装在其中的值。</li>
<li>由于每个值分别包装在对象中，所以ArrayList\<integer>的效率远远低于int[ ]数组。</integer></li>
<li><strong>自动装箱</strong>即在应用过程中，对基本类型自动变换为包装器的处理，自动拆箱同理。</li>
<li>== 运算符也可应用于对象包装器对象，只不过检测的是对象是否只想同一个存储区域。</li>
</ol>
<h3 id="参数变量可变的方法"><a href="#参数变量可变的方法" class="headerlink" title="参数变量可变的方法"></a>参数变量可变的方法</h3><p>常用的printf即参数变量可变的方法，同时用户也可以自己定义可变参数的方法。</p>
<p><strong>例</strong>（计算若干个数值的最大值）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span>… values)</span></span>&#123;</div><div class="line">	<span class="keyword">double</span> largest=Double.MIN_VALUE;</div><div class="line">  	<span class="keyword">for</span>(<span class="keyword">double</span> v: values) <span class="keyword">if</span>(v&gt;largest)	largest=v;</div><div class="line">  	<span class="keyword">return</span> largest;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;类、超类、子类&quot;&gt;&lt;a href=&quot;#类、超类、子类&quot; class=&quot;headerlink&quot; title=&quot;类、超类、子类&quot;&gt;&lt;/a&gt;类、超类、子类&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Java中所有的继承都是公有继承&lt;/li&gt;
&lt;li&gt;若希望调用超类（父类）中的方法，而不
    
    </summary>
    
    
      <category term="Java Basic" scheme="http://yoursite.com/tags/Java-Basic/"/>
    
  </entry>
  
  <entry>
    <title> Java基础知识(一)</title>
    <link href="http://yoursite.com/2017/02/24/2017-02-24--Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%B8%80)/"/>
    <id>http://yoursite.com/2017/02/24/2017-02-24--Java基础知识(一)/</id>
    <published>2017-02-23T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用户自定义类"><a href="#用户自定义类" class="headerlink" title="用户自定义类"></a>用户自定义类</h3><ol>
<li>不要编写返回引用可变对象的访问器方法        P113</li>
<li>将<strong>函数</strong>设置为<strong>private</strong>:<ul>
<li>希望将一个计算代码划分成若干个独立的辅助方法</li>
<li>需要一个特别的协议以及一个特别的调用次序</li>
</ul>
</li>
<li>将实例域定义为<strong>final</strong>，必须确保在每一个构造器执行之后，这个域的值被设置，并且在后面的操作中，不能够对它继续操作。<strong>final</strong>大多数时候应用于基本类型域和不可变类的域。</li>
</ol>
<h3 id="静态域与静态方法"><a href="#静态域与静态方法" class="headerlink" title="静态域与静态方法"></a>静态域与静态方法</h3><ol>
<li><strong>static</strong>静态域（变量），每个类中只有<strong>一个</strong>这样的域，若干个对象共享这样一个静态域，静态域是<strong>属于类的，不属于任何一个对象</strong>。</li>
<li><strong>static</strong>静态常量使用的较多，比如Math.PI, System.out等等。</li>
<li>静态方法是一种不能向对象实施操作的方法，如 Math.pow， 在运算的过程中，不使用任何Math对象，即没有隐式的函数。可将静态方法视为<strong>没有this参数</strong>的方法。<ul>
<li>一个方法不需要访问对象状态，其所需参数都是通过显式参数提供的</li>
<li>一个方法只需要访问类的静态域(如P117的getNextID方法)</li>
</ul>
</li>
<li>每一个类可以有一个main方法，这是一个常用于对类进行单元测试的技巧</li>
</ol>
<h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><ol>
<li>方法参数分为两种：基本数据类型（数字、布尔值），对象引用。</li>
<li>Java对对象采用的<strong>不是</strong>引用调用，而<strong>是值传递</strong> （引用调用的反例即无法进行swap，swap(a,b)中交换的是对两个对象引用的拷贝）</li>
<li>Java 方法参数的使用情况：<ul>
<li>一个方法不能修改一个基本数据类型的参数（即数值型和布尔型）</li>
<li>一个方法可以改变一个对象参数的状态</li>
<li>一个方法不能让对象参数引用一个新的对象</li>
</ul>
</li>
</ol>
<h3 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h3><ol>
<li><strong>重载</strong>：多个方法有相同的名字、不同的参数，便产生了重载。</li>
<li>如果没有初始化类中的域，将会被初始化为默认值 （0，false或null）。</li>
<li>如果类中提供了至少一个构造器，但是没有提供无参数的构造器，则在构造对象时如果没有提供参数就会被视为不合法。</li>
<li>构造器的明明规则：在每个参数前面加上一个前缀”a”，或者直接使用参数的名字，而利用this指示隐式参数。</li>
<li>如果构造器的第一个语句形如this(…)，这个构造器将调用同一个类的另一个构造器。</li>
<li>静态域可以使用静态的初始化块进行初始化。</li>
<li>由于Java有自动的垃圾回收器，不需要人工回收内存，所以Java不支持析构器。</li>
</ol>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ol>
<li><p>import语句不仅可以导入类，还可以导入静态方法和静态域。（如 import static java.lang.System.*后可以直接使用out）但是这种编写形式不利于代码的清晰度。</p>
</li>
<li><p>包作用域：</p>
<ul>
<li>public 可以被任意的类使用</li>
<li>private  只能被定义它们的类使用</li>
<li>没有只能public/private，可以被同一个包中的所有方法访问</li>
</ul>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;用户自定义类&quot;&gt;&lt;a href=&quot;#用户自定义类&quot; class=&quot;headerlink&quot; title=&quot;用户自定义类&quot;&gt;&lt;/a&gt;用户自定义类&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;不要编写返回引用可变对象的访问器方法        P113&lt;/li&gt;
&lt;li&gt;将&lt;strong
    
    </summary>
    
    
      <category term="Java Basic" scheme="http://yoursite.com/tags/Java-Basic/"/>
    
  </entry>
  
  <entry>
    <title> Merge Intervals || Wiggle Sort II</title>
    <link href="http://yoursite.com/2017/02/23/2017-02-23--Merge-Intervals-%7C%7C-Wiggle-Sort-II/"/>
    <id>http://yoursite.com/2017/02/23/2017-02-23--Merge-Intervals-||-Wiggle-Sort-II/</id>
    <published>2017-02-22T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Merge-Intervals"><a href="#Merge-Intervals" class="headerlink" title="Merge Intervals"></a>Merge Intervals</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a collection of intervals, merge all overlapping intervals.</p>
<p>For example,</p>
<p>Given <code>[1,3],[2,6],[8,10],[15,18]</code>,</p>
<p>return <code>[1,6],[8,10],[15,18]</code>.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>利用Collections.sort 重写Compare函数对Interval内区间进行排序，排序的原则是以start，end进行升序排序，排序后进行区间的合并。</p>
<ul>
<li>end记录可合并区间的最大上界，start记录下界</li>
<li>当前区间不可合并时，将区间[start,end]加入结果</li>
<li>在循环结束后，将最后一个区间加入结果</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() &#123; start = 0; end = 0; &#125;</div><div class="line"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Interval&gt; <span class="title">merge</span><span class="params">(List&lt;Interval&gt; intervals)</span> </span>&#123;</div><div class="line">        List&lt;Interval&gt; res=<span class="keyword">new</span> ArrayList&lt;Interval&gt;();</div><div class="line">        <span class="keyword">if</span>(intervals.size()&lt;=<span class="number">1</span>) <span class="keyword">return</span> intervals;</div><div class="line">        Collections.sort(intervals, <span class="keyword">new</span> Comparator&lt;Interval&gt;()&#123;</div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Interval i1, Interval i2)</span></span>&#123;</div><div class="line">              <span class="keyword">if</span>(i1.start!=i2.start)&#123;</div><div class="line">                  <span class="keyword">return</span> i1.start-i2.start;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">return</span> i1.end-i2.end;</div><div class="line">          &#125;  </div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> start=intervals.get(<span class="number">0</span>).start;</div><div class="line">        <span class="keyword">int</span> end=intervals.get(<span class="number">0</span>).end;</div><div class="line">        <span class="keyword">for</span>(Interval tmp:intervals)&#123;</div><div class="line">            <span class="keyword">if</span>(tmp.start&lt;=end)&#123;</div><div class="line">                end=Math.max(end,tmp.end);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                res.add(<span class="keyword">new</span> Interval(start,end));</div><div class="line">                start=tmp.start;</div><div class="line">                end=tmp.end;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        res.add(<span class="keyword">new</span> Interval(start,end));</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Wiggle-Sort-II"><a href="#Wiggle-Sort-II" class="headerlink" title="Wiggle Sort II"></a>Wiggle Sort II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given an unsorted array <code>nums</code>, reorder it such that <code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]</code>….</p>
<p><strong>Example:</strong></p>
<p>(1) Given nums = <code>[1, 5, 1, 1, 6, 4]</code>, one possible answer is <code>[1, 4, 1, 5, 1, 6]</code>. </p>
<p>(2) Given nums = <code>[1, 3, 2, 2, 3, 1]</code>, one possible answer is <code>[2, 3, 1, 3, 1, 2]</code>.</p>
<p><strong>Note:</strong></p>
<p>You may assume all input has valid answer.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p><strong>O(n)/O(nlogn)+O(n)</strong> 解法</p>
<p>将原本的无序数组排序，从中位数mid分为前后两半部分，依次交替从前半部分和后半部分倒序选元素加入结果数组，前半部分的元素位于脚标为偶数的位置，后半部分的元素位于脚标为奇数的位置</p>
<p><strong>O(n)+O(1)</strong>解法</p>
<blockquote>
<p><a href="https://discuss.leetcode.com/topic/33557/java-18-ms-true-o-1-space-cheated-o-n-time-using-binary-search" target="_blank" rel="external">LeetCode Discussion</a></p>
</blockquote>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wiggleSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>[] tmp=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        <span class="keyword">int</span> mid=(nums.length+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> right=nums.length;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            tmp[i]= (i&amp;<span class="number">1</span>)==<span class="number">0</span>?nums[--mid]:nums[--right];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            nums[i]=tmp[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Merge-Intervals&quot;&gt;&lt;a href=&quot;#Merge-Intervals&quot; class=&quot;headerlink&quot; title=&quot;Merge Intervals&quot;&gt;&lt;/a&gt;Merge Intervals&lt;/h3&gt;&lt;h4 id=&quot;Question&quot;&gt;&lt;a 
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title> Sort 合集 </title>
    <link href="http://yoursite.com/2017/02/23/2017-02-23--Sort-%E5%90%88%E9%9B%86%20/"/>
    <id>http://yoursite.com/2017/02/23/2017-02-23--Sort-合集 /</id>
    <published>2017-02-22T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Intersection-of-Two-Arrays"><a href="#Intersection-of-Two-Arrays" class="headerlink" title="Intersection of Two Arrays"></a>Intersection of Two Arrays</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given two arrays, write a function to compute their intersection.</p>
<p><strong>Example:</strong><br>Given <em>nums1</em> = <code>[1, 2, 2, 1]</code>, <em>nums2</em> = <code>[2, 2]</code>, return <code>[2]</code>.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>两个HashSet分别用于找Intersection和存储不重复结果</p>
<p><strong>时间复杂度</strong> ：O(n)</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</div><div class="line">        Set&lt;Integer&gt; res=<span class="keyword">new</span> HashSet&lt;Integer&gt;();</div><div class="line">        Set&lt;Integer&gt; set=<span class="keyword">new</span> HashSet&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:nums1)&#123;</div><div class="line">            set.add(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j:nums2)&#123;</div><div class="line">            <span class="keyword">if</span>(set.contains(j))</div><div class="line">                res.add(j);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span>[] result=<span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</div><div class="line">        <span class="keyword">int</span> m=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> tmp:res)&#123;</div><div class="line">            result[m++]=tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Intersection-of-Two-Arrays-II"><a href="#Intersection-of-Two-Arrays-II" class="headerlink" title="Intersection of Two Arrays II"></a>Intersection of Two Arrays II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given two arrays, write a function to compute their intersection.</p>
<p><strong>Example:</strong><br>Given <em>nums1</em> = <code>[1, 2, 2, 1]</code>, <em>nums2</em> = <code>[2, 2]</code>, return <code>[2, 2]</code>.</p>
<p><strong>Note:</strong></p>
<ul>
<li>Each element in the result should appear as many times as it shows in both arrays.</li>
<li>The result can be in any order.</li>
</ul>
<p><strong>Follow up:</strong></p>
<ul>
<li>What if the given array is already sorted? How would you optimize your algorithm?</li>
<li>What if <em>nums1</em>‘s size is small compared to <em>nums2</em>‘s size? Which algorithm is better?</li>
<li>What if elements of <em>nums2</em> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>
</ul>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>将两个数组排序之后利用两个指针跟踪两个数组的元素进行比较，相等时加入结果，否则较小的数字方的指针向下移动。</li>
<li>或者不排序，利用HashMap来记录每个元素的出现次数，每遇到重复便将次数-1</li>
</ul>
<p><strong>Answer To Third Follow Up Question</strong></p>
<ol>
<li>假如只有nums2不能放入内存中，则将nums1放入HashMap中，每次从disk中读取恰巧可以放入内存中大小的数据，记录intersection</li>
<li>假如nums1 与 nums2 均不能放入内存中，则对其分别利用外排(external sort)进行排序,则每次读取比如2G的数据（内存中可以放的下的大小），利用Two Pointers找到intersection，循环执行这个步骤直至没有数据可比较。</li>
</ol>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</div><div class="line">        Arrays.sort(nums1);</div><div class="line">        Arrays.sort(nums2);</div><div class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;nums1.length&amp;&amp;j&lt;nums2.length)&#123;</div><div class="line">            <span class="keyword">if</span>(nums1[i]==nums2[j])&#123;</div><div class="line">                res.add(nums1[i]);</div><div class="line">                i++;</div><div class="line">                j++;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums1[i]&lt;nums2[j])&#123;</div><div class="line">                i++;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> m=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] result=<span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> tmp:res)&#123;</div><div class="line">            result[m++]=tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Shorter Version</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, l1 = nums1.length, l2 = nums2.length;</div><div class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[l1];</div><div class="line">    Arrays.sort(nums1);</div><div class="line">    Arrays.sort(nums2);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; l1 &amp;&amp; j &lt; l2;)</div><div class="line">        <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) i++;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums1[i] == nums2[j++]) result[k++] = nums1[i++];</div><div class="line">    <span class="keyword">return</span> Arrays.copyOf(result, k);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="H-Index"><a href="#H-Index" class="headerlink" title="H-Index"></a>H-Index</h3><blockquote>
<p><a href="https://yuchen9459.github.io/2016/10/12/H-Index-series/" target="_blank" rel="external">H Index I/ II</a></p>
</blockquote>
<p>桶排序思想</p>
<h3 id="Valid-Anagram"><a href="#Valid-Anagram" class="headerlink" title="Valid Anagram"></a>Valid Anagram</h3><h4 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h4><p>Given two strings <em>s</em> and <em>t</em>, write a function to determine if <em>t</em> is an anagram of <em>s</em>.</p>
<p>For example,<br><em>s</em> = “anagram”, <em>t</em> = “nagaram”, return true.<br><em>s</em> = “rat”, <em>t</em> = “car”, return false.</p>
<h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><p>利用int数组记录每个字母出现的次数，第一个串遍历的过程中++，第二个串遍历的过程中- - ，最后判断是否数组中所有的元素均为0.</p>
<h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] letter=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="string">'z'</span>+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">            letter[s.charAt(i)]++;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;t.length();j++)</div><div class="line">            letter[t.charAt(j)]--;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="string">'a'</span>;k&lt;=<span class="string">'z'</span>;k++)&#123;</div><div class="line">            <span class="keyword">if</span>(letter[k]!=<span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Largest-Number"><a href="#Largest-Number" class="headerlink" title="Largest Number"></a>Largest Number</h3><blockquote>
<p><a href="https://yuchen9459.github.io/2016/12/28/Largest-Number/" target="_blank" rel="external">Largest Number</a></p>
</blockquote>
<h3 id="Sort-List"><a href="#Sort-List" class="headerlink" title="Sort List"></a>Sort List</h3><h4 id="Question-3"><a href="#Question-3" class="headerlink" title="Question"></a>Question</h4><p>Sort a linked list in <em>O</em>(<em>n</em> log <em>n</em>) time using constant space complexity.</p>
<h4 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h4><p><strong>时间复杂度</strong> O(n)         <strong>空间复杂度</strong> O(logn) </p>
<p>调用了log(length)次Merge</p>
<h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</div><div class="line">      <span class="keyword">return</span> head;</div><div class="line">        </div><div class="line">    <span class="comment">// step 1. cut the list to two halves</span></div><div class="line">    ListNode prev = <span class="keyword">null</span>, slow = head, fast = head;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</div><div class="line">      prev = slow;</div><div class="line">      slow = slow.next;</div><div class="line">      fast = fast.next.next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    prev.next = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// step 2. sort each half</span></div><div class="line">    ListNode l1 = sortList(head);</div><div class="line">    ListNode l2 = sortList(slow);</div><div class="line">    </div><div class="line">    <span class="comment">// step 3. merge l1 and l2</span></div><div class="line">    <span class="keyword">return</span> merge(l1, l2);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function">ListNode <span class="title">merge</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">    ListNode l = <span class="keyword">new</span> ListNode(<span class="number">0</span>), p = l;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</div><div class="line">        p.next = l1;</div><div class="line">        l1 = l1.next;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        p.next = l2;</div><div class="line">        l2 = l2.next;</div><div class="line">      &#125;</div><div class="line">      p = p.next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (l1 != <span class="keyword">null</span>)</div><div class="line">      p.next = l1;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (l2 != <span class="keyword">null</span>)</div><div class="line">      p.next = l2;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> l.next;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Insertion-Sort-List-Sort-List"><a href="#Insertion-Sort-List-Sort-List" class="headerlink" title="Insertion Sort List || Sort List"></a>Insertion Sort List || Sort List</h3><blockquote>
<p><a href="https://yuchen9459.github.io/2016/12/26/List-Sort-Series/" target="_blank" rel="external">List Sort Series</a></p>
</blockquote>
<h3 id="Sort-Colors"><a href="#Sort-Colors" class="headerlink" title="Sort Colors"></a>Sort Colors</h3><h4 id="Question-4"><a href="#Question-4" class="headerlink" title="Question"></a>Question</h4><p>Given an array with <em>n</em> objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>
<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>
<h4 id="Analysis-4"><a href="#Analysis-4" class="headerlink" title="Analysis"></a>Analysis</h4><p>在五个月内做了三遍的题还是一直在错，基本思想是red，blue两个指针，将元素0，2分别交换到数组首和末尾。</p>
<ul>
<li>交换的循环条件是i小于等于blue的指针</li>
<li>由于停止的条件是i&lt;=blue，所以应该先交换blue，后交换red</li>
</ul>
<h4 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> zero=<span class="number">0</span>,two=nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=two;i++)&#123;</div><div class="line">            <span class="keyword">while</span>(nums[i]==<span class="number">2</span>&amp;&amp;i&lt;two)  swap(nums,i,two--);</div><div class="line">            <span class="keyword">while</span>(nums[i]==<span class="number">0</span>&amp;&amp;i&gt;zero)  swap(nums,i,zero++);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> tmp=nums[a];</div><div class="line">        nums[a]=nums[b];</div><div class="line">        nums[b]=tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Insert-Interval-Merge-Intervals"><a href="#Insert-Interval-Merge-Intervals" class="headerlink" title="Insert Interval||Merge Intervals"></a>Insert Interval||Merge Intervals</h3><blockquote>
<p><a href="https://yuchen9459.github.io/2016/11/30/Insert-Interval-Merge-Intervals/" target="_blank" rel="external">Answer</a></p>
</blockquote>
<p>注意所给区间均为闭区间，所以在控制边界调节时（合并等）在等号成立的时候也需要执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Intersection-of-Two-Arrays&quot;&gt;&lt;a href=&quot;#Intersection-of-Two-Arrays&quot; class=&quot;headerlink&quot; title=&quot;Intersection of Two Arrays&quot;&gt;&lt;/a&gt;Intersec
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title> Count Complete Tree Nodes </title>
    <link href="http://yoursite.com/2017/02/09/2017-02-09--Count-Complete-Tree-Nodes%20/"/>
    <id>http://yoursite.com/2017/02/09/2017-02-09--Count-Complete-Tree-Nodes /</id>
    <published>2017-02-08T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Count-Complete-Tree-Nodes"><a href="#Count-Complete-Tree-Nodes" class="headerlink" title="Count Complete Tree Nodes"></a>Count Complete Tree Nodes</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a <strong>complete</strong> binary tree, count the number of nodes.</p>
<p><strong>Definition of a complete binary tree from </strong><a href="http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees" target="_blank" rel="external"><strong>Wikipedia</strong></a><strong>:</strong></p>
<p>In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.</p>
<h4 id="Anaylsis"><a href="#Anaylsis" class="headerlink" title="Anaylsis"></a>Anaylsis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/15533/concise-java-solutions-o-log-n-2" target="_blank" rel="external">LeetCode Discussion</a></p>
</blockquote>
<p>普通的依次遍历每个节点返回总个数会TLE</p>
<p>由于题目要求查的是完全二叉树的节点个数，而完全二叉树只有最底层的叶子节点可以为空，存在的叶子节点都在最下层的左侧，利用该性质可以尽快得出总节点个数。</p>
<p>设一完全二叉树节点root的高度为h，判断右子树高度=h-1是否成立</p>
<ul>
<li>成立。root的左子树为一棵高度为h-1的完全二叉树。节点个数count=2^(h-1)+右子树节点个数</li>
<li>不成立。root的右子树为一棵高度为h-2的完全二叉树。节点个数count=2^(h-2)+左子树节点个数</li>
</ul>
<p>为了方便计算，height函数返回的树高度为1~n-1</p>
<p>I have O(log(n)) steps. Finding a height costs O(log(n)). So overall O(log(n)^2).</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">    	<span class="keyword">return</span> helper(root);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">      	<span class="keyword">if</span>(root==<span class="keyword">null</span>)</div><div class="line">          <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      	<span class="keyword">return</span> <span class="number">1</span>+helper(root.left)+helper(root.right);</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> h=height(root);</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(root!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(height(root.right)==h-<span class="number">1</span>)&#123;        <span class="comment">//Left child is a complete tree with h-1 height</span></div><div class="line">                cnt+=<span class="number">1</span>&lt;&lt;h;</div><div class="line">                root=root.right;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                cnt+=<span class="number">1</span>&lt;&lt;h-<span class="number">1</span>;</div><div class="line">                root=root.left;</div><div class="line">            &#125;</div><div class="line">            h--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (root==<span class="keyword">null</span>)?-<span class="number">1</span>:height(root.left)+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Count-Complete-Tree-Nodes&quot;&gt;&lt;a href=&quot;#Count-Complete-Tree-Nodes&quot; class=&quot;headerlink&quot; title=&quot;Count Complete Tree Nodes&quot;&gt;&lt;/a&gt;Count Compl
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title> Reorder List || Partition List </title>
    <link href="http://yoursite.com/2017/02/08/2017-02-08--Reorder-List-%7C%7C-Partition-List%20/"/>
    <id>http://yoursite.com/2017/02/08/2017-02-08--Reorder-List-||-Partition-List /</id>
    <published>2017-02-07T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Reorder-List"><a href="#Reorder-List" class="headerlink" title="Reorder List"></a>Reorder List</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a singly linked list <em>L</em>: <em>L</em>0→<em>L</em>1→…→<em>Ln</em>-1→<em>L</em>n,</p>
<p>reorder it to: <em>L</em>0→<em>Ln</em>→<em>L</em>1→<em>Ln</em>-1→<em>L</em>2→<em>Ln</em>-2→…</p>
<p>You must do this in-place without altering the nodes’ values.</p>
<p>For example,</p>
<p>Given {1,2,3,4}, reorder it to {1,4,2,3}.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>将一个链表以中点分为两段 l1,l2，并将 l2 reverse</li>
<li>遍历两个链表，将第二半链表中的点依次插入第一个链表中</li>
<li>注意在遍历插入节点之前先将第一半链表最后节点置空null</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        ListNode slow=head;</div><div class="line">        ListNode fast=head;</div><div class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;     <span class="comment">// Find the mid-point</span></div><div class="line">            slow=slow.next;</div><div class="line">            fast=fast.next.next;</div><div class="line">        &#125;</div><div class="line">        ListNode reverseHead=slow.next;</div><div class="line">        slow.next=<span class="keyword">null</span>;</div><div class="line">        reverseHead=reverse(reverseHead);</div><div class="line">        ListNode cur=head;</div><div class="line">        <span class="keyword">while</span>(reverseHead!=<span class="keyword">null</span>)&#123;</div><div class="line">            ListNode next=cur.next;</div><div class="line">            ListNode rnext=reverseHead.next;</div><div class="line">            cur.next=reverseHead;</div><div class="line">            reverseHead.next=next;</div><div class="line">            reverseHead=rnext;</div><div class="line">            cur=next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;</div><div class="line">        ListNode prev=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode cur=head;</div><div class="line">        prev.next=head;</div><div class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>&amp;&amp;cur.next!=<span class="keyword">null</span>)&#123;</div><div class="line">            ListNode tmp=cur.next;</div><div class="line">            cur.next=tmp.next;</div><div class="line">            tmp.next=prev.next;</div><div class="line">            prev.next=tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> prev.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Partition-List"><a href="#Partition-List" class="headerlink" title="Partition List"></a>Partition List</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a linked list and a value <em>x</em>, partition it such that all nodes less than <em>x</em> come before nodes greater than or equal to <em>x</em>.</p>
<p>You should preserve the original relative order of the nodes in each of the two partitions.</p>
<p>For example,</p>
<p>Given 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2 and <em>x</em> = 3,</p>
<p>return 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p> 两个链表分别代表依次插入符合条件的节点，最后连接在一起，注意将结果链表尾节点置空。</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">partition</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">       ListNode s=<span class="keyword">new</span> ListNode(<span class="number">0</span>),b=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">       ListNode scur=s,bcur=b;</div><div class="line">       <span class="keyword">while</span>(head!=<span class="keyword">null</span>)&#123;</div><div class="line">           <span class="keyword">if</span>(head.val&gt;=x)&#123;</div><div class="line">               bcur.next=head;</div><div class="line">               bcur=bcur.next;</div><div class="line">           &#125;<span class="keyword">else</span>&#123;</div><div class="line">               scur.next=head;</div><div class="line">               scur=scur.next;</div><div class="line">           &#125;</div><div class="line">           head=head.next;</div><div class="line">       &#125;</div><div class="line">       bcur.next=<span class="keyword">null</span>;</div><div class="line">       scur.next=b.next;</div><div class="line">       <span class="keyword">return</span> s.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Reorder-List&quot;&gt;&lt;a href=&quot;#Reorder-List&quot; class=&quot;headerlink&quot; title=&quot;Reorder List&quot;&gt;&lt;/a&gt;Reorder List&lt;/h3&gt;&lt;h4 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Quest
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title> Copy List with Random Pointer || Clone Graph</title>
    <link href="http://yoursite.com/2017/02/05/2017-02-05--Copy-List-with-Random-Pointer-%7C%7C-Clone-Graph/"/>
    <id>http://yoursite.com/2017/02/05/2017-02-05--Copy-List-with-Random-Pointer-||-Clone-Graph/</id>
    <published>2017-02-04T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Copy-List-with-Random-Pointer"><a href="#Copy-List-with-Random-Pointer" class="headerlink" title="Copy List with Random Pointer"></a>Copy List with Random Pointer</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>
<p>Return a deep copy of the list.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/7594/a-solution-with-constant-space-complexity-o-1-and-linear-time-complexity-o-n/2" target="_blank" rel="external">LeetCode DIscussion</a></p>
</blockquote>
<ul>
<li>将整个链表复制一遍，复制节点紧跟原节点</li>
<li>复制每个节点的random指针，复制节点的random指针同理指向复制节点</li>
<li>提取复制后的链表<ul>
<li>复制过程需要两个指针，copy与copyiter，copy指向当前需要加入复制链表的节点，copyiter用来连接整个链表（移动的指针）</li>
<li>加入空表头，方便返回结果 copyiter=pseudo_head</li>
</ul>
</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list with a random pointer.</div><div class="line"> * class RandomListNode &#123;</div><div class="line"> *     int label;</div><div class="line"> *     RandomListNode next, random;</div><div class="line"> *     RandomListNode(int x) &#123; this.label = x; &#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> RandomListNode <span class="title">copyRandomList</span><span class="params">(RandomListNode head)</span> </span>&#123;</div><div class="line">        <span class="comment">//Copy the whole list</span></div><div class="line">         RandomListNode iter=head,next;</div><div class="line">         </div><div class="line">         <span class="keyword">while</span>(iter!=<span class="keyword">null</span>)&#123;</div><div class="line">             next=iter.next;</div><div class="line">             RandomListNode copy=<span class="keyword">new</span> RandomListNode(iter.label);</div><div class="line">             iter.next=copy;</div><div class="line">             copy.next=next;</div><div class="line">             iter=next;</div><div class="line">         &#125;</div><div class="line">         </div><div class="line">         <span class="comment">//Copy the random node</span></div><div class="line">         iter=head;</div><div class="line">         </div><div class="line">         <span class="keyword">while</span>(iter!=<span class="keyword">null</span>)&#123;</div><div class="line">             <span class="keyword">if</span>(iter.random!=<span class="keyword">null</span>)&#123;</div><div class="line">                 iter.next.random=iter.random.next;</div><div class="line">             &#125;</div><div class="line">             iter=iter.next.next;</div><div class="line">         &#125;</div><div class="line">         </div><div class="line">         <span class="comment">//Get the result</span></div><div class="line">         RandomListNode res=<span class="keyword">new</span> RandomListNode(<span class="number">0</span>);</div><div class="line">         RandomListNode copy,copyiter=res;</div><div class="line">         iter=head;</div><div class="line">         <span class="keyword">while</span>(iter!=<span class="keyword">null</span>)&#123;</div><div class="line">             next=iter.next.next;</div><div class="line">             </div><div class="line">             copy=iter.next;</div><div class="line">             copyiter.next=copy;</div><div class="line">             copyiter=copy;</div><div class="line">             </div><div class="line">             iter.next=next;</div><div class="line">             iter=next;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> res.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Clone-Graph"><a href="#Clone-Graph" class="headerlink" title="Clone Graph"></a>Clone Graph</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>利用BFS递归对图进行复制，map保存节点val与相应节点的映射关系</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for undirected graph.</div><div class="line"> * class UndirectedGraphNode &#123;</div><div class="line"> *     int label;</div><div class="line"> *     List&lt;UndirectedGraphNode&gt; neighbors;</div><div class="line"> *     UndirectedGraphNode(int x) &#123; label = x; neighbors = new ArrayList&lt;UndirectedGraphNode&gt;(); &#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    HashMap&lt;Integer,UndirectedGraphNode&gt; map=<span class="keyword">new</span> HashMap&lt;Integer,UndirectedGraphNode&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> UndirectedGraphNode <span class="title">cloneGraph</span><span class="params">(UndirectedGraphNode node)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> clonehelper(node);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> UndirectedGraphNode <span class="title">clonehelper</span><span class="params">(UndirectedGraphNode node)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(map.containsKey(node.label))&#123;</div><div class="line">            <span class="keyword">return</span> map.get(node.label);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        UndirectedGraphNode copy=<span class="keyword">new</span> UndirectedGraphNode(node.label);</div><div class="line">        map.put(copy.label,copy);</div><div class="line">        List&lt;UndirectedGraphNode&gt; neighbor=node.neighbors;</div><div class="line">        <span class="keyword">for</span>(UndirectedGraphNode each:neighbor)&#123;</div><div class="line">                copy.neighbors.add(clonehelper(each));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> copy;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Copy-List-with-Random-Pointer&quot;&gt;&lt;a href=&quot;#Copy-List-with-Random-Pointer&quot; class=&quot;headerlink&quot; title=&quot;Copy List with Random Pointer&quot;&gt;&lt;/a
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title> Jump Game || Gas Station </title>
    <link href="http://yoursite.com/2017/02/04/2017-02-04--Jump-Game-%7C%7C-Gas-Station%20/"/>
    <id>http://yoursite.com/2017/02/04/2017-02-04--Jump-Game-||-Gas-Station /</id>
    <published>2017-02-03T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jump-Game"><a href="#Jump-Game" class="headerlink" title="Jump Game"></a>Jump Game</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Determine if you are able to reach the last index.</p>
<p>For example:</p>
<p>A = [2,3,1,1,4], return true.</p>
<p>A = [3,2,1,0,4], return false.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>遍历整个数组，利用reach标记当前可达的最大脚标，假如i&gt;reach则停止遍历，判断此时i是否等于数组长度，假如可达的话，i应该恰好在des处停止</p>
<p>注意： <strong>i&lt;=reach</strong>，而非 i&lt;reach,初始条件下 i=reach=0</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><ol>
<li>Greedy</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> des=nums.length;</div><div class="line">        <span class="keyword">if</span>(des&lt;<span class="number">2</span>)   <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> reach=<span class="number">0</span>;i&lt;des&amp;&amp;i&lt;=reach;i++)&#123;</div><div class="line">            reach=Math.max(reach,i+nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (i==des)?<span class="keyword">true</span>:<span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Gas-Station"><a href="#Gas-Station" class="headerlink" title="Gas Station"></a>Gas Station</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>There are <em>N</em> gas stations along a circular route, where the amount of gas at station <em>i</em> is gas[i].</p>
<p>You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station <em>i</em> to its next station (<em>i</em>+1). You begin the journey with an empty tank at one of the gas stations.</p>
<p>Return the starting gas station’s index if you can travel around the circuit once, otherwise return -1.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>一开始只想着从每个节点开始遍历一圈，确认gas_total&gt;=cost_total，TLE</p>
<blockquote>
<p><a href="https://discuss.leetcode.com/topic/1344/share-some-of-my-ideas/2" target="_blank" rel="external">LeetCode Discuss</a></p>
</blockquote>
<ul>
<li>假如当前车站A(begin)无法到达B，则A-B的所有车站都无法到达B，begin从i+1开始</li>
<li>gas_total&gt;=cost_total,即有路可寻</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><ol>
<li>Greedy Version</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> total=<span class="number">0</span>,temp=<span class="number">0</span>,begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gas.length;i++)&#123;</div><div class="line">            temp=temp+gas[i]-cost[i];</div><div class="line">            <span class="keyword">if</span>(temp&lt;<span class="number">0</span>)&#123;</div><div class="line">                begin=i+<span class="number">1</span>;</div><div class="line">                total+=temp;</div><div class="line">                temp=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (total+temp&lt;<span class="number">0</span>)?-<span class="number">1</span>:begin;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>TLE version</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> total=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res=-<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gas.length;i++)&#123;</div><div class="line">            res=helper(i,gas,cost);</div><div class="line">            <span class="keyword">if</span>(res!=-<span class="number">1</span>) </div><div class="line">                <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> total=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> N=gas.length;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i-begin&lt;N;i++)&#123;</div><div class="line">            <span class="keyword">int</span> index=(i%N);</div><div class="line">            total+=gas[index]-cost[index];</div><div class="line">            <span class="keyword">if</span>(total&lt;<span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> begin;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Jump-Game&quot;&gt;&lt;a href=&quot;#Jump-Game&quot; class=&quot;headerlink&quot; title=&quot;Jump Game&quot;&gt;&lt;/a&gt;Jump Game&lt;/h3&gt;&lt;h4 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title> Find All Duplicates in an Array || Find All Numbers Disappeared in an Array</title>
    <link href="http://yoursite.com/2017/02/04/2017-02-04--Find-All-Duplicates-in-an-Array-%7C%7C-Find-All-Numbers-Disappeared-in-an-Array/"/>
    <id>http://yoursite.com/2017/02/04/2017-02-04--Find-All-Duplicates-in-an-Array-||-Find-All-Numbers-Disappeared-in-an-Array/</id>
    <published>2017-02-03T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Find-All-Duplicates-in-an-Array"><a href="#Find-All-Duplicates-in-an-Array" class="headerlink" title="Find All Duplicates in an Array"></a>Find All Duplicates in an Array</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given an array of integers, 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array), some elements appear <strong>twice</strong> and others appear <strong>once</strong>.</p>
<p>Find all the elements that appear <strong>twice</strong> in this array.</p>
<p>Could you do it without extra space and in O(<em>n</em>) runtime?</p>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[4,3,2,7,8,2,3,1]</div><div class="line"></div><div class="line">Output:</div><div class="line">[2,3]</div></pre></td></tr></table></figure>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>从头遍历数组，数字num对应index的数字变为负数，假如遍历到某数num为负，代表该index出现过一次，将index+1添加到res中</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList();</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            <span class="keyword">int</span> index=Math.abs(nums[i])-<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(nums[index]&lt;<span class="number">0</span>)</div><div class="line">                res.add(index+<span class="number">1</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                nums[index]=-nums[index];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Find-All-Numbers-Disappeared-in-an-Array"><a href="#Find-All-Numbers-Disappeared-in-an-Array" class="headerlink" title="Find All Numbers Disappeared in an Array"></a>Find All Numbers Disappeared in an Array</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given an array of integers where 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array), some elements appear twice and others appear once.</p>
<p>Find all the elements of [1, <em>n</em>] inclusive that do not appear in this array.</p>
<p>Could you do it without extra space and in O(<em>n</em>) runtime? You may assume the returned list does not count as extra space.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[4,3,2,7,8,2,3,1]</div><div class="line"></div><div class="line">Output:</div><div class="line">[5,6]</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>同上，将出现过的num对应index的数字变为负的，第二次遍历的时候假如某数num为正，代表该index数字未出现过</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList();</div><div class="line">    </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            <span class="keyword">int</span> index=Math.abs(nums[i])-<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(nums[index]&gt;<span class="number">0</span>)</div><div class="line">                nums[index]=-nums[index];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)</div><div class="line">                res.add(i+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Find-All-Duplicates-in-an-Array&quot;&gt;&lt;a href=&quot;#Find-All-Duplicates-in-an-Array&quot; class=&quot;headerlink&quot; title=&quot;Find All Duplicates in an Arra
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title> Word Ladder Series</title>
    <link href="http://yoursite.com/2017/02/02/2017-02-02--Word-Ladder-Series/"/>
    <id>http://yoursite.com/2017/02/02/2017-02-02--Word-Ladder-Series/</id>
    <published>2017-02-01T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Word-Ladder"><a href="#Word-Ladder" class="headerlink" title="Word Ladder"></a>Word Ladder</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary’s word list, find the length of shortest transformation sequence from <em>beginWord</em> to <em>endWord</em>, such that:</p>
<ol>
<li>Only one letter can be changed at a time.</li>
<li>Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.</li>
</ol>
<p>For example,</p>
<p>Given:</p>
<p><em>beginWord</em> = “hit”</p>
<p><em>endWord</em> = “cog”</p>
<p><em>wordList</em> = [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]</p>
<p>As one shortest transformation is “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”,</p>
<p>return its length 5.</p>
<p><strong>Note:</strong></p>
<ul>
<li>Return 0 if there is no such transformation sequence.</li>
<li>All words have the same length.</li>
<li>All words contain only lowercase alphabetic characters.</li>
<li>You may assume no duplicates in the word list.</li>
<li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li>
</ul>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>所有的词可以构成一张图，每个词相当于一个顶点，彼此间相差一个字母的词相连，利用BFS遍历整张图，第一次碰到endWord时的距离即使最短的。</p>
<ul>
<li>由于正常查找toAdd的方式会TLE，所以在每次得到toAdd的时候，将较小的集合作为begin，较大的集合作为end</li>
<li>题中给出的List查找效率较低（我也不知道什么效率低，大概是查找吧），所以也会导致TLE，在一开始的时候就要创建Set</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p><strong>Normal Solution</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!wordList.contains(endWord))  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        Set&lt;String&gt; reached=<span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">        reached.add(beginWord);</div><div class="line">        <span class="keyword">int</span> distance=<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(!reached.contains(endWord))&#123;</div><div class="line">            Set&lt;String&gt; toAdd=<span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">            <span class="keyword">for</span>(String each:reached)&#123;</div><div class="line">                <span class="keyword">char</span>[] str=each.toCharArray();</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;each.length();i++)&#123;</div><div class="line">                    <span class="keyword">char</span> old=str[i];</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">'a'</span>;c&lt;=<span class="string">'z'</span>;c++)&#123;</div><div class="line">                        str[i]=c;</div><div class="line">                        String newword=<span class="keyword">new</span> String(str);</div><div class="line">                        <span class="keyword">if</span>(wordList.contains(newword))&#123;</div><div class="line">                            toAdd.add(newword);</div><div class="line">                            wordList.remove(newword);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    str[i]=old;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            distance++;</div><div class="line">            <span class="keyword">if</span>(toAdd.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            reached=toAdd;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> distance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Two-end Solution</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordAsList)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!wordAsList.contains(endWord))  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        Set&lt;String&gt; wordList=<span class="keyword">new</span> HashSet(wordAsList);</div><div class="line">        Set&lt;String&gt; begin=<span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">        Set&lt;String&gt; end=<span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">        <span class="keyword">int</span> distance=<span class="number">1</span>;</div><div class="line">        </div><div class="line">        begin.add(beginWord);</div><div class="line">        end.add(endWord);</div><div class="line">        wordList.remove(beginWord);</div><div class="line">        wordList.remove(endWord);</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(!begin.isEmpty())&#123;</div><div class="line">            Set&lt;String&gt; toAdd=<span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">            <span class="keyword">for</span>(String each:begin)&#123;</div><div class="line">                <span class="keyword">char</span>[] str=each.toCharArray();</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;each.length();i++)&#123;</div><div class="line">                    <span class="keyword">char</span> old=str[i];</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">'a'</span>;c&lt;=<span class="string">'z'</span>;c++)&#123;</div><div class="line">                        str[i]=c;</div><div class="line">                        String newword=String.valueOf(str);</div><div class="line">                        </div><div class="line">                        <span class="keyword">if</span>(end.contains(newword))   <span class="keyword">return</span> distance+<span class="number">1</span>;</div><div class="line">                        </div><div class="line">                        <span class="keyword">if</span>(wordList.contains(newword))&#123;</div><div class="line">                            wordList.remove(newword);</div><div class="line">                            toAdd.add(newword);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    str[i]=old;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            begin=(toAdd.size()&lt;end.size())?toAdd:end;</div><div class="line">            end=(begin.size()&lt;end.size())?end:toAdd;</div><div class="line">            distance++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Word-Ladder-II"><a href="#Word-Ladder-II" class="headerlink" title="Word Ladder II"></a>Word Ladder II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary’s word list, find all shortest transformation sequence(s) from <em>beginWord</em> to <em>endWord</em>, such that:</p>
<ol>
<li>Only one letter can be changed at a time</li>
<li>Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.</li>
</ol>
<p>For example,</p>
<p>Given:</p>
<p><em>beginWord</em> = “hit”</p>
<p><em>endWord</em> = “cog”</p>
<p><em>wordList</em> = [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]</p>
<p>Return</p>
<p>  [</p>
<pre><code>[&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],

[&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]
</code></pre><p>  ]</p>
<p><strong>Note:</strong></p>
<ul>
<li>Return an empty list if there is no such transformation sequence.</li>
<li>All words have the same length.</li>
<li>All words contain only lowercase alphabetic characters.</li>
<li>You may assume no duplicates in the word list.</li>
<li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li>
</ul>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="https://discuss.leetcode.com/topic/27504/my-concise-java-solution-based-on-bfs-and-dfs" target="_blank" rel="external">LeetCode Discussion</a></p>
</blockquote>
<ul>
<li>利用BFS，找到所有词间可能的关系，利用DFS，找到相应的路径并添加到res中</li>
<li>BFS遍历过程同Word Ladder I，只不过不需要再找到endWord时候退出循环</li>
<li>nodeneighbors 保存每个节点的邻居节点</li>
<li>distance 保存当前节点与beginWord相差的字母个数，只有在BFS过程中第一次遇到某词才进行添加，后续不需要更新，因为第一次碰到是距离beginWord距离最短的</li>
<li>DFS遍历过程中同Backtracking，在每次调用初始像solution加入当前节点，在碰到endWord时，向res加入solution，<strong>加入solution时需要new ArrayList\<string>(Solution)</string></strong></li>
<li>DFS过程中，当下一节点与当前节点距离beginWord距离相差1时递归调用，且在完成一次递归调用的时候，删除在此次调用时加入的节点</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; findLadders(String beginWord, String endWord, List&lt;String&gt; wordAsList) &#123;</div><div class="line">        List&lt;List&lt;String&gt;&gt; res=<span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">if</span>(!wordAsList.contains(endWord))   <span class="keyword">return</span> res;</div><div class="line">        List&lt;String&gt; solution=<span class="keyword">new</span> ArrayList();</div><div class="line">        Map&lt;String, ArrayList&lt;String&gt;&gt; neighbors=<span class="keyword">new</span> HashMap();</div><div class="line">        Map&lt;String,Integer&gt; distance=<span class="keyword">new</span> HashMap();</div><div class="line">        Set&lt;String&gt; wordList=<span class="keyword">new</span> HashSet(wordAsList);</div><div class="line">        wordList.add(beginWord);</div><div class="line">        distance.put(beginWord,<span class="number">0</span>);</div><div class="line">        </div><div class="line">        bfs(beginWord,endWord,wordList,neighbors,distance);</div><div class="line">        dfs(beginWord,endWord,wordList,neighbors,distance,solution,res);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(String beginWord, String endWord, Set&lt;String&gt; wordList, Map&lt;String,ArrayList&lt;String&gt;&gt; nodeneighbors, Map&lt;String,Integer&gt; distance)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(String word:wordList)&#123;</div><div class="line">            nodeneighbors.put(word,<span class="keyword">new</span> ArrayList&lt;String&gt;());</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        List&lt;String&gt; begin=<span class="keyword">new</span> ArrayList();</div><div class="line">        begin.add(beginWord);</div><div class="line">        distance.put(beginWord,<span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(!begin.isEmpty())&#123;</div><div class="line">            List&lt;String&gt; toAdd=<span class="keyword">new</span> ArrayList();</div><div class="line">            <span class="keyword">boolean</span> findend=<span class="keyword">false</span>;</div><div class="line">        </div><div class="line">            <span class="keyword">for</span>(String each:begin)&#123;</div><div class="line">                </div><div class="line">                <span class="keyword">int</span> curdistance=distance.get(each);</div><div class="line">                List&lt;String&gt; neighbors=getneighbors(each,wordList);</div><div class="line">                </div><div class="line">                <span class="keyword">for</span>(String item:neighbors)&#123;</div><div class="line">                    nodeneighbors.get(each).add(item);</div><div class="line">                    <span class="keyword">if</span>(!distance.containsKey(item))&#123;</div><div class="line">                        distance.put(item,curdistance+<span class="number">1</span>);</div><div class="line">                        toAdd.add(item);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            begin=toAdd;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getneighbors</span><span class="params">(String str, Set&lt;String&gt; wordList)</span></span>&#123;</div><div class="line">        List&lt;String&gt; neighbors=<span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">char</span>[] s=str.toCharArray();</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length;i++)&#123;</div><div class="line">            <span class="keyword">char</span> old=s[i];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">'a'</span>;c&lt;=<span class="string">'z'</span>;c++)&#123;</div><div class="line">                <span class="keyword">if</span>(s[i]==c)     <span class="keyword">continue</span>;</div><div class="line">                s[i]=c;</div><div class="line">                String newWord=<span class="keyword">new</span> String(s);</div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(wordList.contains(newWord))&#123;</div><div class="line">                    neighbors.add(newWord);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            s[i]=old;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> neighbors;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String cur, String endWord, Set&lt;String&gt; wordList, Map&lt;String,ArrayList&lt;String&gt;&gt; nodeneighbors, Map&lt;String,Integer&gt; distance, List&lt;String&gt; solution, List&lt;List&lt;String&gt;&gt; res)</span></span>&#123;</div><div class="line">        </div><div class="line">        solution.add(cur);</div><div class="line">        <span class="keyword">if</span>(cur.equals(endWord))&#123;</div><div class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;String&gt;(solution));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(String next:nodeneighbors.get(cur))&#123;</div><div class="line">                <span class="keyword">if</span>(distance.get(next)==distance.get(cur)+<span class="number">1</span>)&#123;</div><div class="line">                    dfs(next,endWord,wordList,nodeneighbors,distance,solution,res);</div><div class="line">                &#125;</div><div class="line">            &#125;   </div><div class="line">        &#125;</div><div class="line">        solution.remove(solution.size()-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Word-Ladder&quot;&gt;&lt;a href=&quot;#Word-Ladder&quot; class=&quot;headerlink&quot; title=&quot;Word Ladder&quot;&gt;&lt;/a&gt;Word Ladder&lt;/h3&gt;&lt;h4 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot;
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title> Sum of Two Integers </title>
    <link href="http://yoursite.com/2017/02/01/2017-02-01--Sum-of-Two-Integers%20/"/>
    <id>http://yoursite.com/2017/02/01/2017-02-01--Sum-of-Two-Integers /</id>
    <published>2017-01-31T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Sum-of-Two-Integers"><a href="#Sum-of-Two-Integers" class="headerlink" title="Sum of Two Integers"></a>Sum of Two Integers</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Calculate the sum of two integers <em>a</em> and <em>b</em>, but you are <strong>not allowed</strong> to use the operator + and -.</p>
<p><strong>Example:</strong></p>
<p>Given <em>a</em> = 1 and <em>b</em> = 2, return 3.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>a&amp;b 对于同一位，相同且均为1才会产生进位，故a&amp;b可得进位carry</li>
<li>a^b 相当于+操作，同为1产生进位当前位为0，同为0所得为0，不同数字才会得当前位为1的结果</li>
<li>由于进位只能向前进位，故每次对carry进行左移位赋给b，直至b=0</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(a==<span class="number">0</span>)    <span class="keyword">return</span> b;</div><div class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>)    <span class="keyword">return</span> a;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">int</span> carry=a&amp;b;</div><div class="line">            a=a^b;</div><div class="line">            b=carry&lt;&lt;<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="延伸-Subtraction-of-Two-Number"><a href="#延伸-Subtraction-of-Two-Number" class="headerlink" title="延伸 Subtraction of Two Number"></a>延伸 Subtraction of Two Number</h3><h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li><p>借位</p>
<p>0-1 需借位        0 1 = 1</p>
<p>1-1、0-0、1-0均无需借位    0 0 = 0     1 1 = 1    1 0 = 0</p>
<p>故只有当被减数a当前位数字为0，b当前位为1时才需借位，即borrow=(~a)&amp;b</p>
</li>
<li><p>减法</p>
<p>0-0=0,     0-1=1,     1-0=1,     1-1=0</p>
<p>满足异或^, 即 a^=b</p>
</li>
<li><p>第一次a&amp;b所得相当于没考虑借位的减法结果，故只需将b等于borrow左移1位不断减去借位，直至b=0</p>
</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSubtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">int</span> borrow = (~a) &amp; b;</div><div class="line">		a = a ^ b;</div><div class="line">		b = borrow &lt;&lt; <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="延伸-Negative-Number"><a href="#延伸-Negative-Number" class="headerlink" title="延伸 Negative Number"></a>延伸 Negative Number</h3><h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><p><a href="http://lib.csdn.net/base/javase" target="_blank" rel="external"><strong>Java</strong></a> 如何表示负数</p>
<p>　　任何整数类型都存在负数，那么java中是如何表示负数的呢。</p>
<p><strong>例如</strong> 5 在 计算机中的二进制表示为 0101，那么其负数（-5）怎么表示呢？</p>
<p>通过这个步骤就行：</p>
<p>注意，在做如下操作之前，我们应该非常注意5的二进制表示，它的高位一定要为0，也就是说如果5写成101，那么我们必须先将其表示成0101，这样按位取反的时候高位才会变为1。</p>
<p>将5按位取反，标为 1010， 然后加上1，变为1011，即为-5在计算机中的表示。</p>
<p>反过来，看到1011，第一反应看他的高位，如果高位为1，则肯定是个负数，那么他到底是负几呢，如下操作：将1011按位取反，得到0100，然后加上1，则得到其值0101，为5。则说明1011代表的是-5。</p>
<p><strong>将x取反+1，即得其负数</strong></p>
<h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> ~x + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Sum-of-Two-Integers&quot;&gt;&lt;a href=&quot;#Sum-of-Two-Integers&quot; class=&quot;headerlink&quot; title=&quot;Sum of Two Integers&quot;&gt;&lt;/a&gt;Sum of Two Integers&lt;/h3&gt;&lt;h4 i
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title> Sort Characters By Frequency || Top K Frequent Elements</title>
    <link href="http://yoursite.com/2017/01/29/2017-01-29--Sort-Characters-By-Frequency%20/"/>
    <id>http://yoursite.com/2017/01/29/2017-01-29--Sort-Characters-By-Frequency /</id>
    <published>2017-01-28T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Sort-Characters-By-Frequency"><a href="#Sort-Characters-By-Frequency" class="headerlink" title="Sort Characters By Frequency"></a>Sort Characters By Frequency</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a string, sort it in decreasing order based on the frequency of characters.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**Input:**</span></div><div class="line">"tree"</div><div class="line"></div><div class="line"><span class="strong">**Output:**</span></div><div class="line">"eert"</div><div class="line"></div><div class="line"><span class="strong">**Explanation:**</span></div><div class="line">'e' appears twice while 'r' and 't' both appear once.</div><div class="line">So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">&quot;cccaaa&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">&quot;cccaaa&quot;</div><div class="line"></div><div class="line">Explanation:</div><div class="line">Both &apos;c&apos; and &apos;a&apos; appear three times, so &quot;aaaccc&quot; is also a valid answer.</div><div class="line">Note that &quot;cacaca&quot; is incorrect, as the same characters must be together.</div></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">&quot;Aabb&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">&quot;bbAa&quot;</div><div class="line"></div><div class="line">Explanation:</div><div class="line">&quot;bbaA&quot; is also a valid answer, but &quot;Aabb&quot; is incorrect.</div><div class="line">Note that &apos;A&apos; and &apos;a&apos; are treated as two different characters.</div></pre></td></tr></table></figure>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ol>
<li>O(n)解法<ul>
<li>利用map记录出现在string中的各字符的次数</li>
<li>List Array的脚标i表示该字符在String中出现的次数，List以string的形式存储char，方便后续脚标从大到小遍历。 注意在新建ArrayList之后还需向其中加入当前字符ch，所以不能用else</li>
<li>根据脚标从大到小遍历，将字符以脚标个数加入字符串中</li>
</ul>
</li>
<li>利用Bucket Sort解决该问题<ul>
<li>ASCII码字符共有256个，故利用数组记录不同字符的出现次数</li>
<li>构造maxcount+1个String桶，将出现了相同次数的字符放入String桶中</li>
<li>同上进行遍历</li>
</ul>
</li>
</ol>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">frequencySort</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s.length()&lt;<span class="number">3</span>)    <span class="keyword">return</span> s;</div><div class="line">        Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(Character ch:s.toCharArray())&#123;</div><div class="line">            map.put(ch,map.getOrDefault(ch,<span class="number">0</span>)+<span class="number">1</span>);</div><div class="line">            max=Math.max(max,map.get(ch));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//Get List</span></div><div class="line">        List&lt;Character&gt;[] str=<span class="keyword">new</span> List[max+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(Character ch:map.keySet())&#123;</div><div class="line">            <span class="keyword">int</span> tmp=map.get(ch);</div><div class="line">            <span class="keyword">if</span>(str[tmp]==<span class="keyword">null</span>)  </div><div class="line">                str[tmp]=<span class="keyword">new</span> ArrayList();</div><div class="line">            str[tmp].add(ch);		<span class="comment">//Should not use else</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//Get result string</span></div><div class="line">        StringBuilder res=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=max;i&gt;<span class="number">0</span>;i--)&#123;</div><div class="line">            List&lt;Character&gt; list=str[i];</div><div class="line">            <span class="keyword">if</span>(list!=<span class="keyword">null</span>)&#123;</div><div class="line">                 <span class="keyword">for</span>(Character ch:list)&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</div><div class="line">                        res.append(ch);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Bucket Sort</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">frequencySort</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] count=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:s.toCharArray())&#123;</div><div class="line">            count[c]++;</div><div class="line">            max=Math.max(max,count[c]);</div><div class="line">        &#125;</div><div class="line">        String[] bucket=<span class="keyword">new</span> String[max+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</div><div class="line">            String tmp=bucket[count[i]];</div><div class="line">            <span class="keyword">if</span>(count[i]&gt;<span class="number">0</span>)&#123;</div><div class="line">                bucket[count[i]]=(tmp==<span class="keyword">null</span>)?<span class="string">""</span>+(<span class="keyword">char</span>)i:(tmp+(<span class="keyword">char</span>)i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        StringBuilder res=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=max;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">            <span class="keyword">if</span>(bucket[i]!=<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c:bucket[i].toCharArray())&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</div><div class="line">                        res.append(c);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Top-K-Frequent-Elements"><a href="#Top-K-Frequent-Elements" class="headerlink" title="Top K Frequent Elements"></a>Top K Frequent Elements</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a non-empty array of integers, return the <strong>k</strong> most frequent elements.</p>
<p>For example,</p>
<p>Given <code>[1,1,1,2,2,3]</code> and k = 2, return <code>[1,2]</code>.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>同上，在找kth元素的时候利用count计数，满足条件跳出循环</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">topKFrequent</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</div><div class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line">        <span class="comment">//Count the freq of num</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:nums)&#123;</div><div class="line">            map.put(i,map.getOrDefault(i,<span class="number">0</span>)+<span class="number">1</span>);</div><div class="line">            max=Math.max(max,map.get(i));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//Get the list which index is the freq</span></div><div class="line">        List&lt;Integer&gt;[] list=<span class="keyword">new</span> List[max+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(Integer i:map.keySet())&#123;</div><div class="line">            <span class="keyword">int</span> freq=map.get(i);</div><div class="line">            <span class="keyword">if</span>(list[freq]==<span class="keyword">null</span>)</div><div class="line">                list[freq]=<span class="keyword">new</span> ArrayList();</div><div class="line">            list[freq].add(i);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//Return the top Kth</span></div><div class="line">        <span class="keyword">int</span> count=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=max;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">            List&lt;Integer&gt; tmp=list[i];</div><div class="line">            <span class="keyword">if</span>(count&gt;k)     <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span>(tmp!=<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">for</span>(Integer num:tmp)&#123;</div><div class="line">                    <span class="keyword">if</span>(count&lt;=k)&#123;</div><div class="line">                        res.add(num);</div><div class="line">                        count++;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> </div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Sort-Characters-By-Frequency&quot;&gt;&lt;a href=&quot;#Sort-Characters-By-Frequency&quot; class=&quot;headerlink&quot; title=&quot;Sort Characters By Frequency&quot;&gt;&lt;/a&gt;So
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title> Spiral Matrix Series </title>
    <link href="http://yoursite.com/2017/01/23/2017-01-23--Spiral-Matrix-Series%20/"/>
    <id>http://yoursite.com/2017/01/23/2017-01-23--Spiral-Matrix-Series /</id>
    <published>2017-01-22T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spiral-Matrix-I"><a href="#Spiral-Matrix-I" class="headerlink" title="Spiral Matrix I"></a>Spiral Matrix I</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a matrix of <em>m</em> x <em>n</em> elements (<em>m</em> rows, <em>n</em> columns), return all elements of the matrix in spiral order.</p>
<p>For example,</p>
<p>Given the following matrix:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"> [ 1, 2, 3 ],</div><div class="line"> [ 4, 5, 6 ],</div><div class="line"> [ 7, 8, 9 ]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>You should return <code>[1,2,3,6,9,8,7,4,5]</code>.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>利用四个变量colbegin,colend,rowbegin,rowend来记录遍历的每天边上次走到的位置，在遍历完某行某列之后，向内（加1减1操作）移动该边。</p>
<ul>
<li>两个end的标记为长度-1，否则会导致数组的越界</li>
<li>在从下往上遍历的时候需要检查之前的操作后边界是否有重合，假如有重合的话跳过</li>
</ul>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span>(matrix.length==<span class="number">0</span>)    <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">int</span> rowbegin=<span class="number">0</span>,colbegin=<span class="number">0</span>,rowend=matrix.length-<span class="number">1</span>,colend=matrix[<span class="number">0</span>].length-<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(rowbegin&lt;=rowend&amp;&amp;colbegin&lt;=colend)&#123;</div><div class="line">            <span class="comment">//Traverse from left to right</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=colbegin;i&lt;=colend;i++)&#123;</div><div class="line">                res.add(matrix[rowbegin][i]);</div><div class="line">            &#125;</div><div class="line">            rowbegin++;</div><div class="line">            </div><div class="line">            <span class="comment">//Traverse from top to down (in right side)</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=rowbegin;i&lt;=rowend;i++)&#123;</div><div class="line">                res.add(matrix[i][colend]);</div><div class="line">            &#125;</div><div class="line">            colend--;</div><div class="line">            </div><div class="line">            <span class="comment">//Traverse from right to left (in down side)</span></div><div class="line">            <span class="keyword">if</span>(rowbegin&lt;=rowend)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=colend;i&gt;=colbegin;i--)&#123;</div><div class="line">                    res.add(matrix[rowend][i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            rowend--;</div><div class="line">            </div><div class="line">            <span class="comment">//Traverse from down to top (in left side)</span></div><div class="line">            <span class="keyword">if</span>(colbegin&lt;=colend)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=rowend;i&gt;=rowbegin;i--)&#123;</div><div class="line">                    res.add(matrix[i][colbegin]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            colbegin++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Spiral-Matrix-II"><a href="#Spiral-Matrix-II" class="headerlink" title="Spiral Matrix II"></a>Spiral Matrix II</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given an integer <em>n</em>, generate a square matrix filled with elements from 1 to <em>n</em>2 in spiral order.</p>
<p>For example,</p>
<p>Given <em>n</em> = 3,</p>
<p>You should return the following matrix:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"> [ 1, 2, 3 ],</div><div class="line"> [ 8, 9, 4 ],</div><div class="line"> [ 7, 6, 5 ]</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>思路同上，反过来对数组进行填充</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="keyword">int</span>[][] res=<span class="keyword">new</span> <span class="keyword">int</span>[n][n];</div><div class="line">        <span class="keyword">int</span> rowbegin=<span class="number">0</span>,colbegin=<span class="number">0</span>,rowend=n-<span class="number">1</span>,colend=n-<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(rowbegin&lt;=rowend&amp;&amp;colbegin&lt;=colend)&#123;</div><div class="line">            <span class="comment">//To right</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=colbegin;i&lt;=colend;i++)&#123;</div><div class="line">                res[rowbegin][i]=num++;</div><div class="line">            &#125;</div><div class="line">            rowbegin++;</div><div class="line">            </div><div class="line">            <span class="comment">//To down (In right side)</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=rowbegin;i&lt;=rowend;i++)&#123;</div><div class="line">                res[i][colend]=num++;</div><div class="line">            &#125;</div><div class="line">            colend--;</div><div class="line">            </div><div class="line">            <span class="comment">//To left (In bottom side)</span></div><div class="line">            <span class="keyword">if</span>(rowbegin&lt;=rowend)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=colend;i&gt;=colbegin;i--)&#123;</div><div class="line">                    res[rowend][i]=num++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            rowend--;</div><div class="line">            </div><div class="line">            <span class="comment">//To top (In left side)</span></div><div class="line">            <span class="keyword">if</span>(colbegin&lt;=colend)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=rowend;i&gt;=rowbegin;i--)&#123;</div><div class="line">                    res[i][colbegin]=num++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            colbegin++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spiral-Matrix-I&quot;&gt;&lt;a href=&quot;#Spiral-Matrix-I&quot; class=&quot;headerlink&quot; title=&quot;Spiral Matrix I&quot;&gt;&lt;/a&gt;Spiral Matrix I&lt;/h3&gt;&lt;h4 id=&quot;Question&quot;&gt;&lt;a 
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title> Interleaving String || Decode Ways </title>
    <link href="http://yoursite.com/2017/01/23/2017-01-23--Interleaving-String-%7C%7C-Decode-Ways%20/"/>
    <id>http://yoursite.com/2017/01/23/2017-01-23--Interleaving-String-||-Decode-Ways /</id>
    <published>2017-01-22T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Interleaving-String"><a href="#Interleaving-String" class="headerlink" title="Interleaving String"></a>Interleaving String</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given <em>s1</em>, <em>s2</em>, <em>s3</em>, find whether <em>s3</em> is formed by the interleaving of <em>s1</em> and <em>s2</em>.</p>
<p>For example,</p>
<p>Given:</p>
<p><em>s1</em> = <code>&quot;aabcc&quot;</code>,</p>
<p><em>s2</em> = <code>&quot;dbbca&quot;</code>,</p>
<p>When <em>s3</em> =<code>&quot;aadbbcbcac&quot;</code>, return true.</p>
<p>When <em>s3</em> = <code>&quot;aadbbbaccc&quot;</code>, return false.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="http://fisherlei.blogspot.com/2012/12/leetcode-interleaving-string.html" target="_blank" rel="external">中文题解</a></p>
</blockquote>
<p>对于</p>
<p>s1 = a1, a2 ……..a(i-1), ai</p>
<p>s2 = b1, b2, …….b(j-1), bj</p>
<p>s3 = c1, c3, …….c(i+j-1), c(i+j)</p>
<p>定义 match[i][j] 意味着，S1的(0, i)和S2的(0,j)，匹配与S3的(i+j)</p>
<p>如果 ai == c(i+j), 那么 match[i][j] = match[i-1][j]， 等价于如下字符串是否匹配。</p>
<p>s1 = a1, a2 ……..a(i-1)</p>
<p>s2 = b1, b2, …….b(j-1), bj</p>
<p>s3 = c1, c3, …….c(i+j-1)</p>
<p>同理，如果bj = c(i+j), 那么match[i][j] = match[i][j-1];</p>
<p>转移方程如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Match[i][j]</div><div class="line">    =   (s3.lastChar == s1.lastChar) &amp;&amp; Match[i-1][j]</div><div class="line">      ||(s3.lastChar == s2.lastChar) &amp;&amp; Match[i][j-1]</div><div class="line">初始条件：</div><div class="line">    i=0 &amp;&amp; j=0时，Match[0][0] = true;</div><div class="line">    i=0时， s3[j] = s2[j], Match[0][j] |= Match[0][j-1]</div><div class="line">           s3[j] != s2[j], Match[0][j] = false;</div><div class="line"></div><div class="line">    j=0时， s3[i] = s1[i], Match[i][0] |= Match[i-1][0]</div><div class="line">           s3[i] != s1[i], Match[i][0] = false;</div></pre></td></tr></table></figure>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s1.length()+s2.length()!=s3.length())    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">boolean</span>[][] match=<span class="keyword">new</span> <span class="keyword">boolean</span>[s1.length()+<span class="number">1</span>][s2.length()+<span class="number">1</span>];</div><div class="line">        match[<span class="number">0</span>][<span class="number">0</span>]=<span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s1.length();i++)&#123;</div><div class="line">            match[i][<span class="number">0</span>]=match[i-<span class="number">1</span>][<span class="number">0</span>]&amp;&amp;s1.charAt(i-<span class="number">1</span>)==s3.charAt(i-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s2.length();i++)&#123;</div><div class="line">            match[<span class="number">0</span>][i]=match[<span class="number">0</span>][i-<span class="number">1</span>]&amp;&amp;s2.charAt(i-<span class="number">1</span>)==s3.charAt(i-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s1.length();i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=s2.length();j++)&#123;</div><div class="line">                match[i][j]=(match[i-<span class="number">1</span>][j]&amp;&amp;s1.charAt(i-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>))||(match[i][j-<span class="number">1</span>]&amp;&amp;s2.charAt(j-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> match[s1.length()][s2.length()];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Decode-Ways"><a href="#Decode-Ways" class="headerlink" title="Decode Ways"></a>Decode Ways</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>A message containing letters from A-Z is being encoded to numbers using the following mapping:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&apos;A&apos; -&gt; 1</div><div class="line">&apos;B&apos; -&gt; 2</div><div class="line">...</div><div class="line">&apos;Z&apos; -&gt; 26</div></pre></td></tr></table></figure>
<p>Given an encoded message containing digits, determine the total number of ways to decode it.</p>
<p>For example,</p>
<p>Given encoded message “12”, it could be decoded as “AB” (1 2) or “L” (12).</p>
<p>The number of ways decoding “12” is 2.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>一开始考虑用一个数组来记录不同的组合数，后来发现当前i的decode way只与i-1、i-2的decode way个数有关，所以可以用r1,r2两个变量来记录。</p>
<ul>
<li>若字符i为0，由于此时字符i不能独立拆分，所以r1=0</li>
<li>若当前字符可以之前字符组合，则r1=r1+r2,r2=r1（原）</li>
<li>若当前字符不可组成字符组合，当前字符decode way个数不变，r1不变，r2向前移动（r2=r1）</li>
</ul>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> r1=<span class="number">1</span>,r2=<span class="number">1</span>;  <span class="comment">//r1 the decoding ways of str(i-1), r2 the decoding ways of str(i-2)</span></div><div class="line">        <span class="keyword">if</span>(s.length()==<span class="number">0</span>||s.charAt(<span class="number">0</span>)==<span class="string">'0'</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length();i++)&#123;</div><div class="line">            <span class="keyword">if</span>(s.charAt(i)==<span class="string">'0'</span>)    r1=<span class="number">0</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>)==<span class="string">'1'</span>||s.charAt(i-<span class="number">1</span>)==<span class="string">'2'</span>&amp;&amp;s.charAt(i)&lt;<span class="string">'7'</span>)&#123;</div><div class="line">                <span class="keyword">int</span> tmp=r1;</div><div class="line">                r1=r1+r2;</div><div class="line">                r2=tmp;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                r2=r1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> r1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Interleaving-String&quot;&gt;&lt;a href=&quot;#Interleaving-String&quot; class=&quot;headerlink&quot; title=&quot;Interleaving String&quot;&gt;&lt;/a&gt;Interleaving String&lt;/h3&gt;&lt;h4 i
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title> Binary Tree Maximum Path Sum || Binary Tree Postorder Traversal</title>
    <link href="http://yoursite.com/2017/01/22/2017-01-22--Binary-Tree-Maximum-Path-Sum-%7C%7C-Binary-Tree-Postorder-Traversal/"/>
    <id>http://yoursite.com/2017/01/22/2017-01-22--Binary-Tree-Maximum-Path-Sum-||-Binary-Tree-Postorder-Traversal/</id>
    <published>2017-01-21T16:00:00.000Z</published>
    <updated>2017-07-07T21:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Binary-Tree-Maximum-Path-Sum"><a href="#Binary-Tree-Maximum-Path-Sum" class="headerlink" title="Binary Tree Maximum Path Sum"></a>Binary Tree Maximum Path Sum</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>Given a binary tree, find the maximum path sum.</p>
<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain <strong>at least one node</strong> and does not need to go through the root.</p>
<p>For example:</p>
<p>Given the below binary tree,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  1</div><div class="line"> / \</div><div class="line">2   3</div></pre></td></tr></table></figure>
<p>Return <code>6</code>.</p>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><blockquote>
<p><a href="http://fisherlei.blogspot.com/2013/01/leetcode-binary-tree-maximum-path-sum.html" target="_blank" rel="external">中文题解</a></p>
</blockquote>
<p>如上述题解所说的，最后的路径可能有四种情况：</p>
<ol>
<li>只有node</li>
<li>node+leftsub</li>
<li>node+rightsub</li>
<li>node+leftsub+rightsub</li>
</ol>
<p>故在计算的过程中，假如left/right=0，则可得1-3种情况的值，若均不为0，则为第4种情况，同时与已经记录的maxvalue进行大小比较确定师傅需要更新。</p>
<p>由于路径不能回退的特性，所以返回值是right，left的最大值加上当前的val</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxvalue;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        maxvalue=Integer.MIN_VALUE;</div><div class="line">        maxPath(root);</div><div class="line">        <span class="keyword">return</span> maxvalue;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPath</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> left=Math.max(<span class="number">0</span>,maxPath(root.left));</div><div class="line">        <span class="keyword">int</span> right=Math.max(<span class="number">0</span>,maxPath(root.right));</div><div class="line">        maxvalue=Math.max(maxvalue,left+right+root.val);</div><div class="line">        <span class="keyword">return</span> Math.max(left,right)+root.val;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Binary-Tree-Postorder-Traversal"><a href="#Binary-Tree-Postorder-Traversal" class="headerlink" title="Binary Tree Postorder Traversal"></a>Binary Tree Postorder Traversal</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><p>Given a binary tree, return the <em>postorder</em> traversal of its nodes’ values.</p>
<p>For example:</p>
<p>Given binary tree <code>{1,#,2,3}</code>,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"> \</div><div class="line">  2</div><div class="line"> /</div><div class="line">3</div></pre></td></tr></table></figure>
<p>return <code>[3,2,1]</code>.</p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>正常的递归后续遍历</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; result=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        helper(root,result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)  <span class="keyword">return</span>;</div><div class="line">        helper(root.left,result);</div><div class="line">        helper(root.right,result);</div><div class="line">        result.add(root.val);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Binary-Tree-Maximum-Path-Sum&quot;&gt;&lt;a href=&quot;#Binary-Tree-Maximum-Path-Sum&quot; class=&quot;headerlink&quot; title=&quot;Binary Tree Maximum Path Sum&quot;&gt;&lt;/a&gt;Bi
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
